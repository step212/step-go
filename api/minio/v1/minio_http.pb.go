// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v6.30.0
// source: minio/v1/minio.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMinioGetDownloadPreSignedUrl = "/minio.v1.Minio/GetDownloadPreSignedUrl"
const OperationMinioGetUploadPreSignedUrl = "/minio.v1.Minio/GetUploadPreSignedUrl"

type MinioHTTPServer interface {
	GetDownloadPreSignedUrl(context.Context, *GetDownloadPreSignedUrlRequest) (*GetDownloadPreSignedUrlReply, error)
	GetUploadPreSignedUrl(context.Context, *GetUploadPreSignedUrlRequest) (*GetUploadPreSignedUrlReply, error)
}

func RegisterMinioHTTPServer(s *http.Server, srv MinioHTTPServer) {
	r := s.Route("/")
	r.GET("/minio/presigned/upload_url", _Minio_GetUploadPreSignedUrl0_HTTP_Handler(srv))
	r.GET("/minio/presigned/download_url", _Minio_GetDownloadPreSignedUrl0_HTTP_Handler(srv))
}

func _Minio_GetUploadPreSignedUrl0_HTTP_Handler(srv MinioHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUploadPreSignedUrlRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMinioGetUploadPreSignedUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUploadPreSignedUrl(ctx, req.(*GetUploadPreSignedUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUploadPreSignedUrlReply)
		return ctx.Result(200, reply)
	}
}

func _Minio_GetDownloadPreSignedUrl0_HTTP_Handler(srv MinioHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDownloadPreSignedUrlRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMinioGetDownloadPreSignedUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDownloadPreSignedUrl(ctx, req.(*GetDownloadPreSignedUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDownloadPreSignedUrlReply)
		return ctx.Result(200, reply)
	}
}

type MinioHTTPClient interface {
	GetDownloadPreSignedUrl(ctx context.Context, req *GetDownloadPreSignedUrlRequest, opts ...http.CallOption) (rsp *GetDownloadPreSignedUrlReply, err error)
	GetUploadPreSignedUrl(ctx context.Context, req *GetUploadPreSignedUrlRequest, opts ...http.CallOption) (rsp *GetUploadPreSignedUrlReply, err error)
}

type MinioHTTPClientImpl struct {
	cc *http.Client
}

func NewMinioHTTPClient(client *http.Client) MinioHTTPClient {
	return &MinioHTTPClientImpl{client}
}

func (c *MinioHTTPClientImpl) GetDownloadPreSignedUrl(ctx context.Context, in *GetDownloadPreSignedUrlRequest, opts ...http.CallOption) (*GetDownloadPreSignedUrlReply, error) {
	var out GetDownloadPreSignedUrlReply
	pattern := "/minio/presigned/download_url"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMinioGetDownloadPreSignedUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MinioHTTPClientImpl) GetUploadPreSignedUrl(ctx context.Context, in *GetUploadPreSignedUrlRequest, opts ...http.CallOption) (*GetUploadPreSignedUrlReply, error) {
	var out GetUploadPreSignedUrlReply
	pattern := "/minio/presigned/upload_url"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMinioGetUploadPreSignedUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
