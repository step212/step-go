// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v6.30.0
// source: step/v1/step.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStepServiceAddTargetDirStep = "/step.v1.StepService/AddTargetDirStep"
const OperationStepServiceCreateTarget = "/step.v1.StepService/CreateTarget"
const OperationStepServiceDeleteTarget = "/step.v1.StepService/DeleteTarget"
const OperationStepServiceDeleteTargetStep = "/step.v1.StepService/DeleteTargetStep"
const OperationStepServiceDoneTarget = "/step.v1.StepService/DoneTarget"
const OperationStepServiceEncrypt = "/step.v1.StepService/Encrypt"
const OperationStepServiceGetTarget = "/step.v1.StepService/GetTarget"
const OperationStepServiceGetTargetDirStepChildren = "/step.v1.StepService/GetTargetDirStepChildren"
const OperationStepServiceGetTargetTree = "/step.v1.StepService/GetTargetTree"
const OperationStepServiceGetTargets = "/step.v1.StepService/GetTargets"
const OperationStepServiceUpdateTarget = "/step.v1.StepService/UpdateTarget"
const OperationStepServiceUpdateTargetStep = "/step.v1.StepService/UpdateTargetStep"

type StepServiceHTTPServer interface {
	// AddTargetDirStep 添加目标积累(for dir)
	AddTargetDirStep(context.Context, *AddTargetDirStepRequest) (*AddTargetDirStepReply, error)
	CreateTarget(context.Context, *CreateTargetRequest) (*CreateTargetReply, error)
	// DeleteTarget 删除目标下子目标以及目标下的积累
	DeleteTarget(context.Context, *DeleteTargetRequest) (*DeleteTargetReply, error)
	// DeleteTargetStep 删除积累
	DeleteTargetStep(context.Context, *DeleteTargetStepRequest) (*DeleteTargetStepReply, error)
	// DoneTarget 完成目标
	DoneTarget(context.Context, *DoneTargetRequest) (*DoneTargetReply, error)
	Encrypt(context.Context, *EncryptRequest) (*EncryptReply, error)
	// GetTarget 获取目标及目标下的积累
	GetTarget(context.Context, *GetTargetRequest) (*GetTargetReply, error)
	// GetTargetDirStepChildren 获取目录类型积累的子积累
	GetTargetDirStepChildren(context.Context, *GetTargetDirStepChildrenRequest) (*GetTargetDirStepChildrenReply, error)
	// GetTargetTree 获取目标树
	GetTargetTree(context.Context, *GetTargetTreeRequest) (*GetTargetTreeReply, error)
	// GetTargets 获取目标列表
	GetTargets(context.Context, *GetTargetsRequest) (*GetTargetsReply, error)
	UpdateTarget(context.Context, *UpdateTargetRequest) (*UpdateTargetReply, error)
	// UpdateTargetStep 修改积累
	UpdateTargetStep(context.Context, *UpdateTargetStepRequest) (*UpdateTargetStepReply, error)
}

func RegisterStepServiceHTTPServer(s *http.Server, srv StepServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/target", _StepService_CreateTarget0_HTTP_Handler(srv))
	r.PUT("/target/{id}", _StepService_UpdateTarget0_HTTP_Handler(srv))
	r.GET("/targets", _StepService_GetTargets0_HTTP_Handler(srv))
	r.DELETE("/target/{id}", _StepService_DeleteTarget0_HTTP_Handler(srv))
	r.POST("/target/{id}/done", _StepService_DoneTarget0_HTTP_Handler(srv))
	r.GET("/target/{id}", _StepService_GetTarget0_HTTP_Handler(srv))
	r.GET("/target/{id}/tree", _StepService_GetTargetTree0_HTTP_Handler(srv))
	r.POST("/target/{id}/dir", _StepService_AddTargetDirStep0_HTTP_Handler(srv))
	r.GET("/step/{id}/dir_children", _StepService_GetTargetDirStepChildren0_HTTP_Handler(srv))
	r.PUT("/step/{id}", _StepService_UpdateTargetStep0_HTTP_Handler(srv))
	r.DELETE("/step/{id}", _StepService_DeleteTargetStep0_HTTP_Handler(srv))
	r.POST("/step/{id}/encrypt", _StepService_Encrypt0_HTTP_Handler(srv))
}

func _StepService_CreateTarget0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTargetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceCreateTarget)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTarget(ctx, req.(*CreateTargetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTargetReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_UpdateTarget0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTargetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceUpdateTarget)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTarget(ctx, req.(*UpdateTargetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTargetReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_GetTargets0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTargetsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceGetTargets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTargets(ctx, req.(*GetTargetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTargetsReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_DeleteTarget0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTargetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceDeleteTarget)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTarget(ctx, req.(*DeleteTargetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTargetReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_DoneTarget0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DoneTargetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceDoneTarget)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DoneTarget(ctx, req.(*DoneTargetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DoneTargetReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_GetTarget0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTargetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceGetTarget)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTarget(ctx, req.(*GetTargetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTargetReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_GetTargetTree0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTargetTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceGetTargetTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTargetTree(ctx, req.(*GetTargetTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTargetTreeReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_AddTargetDirStep0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddTargetDirStepRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceAddTargetDirStep)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddTargetDirStep(ctx, req.(*AddTargetDirStepRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddTargetDirStepReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_GetTargetDirStepChildren0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTargetDirStepChildrenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceGetTargetDirStepChildren)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTargetDirStepChildren(ctx, req.(*GetTargetDirStepChildrenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTargetDirStepChildrenReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_UpdateTargetStep0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTargetStepRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceUpdateTargetStep)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTargetStep(ctx, req.(*UpdateTargetStepRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTargetStepReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_DeleteTargetStep0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTargetStepRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceDeleteTargetStep)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTargetStep(ctx, req.(*DeleteTargetStepRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTargetStepReply)
		return ctx.Result(200, reply)
	}
}

func _StepService_Encrypt0_HTTP_Handler(srv StepServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EncryptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepServiceEncrypt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Encrypt(ctx, req.(*EncryptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EncryptReply)
		return ctx.Result(200, reply)
	}
}

type StepServiceHTTPClient interface {
	AddTargetDirStep(ctx context.Context, req *AddTargetDirStepRequest, opts ...http.CallOption) (rsp *AddTargetDirStepReply, err error)
	CreateTarget(ctx context.Context, req *CreateTargetRequest, opts ...http.CallOption) (rsp *CreateTargetReply, err error)
	DeleteTarget(ctx context.Context, req *DeleteTargetRequest, opts ...http.CallOption) (rsp *DeleteTargetReply, err error)
	DeleteTargetStep(ctx context.Context, req *DeleteTargetStepRequest, opts ...http.CallOption) (rsp *DeleteTargetStepReply, err error)
	DoneTarget(ctx context.Context, req *DoneTargetRequest, opts ...http.CallOption) (rsp *DoneTargetReply, err error)
	Encrypt(ctx context.Context, req *EncryptRequest, opts ...http.CallOption) (rsp *EncryptReply, err error)
	GetTarget(ctx context.Context, req *GetTargetRequest, opts ...http.CallOption) (rsp *GetTargetReply, err error)
	GetTargetDirStepChildren(ctx context.Context, req *GetTargetDirStepChildrenRequest, opts ...http.CallOption) (rsp *GetTargetDirStepChildrenReply, err error)
	GetTargetTree(ctx context.Context, req *GetTargetTreeRequest, opts ...http.CallOption) (rsp *GetTargetTreeReply, err error)
	GetTargets(ctx context.Context, req *GetTargetsRequest, opts ...http.CallOption) (rsp *GetTargetsReply, err error)
	UpdateTarget(ctx context.Context, req *UpdateTargetRequest, opts ...http.CallOption) (rsp *UpdateTargetReply, err error)
	UpdateTargetStep(ctx context.Context, req *UpdateTargetStepRequest, opts ...http.CallOption) (rsp *UpdateTargetStepReply, err error)
}

type StepServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewStepServiceHTTPClient(client *http.Client) StepServiceHTTPClient {
	return &StepServiceHTTPClientImpl{client}
}

func (c *StepServiceHTTPClientImpl) AddTargetDirStep(ctx context.Context, in *AddTargetDirStepRequest, opts ...http.CallOption) (*AddTargetDirStepReply, error) {
	var out AddTargetDirStepReply
	pattern := "/target/{id}/dir"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStepServiceAddTargetDirStep))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) CreateTarget(ctx context.Context, in *CreateTargetRequest, opts ...http.CallOption) (*CreateTargetReply, error) {
	var out CreateTargetReply
	pattern := "/target"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStepServiceCreateTarget))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) DeleteTarget(ctx context.Context, in *DeleteTargetRequest, opts ...http.CallOption) (*DeleteTargetReply, error) {
	var out DeleteTargetReply
	pattern := "/target/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStepServiceDeleteTarget))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) DeleteTargetStep(ctx context.Context, in *DeleteTargetStepRequest, opts ...http.CallOption) (*DeleteTargetStepReply, error) {
	var out DeleteTargetStepReply
	pattern := "/step/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStepServiceDeleteTargetStep))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) DoneTarget(ctx context.Context, in *DoneTargetRequest, opts ...http.CallOption) (*DoneTargetReply, error) {
	var out DoneTargetReply
	pattern := "/target/{id}/done"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStepServiceDoneTarget))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) Encrypt(ctx context.Context, in *EncryptRequest, opts ...http.CallOption) (*EncryptReply, error) {
	var out EncryptReply
	pattern := "/step/{id}/encrypt"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStepServiceEncrypt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) GetTarget(ctx context.Context, in *GetTargetRequest, opts ...http.CallOption) (*GetTargetReply, error) {
	var out GetTargetReply
	pattern := "/target/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStepServiceGetTarget))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) GetTargetDirStepChildren(ctx context.Context, in *GetTargetDirStepChildrenRequest, opts ...http.CallOption) (*GetTargetDirStepChildrenReply, error) {
	var out GetTargetDirStepChildrenReply
	pattern := "/step/{id}/dir_children"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStepServiceGetTargetDirStepChildren))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) GetTargetTree(ctx context.Context, in *GetTargetTreeRequest, opts ...http.CallOption) (*GetTargetTreeReply, error) {
	var out GetTargetTreeReply
	pattern := "/target/{id}/tree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStepServiceGetTargetTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) GetTargets(ctx context.Context, in *GetTargetsRequest, opts ...http.CallOption) (*GetTargetsReply, error) {
	var out GetTargetsReply
	pattern := "/targets"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStepServiceGetTargets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) UpdateTarget(ctx context.Context, in *UpdateTargetRequest, opts ...http.CallOption) (*UpdateTargetReply, error) {
	var out UpdateTargetReply
	pattern := "/target/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStepServiceUpdateTarget))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepServiceHTTPClientImpl) UpdateTargetStep(ctx context.Context, in *UpdateTargetStepRequest, opts ...http.CallOption) (*UpdateTargetStepReply, error) {
	var out UpdateTargetStepReply
	pattern := "/step/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStepServiceUpdateTargetStep))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationPortraitServiceGetPortraitBasic = "/step.v1.PortraitService/GetPortraitBasic"
const OperationPortraitServiceGetPortraitStepRate = "/step.v1.PortraitService/GetPortraitStepRate"

type PortraitServiceHTTPServer interface {
	GetPortraitBasic(context.Context, *GetPortraitBasicRequest) (*GetPortraitBasicReply, error)
	GetPortraitStepRate(context.Context, *GetPortraitStepRateRequest) (*GetPortraitStepRateReply, error)
}

func RegisterPortraitServiceHTTPServer(s *http.Server, srv PortraitServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/portrait/basic", _PortraitService_GetPortraitBasic0_HTTP_Handler(srv))
	r.GET("/portrait/step_rate", _PortraitService_GetPortraitStepRate0_HTTP_Handler(srv))
}

func _PortraitService_GetPortraitBasic0_HTTP_Handler(srv PortraitServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPortraitBasicRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPortraitServiceGetPortraitBasic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPortraitBasic(ctx, req.(*GetPortraitBasicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPortraitBasicReply)
		return ctx.Result(200, reply)
	}
}

func _PortraitService_GetPortraitStepRate0_HTTP_Handler(srv PortraitServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPortraitStepRateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPortraitServiceGetPortraitStepRate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPortraitStepRate(ctx, req.(*GetPortraitStepRateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPortraitStepRateReply)
		return ctx.Result(200, reply)
	}
}

type PortraitServiceHTTPClient interface {
	GetPortraitBasic(ctx context.Context, req *GetPortraitBasicRequest, opts ...http.CallOption) (rsp *GetPortraitBasicReply, err error)
	GetPortraitStepRate(ctx context.Context, req *GetPortraitStepRateRequest, opts ...http.CallOption) (rsp *GetPortraitStepRateReply, err error)
}

type PortraitServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPortraitServiceHTTPClient(client *http.Client) PortraitServiceHTTPClient {
	return &PortraitServiceHTTPClientImpl{client}
}

func (c *PortraitServiceHTTPClientImpl) GetPortraitBasic(ctx context.Context, in *GetPortraitBasicRequest, opts ...http.CallOption) (*GetPortraitBasicReply, error) {
	var out GetPortraitBasicReply
	pattern := "/portrait/basic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPortraitServiceGetPortraitBasic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PortraitServiceHTTPClientImpl) GetPortraitStepRate(ctx context.Context, in *GetPortraitStepRateRequest, opts ...http.CallOption) (*GetPortraitStepRateReply, error) {
	var out GetPortraitStepRateReply
	pattern := "/portrait/step_rate"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPortraitServiceGetPortraitStepRate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationFeedbackServiceDeleteFeedbackAward = "/step.v1.FeedbackService/DeleteFeedbackAward"
const OperationFeedbackServiceGetFeedbackAward = "/step.v1.FeedbackService/GetFeedbackAward"
const OperationFeedbackServiceGetFeedbackAwards = "/step.v1.FeedbackService/GetFeedbackAwards"

type FeedbackServiceHTTPServer interface {
	DeleteFeedbackAward(context.Context, *DeleteFeedbackAwardRequest) (*DeleteFeedbackAwardReply, error)
	GetFeedbackAward(context.Context, *GetFeedbackAwardRequest) (*GetFeedbackAwardReply, error)
	GetFeedbackAwards(context.Context, *GetFeedbackAwardsRequest) (*GetFeedbackAwardsReply, error)
}

func RegisterFeedbackServiceHTTPServer(s *http.Server, srv FeedbackServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/feedback/awards", _FeedbackService_GetFeedbackAwards0_HTTP_Handler(srv))
	r.GET("/feedback/award/{id}", _FeedbackService_GetFeedbackAward0_HTTP_Handler(srv))
	r.DELETE("/feedback/award/{id}", _FeedbackService_DeleteFeedbackAward0_HTTP_Handler(srv))
}

func _FeedbackService_GetFeedbackAwards0_HTTP_Handler(srv FeedbackServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFeedbackAwardsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackServiceGetFeedbackAwards)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFeedbackAwards(ctx, req.(*GetFeedbackAwardsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFeedbackAwardsReply)
		return ctx.Result(200, reply)
	}
}

func _FeedbackService_GetFeedbackAward0_HTTP_Handler(srv FeedbackServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFeedbackAwardRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackServiceGetFeedbackAward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFeedbackAward(ctx, req.(*GetFeedbackAwardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFeedbackAwardReply)
		return ctx.Result(200, reply)
	}
}

func _FeedbackService_DeleteFeedbackAward0_HTTP_Handler(srv FeedbackServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFeedbackAwardRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackServiceDeleteFeedbackAward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFeedbackAward(ctx, req.(*DeleteFeedbackAwardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFeedbackAwardReply)
		return ctx.Result(200, reply)
	}
}

type FeedbackServiceHTTPClient interface {
	DeleteFeedbackAward(ctx context.Context, req *DeleteFeedbackAwardRequest, opts ...http.CallOption) (rsp *DeleteFeedbackAwardReply, err error)
	GetFeedbackAward(ctx context.Context, req *GetFeedbackAwardRequest, opts ...http.CallOption) (rsp *GetFeedbackAwardReply, err error)
	GetFeedbackAwards(ctx context.Context, req *GetFeedbackAwardsRequest, opts ...http.CallOption) (rsp *GetFeedbackAwardsReply, err error)
}

type FeedbackServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFeedbackServiceHTTPClient(client *http.Client) FeedbackServiceHTTPClient {
	return &FeedbackServiceHTTPClientImpl{client}
}

func (c *FeedbackServiceHTTPClientImpl) DeleteFeedbackAward(ctx context.Context, in *DeleteFeedbackAwardRequest, opts ...http.CallOption) (*DeleteFeedbackAwardReply, error) {
	var out DeleteFeedbackAwardReply
	pattern := "/feedback/award/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeedbackServiceDeleteFeedbackAward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FeedbackServiceHTTPClientImpl) GetFeedbackAward(ctx context.Context, in *GetFeedbackAwardRequest, opts ...http.CallOption) (*GetFeedbackAwardReply, error) {
	var out GetFeedbackAwardReply
	pattern := "/feedback/award/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeedbackServiceGetFeedbackAward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FeedbackServiceHTTPClientImpl) GetFeedbackAwards(ctx context.Context, in *GetFeedbackAwardsRequest, opts ...http.CallOption) (*GetFeedbackAwardsReply, error) {
	var out GetFeedbackAwardsReply
	pattern := "/feedback/awards"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeedbackServiceGetFeedbackAwards))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
