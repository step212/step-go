// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: step/v1/step.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StepService_CreateTarget_FullMethodName             = "/step.v1.StepService/CreateTarget"
	StepService_UpdateTarget_FullMethodName             = "/step.v1.StepService/UpdateTarget"
	StepService_GetTargets_FullMethodName               = "/step.v1.StepService/GetTargets"
	StepService_DeleteTarget_FullMethodName             = "/step.v1.StepService/DeleteTarget"
	StepService_DoneTarget_FullMethodName               = "/step.v1.StepService/DoneTarget"
	StepService_GetTarget_FullMethodName                = "/step.v1.StepService/GetTarget"
	StepService_GetTargetTree_FullMethodName            = "/step.v1.StepService/GetTargetTree"
	StepService_AddTargetDirStep_FullMethodName         = "/step.v1.StepService/AddTargetDirStep"
	StepService_GetTargetDirStepChildren_FullMethodName = "/step.v1.StepService/GetTargetDirStepChildren"
	StepService_UpdateTargetStep_FullMethodName         = "/step.v1.StepService/UpdateTargetStep"
	StepService_DeleteTargetStep_FullMethodName         = "/step.v1.StepService/DeleteTargetStep"
	StepService_Encrypt_FullMethodName                  = "/step.v1.StepService/Encrypt"
)

// StepServiceClient is the client API for StepService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StepServiceClient interface {
	CreateTarget(ctx context.Context, in *CreateTargetRequest, opts ...grpc.CallOption) (*CreateTargetReply, error)
	UpdateTarget(ctx context.Context, in *UpdateTargetRequest, opts ...grpc.CallOption) (*UpdateTargetReply, error)
	// 获取目标列表
	GetTargets(ctx context.Context, in *GetTargetsRequest, opts ...grpc.CallOption) (*GetTargetsReply, error)
	// 删除目标下子目标以及目标下的积累
	DeleteTarget(ctx context.Context, in *DeleteTargetRequest, opts ...grpc.CallOption) (*DeleteTargetReply, error)
	// 完成目标
	DoneTarget(ctx context.Context, in *DoneTargetRequest, opts ...grpc.CallOption) (*DoneTargetReply, error)
	// 获取目标及目标下的积累
	GetTarget(ctx context.Context, in *GetTargetRequest, opts ...grpc.CallOption) (*GetTargetReply, error)
	// 获取目标树
	GetTargetTree(ctx context.Context, in *GetTargetTreeRequest, opts ...grpc.CallOption) (*GetTargetTreeReply, error)
	// 添加目标积累(for dir)
	AddTargetDirStep(ctx context.Context, in *AddTargetDirStepRequest, opts ...grpc.CallOption) (*AddTargetDirStepReply, error)
	// 获取目录类型积累的子积累
	GetTargetDirStepChildren(ctx context.Context, in *GetTargetDirStepChildrenRequest, opts ...grpc.CallOption) (*GetTargetDirStepChildrenReply, error)
	// 修改积累
	UpdateTargetStep(ctx context.Context, in *UpdateTargetStepRequest, opts ...grpc.CallOption) (*UpdateTargetStepReply, error)
	// 删除积累
	DeleteTargetStep(ctx context.Context, in *DeleteTargetStepRequest, opts ...grpc.CallOption) (*DeleteTargetStepReply, error)
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptReply, error)
}

type stepServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStepServiceClient(cc grpc.ClientConnInterface) StepServiceClient {
	return &stepServiceClient{cc}
}

func (c *stepServiceClient) CreateTarget(ctx context.Context, in *CreateTargetRequest, opts ...grpc.CallOption) (*CreateTargetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTargetReply)
	err := c.cc.Invoke(ctx, StepService_CreateTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) UpdateTarget(ctx context.Context, in *UpdateTargetRequest, opts ...grpc.CallOption) (*UpdateTargetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTargetReply)
	err := c.cc.Invoke(ctx, StepService_UpdateTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) GetTargets(ctx context.Context, in *GetTargetsRequest, opts ...grpc.CallOption) (*GetTargetsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTargetsReply)
	err := c.cc.Invoke(ctx, StepService_GetTargets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) DeleteTarget(ctx context.Context, in *DeleteTargetRequest, opts ...grpc.CallOption) (*DeleteTargetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTargetReply)
	err := c.cc.Invoke(ctx, StepService_DeleteTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) DoneTarget(ctx context.Context, in *DoneTargetRequest, opts ...grpc.CallOption) (*DoneTargetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoneTargetReply)
	err := c.cc.Invoke(ctx, StepService_DoneTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) GetTarget(ctx context.Context, in *GetTargetRequest, opts ...grpc.CallOption) (*GetTargetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTargetReply)
	err := c.cc.Invoke(ctx, StepService_GetTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) GetTargetTree(ctx context.Context, in *GetTargetTreeRequest, opts ...grpc.CallOption) (*GetTargetTreeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTargetTreeReply)
	err := c.cc.Invoke(ctx, StepService_GetTargetTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) AddTargetDirStep(ctx context.Context, in *AddTargetDirStepRequest, opts ...grpc.CallOption) (*AddTargetDirStepReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTargetDirStepReply)
	err := c.cc.Invoke(ctx, StepService_AddTargetDirStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) GetTargetDirStepChildren(ctx context.Context, in *GetTargetDirStepChildrenRequest, opts ...grpc.CallOption) (*GetTargetDirStepChildrenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTargetDirStepChildrenReply)
	err := c.cc.Invoke(ctx, StepService_GetTargetDirStepChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) UpdateTargetStep(ctx context.Context, in *UpdateTargetStepRequest, opts ...grpc.CallOption) (*UpdateTargetStepReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTargetStepReply)
	err := c.cc.Invoke(ctx, StepService_UpdateTargetStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) DeleteTargetStep(ctx context.Context, in *DeleteTargetStepRequest, opts ...grpc.CallOption) (*DeleteTargetStepReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTargetStepReply)
	err := c.cc.Invoke(ctx, StepService_DeleteTargetStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepServiceClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptReply)
	err := c.cc.Invoke(ctx, StepService_Encrypt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StepServiceServer is the server API for StepService service.
// All implementations must embed UnimplementedStepServiceServer
// for forward compatibility.
type StepServiceServer interface {
	CreateTarget(context.Context, *CreateTargetRequest) (*CreateTargetReply, error)
	UpdateTarget(context.Context, *UpdateTargetRequest) (*UpdateTargetReply, error)
	// 获取目标列表
	GetTargets(context.Context, *GetTargetsRequest) (*GetTargetsReply, error)
	// 删除目标下子目标以及目标下的积累
	DeleteTarget(context.Context, *DeleteTargetRequest) (*DeleteTargetReply, error)
	// 完成目标
	DoneTarget(context.Context, *DoneTargetRequest) (*DoneTargetReply, error)
	// 获取目标及目标下的积累
	GetTarget(context.Context, *GetTargetRequest) (*GetTargetReply, error)
	// 获取目标树
	GetTargetTree(context.Context, *GetTargetTreeRequest) (*GetTargetTreeReply, error)
	// 添加目标积累(for dir)
	AddTargetDirStep(context.Context, *AddTargetDirStepRequest) (*AddTargetDirStepReply, error)
	// 获取目录类型积累的子积累
	GetTargetDirStepChildren(context.Context, *GetTargetDirStepChildrenRequest) (*GetTargetDirStepChildrenReply, error)
	// 修改积累
	UpdateTargetStep(context.Context, *UpdateTargetStepRequest) (*UpdateTargetStepReply, error)
	// 删除积累
	DeleteTargetStep(context.Context, *DeleteTargetStepRequest) (*DeleteTargetStepReply, error)
	Encrypt(context.Context, *EncryptRequest) (*EncryptReply, error)
	mustEmbedUnimplementedStepServiceServer()
}

// UnimplementedStepServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStepServiceServer struct{}

func (UnimplementedStepServiceServer) CreateTarget(context.Context, *CreateTargetRequest) (*CreateTargetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTarget not implemented")
}
func (UnimplementedStepServiceServer) UpdateTarget(context.Context, *UpdateTargetRequest) (*UpdateTargetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTarget not implemented")
}
func (UnimplementedStepServiceServer) GetTargets(context.Context, *GetTargetsRequest) (*GetTargetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargets not implemented")
}
func (UnimplementedStepServiceServer) DeleteTarget(context.Context, *DeleteTargetRequest) (*DeleteTargetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTarget not implemented")
}
func (UnimplementedStepServiceServer) DoneTarget(context.Context, *DoneTargetRequest) (*DoneTargetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoneTarget not implemented")
}
func (UnimplementedStepServiceServer) GetTarget(context.Context, *GetTargetRequest) (*GetTargetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTarget not implemented")
}
func (UnimplementedStepServiceServer) GetTargetTree(context.Context, *GetTargetTreeRequest) (*GetTargetTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetTree not implemented")
}
func (UnimplementedStepServiceServer) AddTargetDirStep(context.Context, *AddTargetDirStepRequest) (*AddTargetDirStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTargetDirStep not implemented")
}
func (UnimplementedStepServiceServer) GetTargetDirStepChildren(context.Context, *GetTargetDirStepChildrenRequest) (*GetTargetDirStepChildrenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetDirStepChildren not implemented")
}
func (UnimplementedStepServiceServer) UpdateTargetStep(context.Context, *UpdateTargetStepRequest) (*UpdateTargetStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetStep not implemented")
}
func (UnimplementedStepServiceServer) DeleteTargetStep(context.Context, *DeleteTargetStepRequest) (*DeleteTargetStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTargetStep not implemented")
}
func (UnimplementedStepServiceServer) Encrypt(context.Context, *EncryptRequest) (*EncryptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedStepServiceServer) mustEmbedUnimplementedStepServiceServer() {}
func (UnimplementedStepServiceServer) testEmbeddedByValue()                     {}

// UnsafeStepServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StepServiceServer will
// result in compilation errors.
type UnsafeStepServiceServer interface {
	mustEmbedUnimplementedStepServiceServer()
}

func RegisterStepServiceServer(s grpc.ServiceRegistrar, srv StepServiceServer) {
	// If the following call pancis, it indicates UnimplementedStepServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StepService_ServiceDesc, srv)
}

func _StepService_CreateTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).CreateTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_CreateTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).CreateTarget(ctx, req.(*CreateTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_UpdateTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).UpdateTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_UpdateTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).UpdateTarget(ctx, req.(*UpdateTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_GetTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).GetTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_GetTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).GetTargets(ctx, req.(*GetTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_DeleteTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).DeleteTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_DeleteTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).DeleteTarget(ctx, req.(*DeleteTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_DoneTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).DoneTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_DoneTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).DoneTarget(ctx, req.(*DoneTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_GetTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).GetTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_GetTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).GetTarget(ctx, req.(*GetTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_GetTargetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).GetTargetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_GetTargetTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).GetTargetTree(ctx, req.(*GetTargetTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_AddTargetDirStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTargetDirStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).AddTargetDirStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_AddTargetDirStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).AddTargetDirStep(ctx, req.(*AddTargetDirStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_GetTargetDirStepChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetDirStepChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).GetTargetDirStepChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_GetTargetDirStepChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).GetTargetDirStepChildren(ctx, req.(*GetTargetDirStepChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_UpdateTargetStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).UpdateTargetStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_UpdateTargetStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).UpdateTargetStep(ctx, req.(*UpdateTargetStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_DeleteTargetStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).DeleteTargetStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_DeleteTargetStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).DeleteTargetStep(ctx, req.(*DeleteTargetStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepService_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepServiceServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepService_Encrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepServiceServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StepService_ServiceDesc is the grpc.ServiceDesc for StepService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StepService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "step.v1.StepService",
	HandlerType: (*StepServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTarget",
			Handler:    _StepService_CreateTarget_Handler,
		},
		{
			MethodName: "UpdateTarget",
			Handler:    _StepService_UpdateTarget_Handler,
		},
		{
			MethodName: "GetTargets",
			Handler:    _StepService_GetTargets_Handler,
		},
		{
			MethodName: "DeleteTarget",
			Handler:    _StepService_DeleteTarget_Handler,
		},
		{
			MethodName: "DoneTarget",
			Handler:    _StepService_DoneTarget_Handler,
		},
		{
			MethodName: "GetTarget",
			Handler:    _StepService_GetTarget_Handler,
		},
		{
			MethodName: "GetTargetTree",
			Handler:    _StepService_GetTargetTree_Handler,
		},
		{
			MethodName: "AddTargetDirStep",
			Handler:    _StepService_AddTargetDirStep_Handler,
		},
		{
			MethodName: "GetTargetDirStepChildren",
			Handler:    _StepService_GetTargetDirStepChildren_Handler,
		},
		{
			MethodName: "UpdateTargetStep",
			Handler:    _StepService_UpdateTargetStep_Handler,
		},
		{
			MethodName: "DeleteTargetStep",
			Handler:    _StepService_DeleteTargetStep_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _StepService_Encrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "step/v1/step.proto",
}

const (
	PortraitService_GetPortraitBasic_FullMethodName    = "/step.v1.PortraitService/GetPortraitBasic"
	PortraitService_GetPortraitStepRate_FullMethodName = "/step.v1.PortraitService/GetPortraitStepRate"
)

// PortraitServiceClient is the client API for PortraitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortraitServiceClient interface {
	GetPortraitBasic(ctx context.Context, in *GetPortraitBasicRequest, opts ...grpc.CallOption) (*GetPortraitBasicReply, error)
	GetPortraitStepRate(ctx context.Context, in *GetPortraitStepRateRequest, opts ...grpc.CallOption) (*GetPortraitStepRateReply, error)
}

type portraitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortraitServiceClient(cc grpc.ClientConnInterface) PortraitServiceClient {
	return &portraitServiceClient{cc}
}

func (c *portraitServiceClient) GetPortraitBasic(ctx context.Context, in *GetPortraitBasicRequest, opts ...grpc.CallOption) (*GetPortraitBasicReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortraitBasicReply)
	err := c.cc.Invoke(ctx, PortraitService_GetPortraitBasic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portraitServiceClient) GetPortraitStepRate(ctx context.Context, in *GetPortraitStepRateRequest, opts ...grpc.CallOption) (*GetPortraitStepRateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortraitStepRateReply)
	err := c.cc.Invoke(ctx, PortraitService_GetPortraitStepRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortraitServiceServer is the server API for PortraitService service.
// All implementations must embed UnimplementedPortraitServiceServer
// for forward compatibility.
type PortraitServiceServer interface {
	GetPortraitBasic(context.Context, *GetPortraitBasicRequest) (*GetPortraitBasicReply, error)
	GetPortraitStepRate(context.Context, *GetPortraitStepRateRequest) (*GetPortraitStepRateReply, error)
	mustEmbedUnimplementedPortraitServiceServer()
}

// UnimplementedPortraitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortraitServiceServer struct{}

func (UnimplementedPortraitServiceServer) GetPortraitBasic(context.Context, *GetPortraitBasicRequest) (*GetPortraitBasicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortraitBasic not implemented")
}
func (UnimplementedPortraitServiceServer) GetPortraitStepRate(context.Context, *GetPortraitStepRateRequest) (*GetPortraitStepRateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortraitStepRate not implemented")
}
func (UnimplementedPortraitServiceServer) mustEmbedUnimplementedPortraitServiceServer() {}
func (UnimplementedPortraitServiceServer) testEmbeddedByValue()                         {}

// UnsafePortraitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortraitServiceServer will
// result in compilation errors.
type UnsafePortraitServiceServer interface {
	mustEmbedUnimplementedPortraitServiceServer()
}

func RegisterPortraitServiceServer(s grpc.ServiceRegistrar, srv PortraitServiceServer) {
	// If the following call pancis, it indicates UnimplementedPortraitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PortraitService_ServiceDesc, srv)
}

func _PortraitService_GetPortraitBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortraitBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortraitServiceServer).GetPortraitBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortraitService_GetPortraitBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortraitServiceServer).GetPortraitBasic(ctx, req.(*GetPortraitBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortraitService_GetPortraitStepRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortraitStepRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortraitServiceServer).GetPortraitStepRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortraitService_GetPortraitStepRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortraitServiceServer).GetPortraitStepRate(ctx, req.(*GetPortraitStepRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortraitService_ServiceDesc is the grpc.ServiceDesc for PortraitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortraitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "step.v1.PortraitService",
	HandlerType: (*PortraitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPortraitBasic",
			Handler:    _PortraitService_GetPortraitBasic_Handler,
		},
		{
			MethodName: "GetPortraitStepRate",
			Handler:    _PortraitService_GetPortraitStepRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "step/v1/step.proto",
}

const (
	FeedbackService_GetFeedbackAwards_FullMethodName   = "/step.v1.FeedbackService/GetFeedbackAwards"
	FeedbackService_GetFeedbackAward_FullMethodName    = "/step.v1.FeedbackService/GetFeedbackAward"
	FeedbackService_DeleteFeedbackAward_FullMethodName = "/step.v1.FeedbackService/DeleteFeedbackAward"
)

// FeedbackServiceClient is the client API for FeedbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbackServiceClient interface {
	GetFeedbackAwards(ctx context.Context, in *GetFeedbackAwardsRequest, opts ...grpc.CallOption) (*GetFeedbackAwardsReply, error)
	GetFeedbackAward(ctx context.Context, in *GetFeedbackAwardRequest, opts ...grpc.CallOption) (*GetFeedbackAwardReply, error)
	DeleteFeedbackAward(ctx context.Context, in *DeleteFeedbackAwardRequest, opts ...grpc.CallOption) (*DeleteFeedbackAwardReply, error)
}

type feedbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackServiceClient(cc grpc.ClientConnInterface) FeedbackServiceClient {
	return &feedbackServiceClient{cc}
}

func (c *feedbackServiceClient) GetFeedbackAwards(ctx context.Context, in *GetFeedbackAwardsRequest, opts ...grpc.CallOption) (*GetFeedbackAwardsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedbackAwardsReply)
	err := c.cc.Invoke(ctx, FeedbackService_GetFeedbackAwards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) GetFeedbackAward(ctx context.Context, in *GetFeedbackAwardRequest, opts ...grpc.CallOption) (*GetFeedbackAwardReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedbackAwardReply)
	err := c.cc.Invoke(ctx, FeedbackService_GetFeedbackAward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) DeleteFeedbackAward(ctx context.Context, in *DeleteFeedbackAwardRequest, opts ...grpc.CallOption) (*DeleteFeedbackAwardReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFeedbackAwardReply)
	err := c.cc.Invoke(ctx, FeedbackService_DeleteFeedbackAward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackServiceServer is the server API for FeedbackService service.
// All implementations must embed UnimplementedFeedbackServiceServer
// for forward compatibility.
type FeedbackServiceServer interface {
	GetFeedbackAwards(context.Context, *GetFeedbackAwardsRequest) (*GetFeedbackAwardsReply, error)
	GetFeedbackAward(context.Context, *GetFeedbackAwardRequest) (*GetFeedbackAwardReply, error)
	DeleteFeedbackAward(context.Context, *DeleteFeedbackAwardRequest) (*DeleteFeedbackAwardReply, error)
	mustEmbedUnimplementedFeedbackServiceServer()
}

// UnimplementedFeedbackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedbackServiceServer struct{}

func (UnimplementedFeedbackServiceServer) GetFeedbackAwards(context.Context, *GetFeedbackAwardsRequest) (*GetFeedbackAwardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbackAwards not implemented")
}
func (UnimplementedFeedbackServiceServer) GetFeedbackAward(context.Context, *GetFeedbackAwardRequest) (*GetFeedbackAwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbackAward not implemented")
}
func (UnimplementedFeedbackServiceServer) DeleteFeedbackAward(context.Context, *DeleteFeedbackAwardRequest) (*DeleteFeedbackAwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedbackAward not implemented")
}
func (UnimplementedFeedbackServiceServer) mustEmbedUnimplementedFeedbackServiceServer() {}
func (UnimplementedFeedbackServiceServer) testEmbeddedByValue()                         {}

// UnsafeFeedbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbackServiceServer will
// result in compilation errors.
type UnsafeFeedbackServiceServer interface {
	mustEmbedUnimplementedFeedbackServiceServer()
}

func RegisterFeedbackServiceServer(s grpc.ServiceRegistrar, srv FeedbackServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeedbackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedbackService_ServiceDesc, srv)
}

func _FeedbackService_GetFeedbackAwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackAwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GetFeedbackAwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackService_GetFeedbackAwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GetFeedbackAwards(ctx, req.(*GetFeedbackAwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_GetFeedbackAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GetFeedbackAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackService_GetFeedbackAward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GetFeedbackAward(ctx, req.(*GetFeedbackAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_DeleteFeedbackAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedbackAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).DeleteFeedbackAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackService_DeleteFeedbackAward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).DeleteFeedbackAward(ctx, req.(*DeleteFeedbackAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbackService_ServiceDesc is the grpc.ServiceDesc for FeedbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "step.v1.FeedbackService",
	HandlerType: (*FeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeedbackAwards",
			Handler:    _FeedbackService_GetFeedbackAwards_Handler,
		},
		{
			MethodName: "GetFeedbackAward",
			Handler:    _FeedbackService_GetFeedbackAward_Handler,
		},
		{
			MethodName: "DeleteFeedbackAward",
			Handler:    _FeedbackService_DeleteFeedbackAward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "step/v1/step.proto",
}
