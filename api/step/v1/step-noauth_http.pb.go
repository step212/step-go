// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v6.30.0
// source: step/v1/step-noauth.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStepNoauthServiceDecrypt = "/step.v1.StepNoauthService/Decrypt"
const OperationStepNoauthServiceGetNoauthStep = "/step.v1.StepNoauthService/GetNoauthStep"
const OperationStepNoauthServiceSetCommentForStep = "/step.v1.StepNoauthService/SetCommentForStep"

type StepNoauthServiceHTTPServer interface {
	Decrypt(context.Context, *DecryptRequest) (*DecryptReply, error)
	GetNoauthStep(context.Context, *GetNoauthStepRequest) (*GetNoauthStepReply, error)
	SetCommentForStep(context.Context, *SetCommentForStepRequest) (*SetCommentForStepReply, error)
}

func RegisterStepNoauthServiceHTTPServer(s *http.Server, srv StepNoauthServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/apis/step-go-noauth/step/{id}", _StepNoauthService_GetNoauthStep0_HTTP_Handler(srv))
	r.POST("/apis/step-go-noauth/step/{id}/comment", _StepNoauthService_SetCommentForStep0_HTTP_Handler(srv))
	r.POST("/apis/step-go-noauth/step/{id}/decrypt", _StepNoauthService_Decrypt0_HTTP_Handler(srv))
}

func _StepNoauthService_GetNoauthStep0_HTTP_Handler(srv StepNoauthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoauthStepRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepNoauthServiceGetNoauthStep)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNoauthStep(ctx, req.(*GetNoauthStepRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNoauthStepReply)
		return ctx.Result(200, reply)
	}
}

func _StepNoauthService_SetCommentForStep0_HTTP_Handler(srv StepNoauthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetCommentForStepRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepNoauthServiceSetCommentForStep)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetCommentForStep(ctx, req.(*SetCommentForStepRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetCommentForStepReply)
		return ctx.Result(200, reply)
	}
}

func _StepNoauthService_Decrypt0_HTTP_Handler(srv StepNoauthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DecryptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStepNoauthServiceDecrypt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Decrypt(ctx, req.(*DecryptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DecryptReply)
		return ctx.Result(200, reply)
	}
}

type StepNoauthServiceHTTPClient interface {
	Decrypt(ctx context.Context, req *DecryptRequest, opts ...http.CallOption) (rsp *DecryptReply, err error)
	GetNoauthStep(ctx context.Context, req *GetNoauthStepRequest, opts ...http.CallOption) (rsp *GetNoauthStepReply, err error)
	SetCommentForStep(ctx context.Context, req *SetCommentForStepRequest, opts ...http.CallOption) (rsp *SetCommentForStepReply, err error)
}

type StepNoauthServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewStepNoauthServiceHTTPClient(client *http.Client) StepNoauthServiceHTTPClient {
	return &StepNoauthServiceHTTPClientImpl{client}
}

func (c *StepNoauthServiceHTTPClientImpl) Decrypt(ctx context.Context, in *DecryptRequest, opts ...http.CallOption) (*DecryptReply, error) {
	var out DecryptReply
	pattern := "/apis/step-go-noauth/step/{id}/decrypt"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStepNoauthServiceDecrypt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepNoauthServiceHTTPClientImpl) GetNoauthStep(ctx context.Context, in *GetNoauthStepRequest, opts ...http.CallOption) (*GetNoauthStepReply, error) {
	var out GetNoauthStepReply
	pattern := "/apis/step-go-noauth/step/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStepNoauthServiceGetNoauthStep))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StepNoauthServiceHTTPClientImpl) SetCommentForStep(ctx context.Context, in *SetCommentForStepRequest, opts ...http.CallOption) (*SetCommentForStepReply, error) {
	var out SetCommentForStepReply
	pattern := "/apis/step-go-noauth/step/{id}/comment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStepNoauthServiceSetCommentForStep))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
