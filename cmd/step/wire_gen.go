// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"step/internal/biz"
	"step/internal/conf"
	"step/internal/data"
	"step/internal/server"
	"step/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	driver := data.NewDriver(confData)
	client := data.NewEntClient(driver, logger)
	dataData, cleanup, err := data.NewData(confData, logger, client)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	minioRepo := data.NewMinioRepo(dataData, logger)
	stepRepo := data.NewStepRepo(dataData, logger, minioRepo)
	encryptRepo := data.NewEncryptRepo(dataData, logger)
	asynqEnqueueRepo := data.NewAsynqEnqueueRepo(dataData, logger)
	stepUsecase := biz.NewStepUsecase(stepRepo, minioRepo, encryptRepo, asynqEnqueueRepo, client, logger)
	stepService := service.NewStepService(stepUsecase)
	minioUsecase := biz.NewMinioUsecase(minioRepo, logger)
	minioService := service.NewMinioService(minioUsecase)
	stepNoauthRepo := data.NewStepNoauthRepo(dataData, logger, minioRepo, encryptRepo)
	stepNoauthUsecase := biz.NewStepNoauthUsecase(stepNoauthRepo, encryptRepo, asynqEnqueueRepo, logger)
	stepNoauthService := service.NewStepNoauthService(stepNoauthUsecase)
	portraitUsecase := biz.NewPortraitUsecase(stepRepo, client, logger)
	portraitService := service.NewPortraitService(portraitUsecase)
	feedbackUsecase := biz.NewFeedbackUsecase(stepRepo, minioRepo, client, confData, logger)
	feedbackService := service.NewFeedbackService(feedbackUsecase)
	grpcServer := server.NewGRPCServer(confServer, greeterService, stepService, minioService, stepNoauthService, portraitService, feedbackService, logger)
	httpServer := server.NewHTTPServer(confData, confServer, greeterService, stepService, minioService, stepNoauthService, portraitService, feedbackService, logger)
	statisticsRepo := data.NewStatisticsRepo(dataData, logger, stepRepo)
	asynqStatisticsUsecase := biz.NewAsynqStatisticsUsecase(logger, statisticsRepo, asynqEnqueueRepo)
	asynqFeedbackUsecase := biz.NewAsynqFeedbackUsecase(logger, client)
	asynqServer := server.NewAsynqServer(confData, logger, asynqStatisticsUsecase, asynqFeedbackUsecase)
	app := newApp(logger, grpcServer, httpServer, asynqServer)
	return app, func() {
		cleanup()
	}, nil
}
