// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"step/internal/data/ent/show"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Show is the model entity for the Show schema.
type Show struct {
	config `json:"-"`
	// ID of the ent.
	// 自增ID
	ID uint64 `json:"id,omitempty"`
	// Type
	Type string `json:"type,omitempty"`
	// Poster
	Poster string `json:"poster,omitempty"`
	// Markdown Content
	Content string `json:"content,omitempty"`
	// Media Files
	MediaFiles []string `json:"media_files,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShowQuery when eager-loading is set.
	Edges        ShowEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShowEdges holds the relations/edges for other nodes in the graph.
type ShowEdges struct {
	// ShowReserves holds the value of the show_reserves edge.
	ShowReserves []*ShowReserve `json:"show_reserves,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ShowReservesOrErr returns the ShowReserves value or an error if the edge
// was not loaded in eager-loading.
func (e ShowEdges) ShowReservesOrErr() ([]*ShowReserve, error) {
	if e.loadedTypes[0] {
		return e.ShowReserves, nil
	}
	return nil, &NotLoadedError{edge: "show_reserves"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Show) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case show.FieldMediaFiles:
			values[i] = new([]byte)
		case show.FieldID, show.FieldCreatedAt:
			values[i] = new(sql.NullInt64)
		case show.FieldType, show.FieldPoster, show.FieldContent:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Show fields.
func (s *Show) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case show.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case show.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = value.String
			}
		case show.FieldPoster:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field poster", values[i])
			} else if value.Valid {
				s.Poster = value.String
			}
		case show.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				s.Content = value.String
			}
		case show.FieldMediaFiles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_files", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.MediaFiles); err != nil {
					return fmt.Errorf("unmarshal field media_files: %w", err)
				}
			}
		case show.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Int64
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Show.
// This includes values selected through modifiers, order, etc.
func (s *Show) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryShowReserves queries the "show_reserves" edge of the Show entity.
func (s *Show) QueryShowReserves() *ShowReserveQuery {
	return NewShowClient(s.config).QueryShowReserves(s)
}

// Update returns a builder for updating this Show.
// Note that you need to call Show.Unwrap() before calling this method if this Show
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Show) Update() *ShowUpdateOne {
	return NewShowClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Show entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Show) Unwrap() *Show {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Show is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Show) String() string {
	var builder strings.Builder
	builder.WriteString("Show(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("type=")
	builder.WriteString(s.Type)
	builder.WriteString(", ")
	builder.WriteString("poster=")
	builder.WriteString(s.Poster)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(s.Content)
	builder.WriteString(", ")
	builder.WriteString("media_files=")
	builder.WriteString(fmt.Sprintf("%v", s.MediaFiles))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Shows is a parsable slice of Show.
type Shows []*Show
