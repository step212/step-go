// Code generated by ent, DO NOT EDIT.

package showreserve

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the showreserve type in the database.
	Label = "show_reserve"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldMemories holds the string denoting the memories field in the database.
	FieldMemories = "memories"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldRefShowID holds the string denoting the ref_show_id field in the database.
	FieldRefShowID = "ref_show_id"
	// EdgeShow holds the string denoting the show edge name in mutations.
	EdgeShow = "show"
	// Table holds the table name of the showreserve in the database.
	Table = "show_reserves"
	// ShowTable is the table that holds the show relation/edge.
	ShowTable = "show_reserves"
	// ShowInverseTable is the table name for the Show entity.
	// It exists in this package in order to avoid circular dependency with the "show" package.
	ShowInverseTable = "shows"
	// ShowColumn is the table column denoting the show relation/edge.
	ShowColumn = "ref_show_id"
)

// Columns holds all SQL columns for showreserve fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldStatus,
	FieldMemories,
	FieldCreatedAt,
	FieldRefShowID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt int64
)

// Status defines the type for the "status" enum field.
type Status string

// StatusRecommend is the default value of the Status enum.
const DefaultStatus = StatusRecommend

// Status values.
const (
	StatusRecommend Status = "recommend"
	StatusReserved  Status = "reserved"
	StatusCompleted Status = "completed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusRecommend, StatusReserved, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("showreserve: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ShowReserve queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRefShowID orders the results by the ref_show_id field.
func ByRefShowID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefShowID, opts...).ToFunc()
}

// ByShowField orders the results by show field.
func ByShowField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShowStep(), sql.OrderByField(field, opts...))
	}
}
func newShowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ShowTable, ShowColumn),
	)
}
