// Code generated by ent, DO NOT EDIT.

package showreserve

import (
	"step/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEQ(FieldCreatedAt, v))
}

// RefShowID applies equality check predicate on the "ref_show_id" field. It's identical to RefShowIDEQ.
func RefShowID(v uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEQ(FieldRefShowID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldContainsFold(FieldUserID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNotIn(FieldStatus, vs...))
}

// MemoriesIsNil applies the IsNil predicate on the "memories" field.
func MemoriesIsNil() predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldIsNull(FieldMemories))
}

// MemoriesNotNil applies the NotNil predicate on the "memories" field.
func MemoriesNotNil() predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNotNull(FieldMemories))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldLTE(FieldCreatedAt, v))
}

// RefShowIDEQ applies the EQ predicate on the "ref_show_id" field.
func RefShowIDEQ(v uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldEQ(FieldRefShowID, v))
}

// RefShowIDNEQ applies the NEQ predicate on the "ref_show_id" field.
func RefShowIDNEQ(v uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNEQ(FieldRefShowID, v))
}

// RefShowIDIn applies the In predicate on the "ref_show_id" field.
func RefShowIDIn(vs ...uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldIn(FieldRefShowID, vs...))
}

// RefShowIDNotIn applies the NotIn predicate on the "ref_show_id" field.
func RefShowIDNotIn(vs ...uint64) predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNotIn(FieldRefShowID, vs...))
}

// RefShowIDIsNil applies the IsNil predicate on the "ref_show_id" field.
func RefShowIDIsNil() predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldIsNull(FieldRefShowID))
}

// RefShowIDNotNil applies the NotNil predicate on the "ref_show_id" field.
func RefShowIDNotNil() predicate.ShowReserve {
	return predicate.ShowReserve(sql.FieldNotNull(FieldRefShowID))
}

// HasShow applies the HasEdge predicate on the "show" edge.
func HasShow() predicate.ShowReserve {
	return predicate.ShowReserve(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShowTable, ShowColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShowWith applies the HasEdge predicate on the "show" edge with a given conditions (other predicates).
func HasShowWith(preds ...predicate.Show) predicate.ShowReserve {
	return predicate.ShowReserve(func(s *sql.Selector) {
		step := newShowStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShowReserve) predicate.ShowReserve {
	return predicate.ShowReserve(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShowReserve) predicate.ShowReserve {
	return predicate.ShowReserve(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShowReserve) predicate.ShowReserve {
	return predicate.ShowReserve(sql.NotPredicates(p))
}
