// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/step"
	"step/internal/data/ent/target"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TargetCreate is the builder for creating a Target entity.
type TargetCreate struct {
	config
	mutation *TargetMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (tc *TargetCreate) SetUserID(s string) *TargetCreate {
	tc.mutation.SetUserID(s)
	return tc
}

// SetTitle sets the "title" field.
func (tc *TargetCreate) SetTitle(s string) *TargetCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TargetCreate) SetDescription(s string) *TargetCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetType sets the "type" field.
func (tc *TargetCreate) SetType(s string) *TargetCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TargetCreate) SetNillableType(s *string) *TargetCreate {
	if s != nil {
		tc.SetType(*s)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TargetCreate) SetCreatedAt(i int64) *TargetCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TargetCreate) SetNillableCreatedAt(i *int64) *TargetCreate {
	if i != nil {
		tc.SetCreatedAt(*i)
	}
	return tc
}

// SetStartAt sets the "start_at" field.
func (tc *TargetCreate) SetStartAt(i int64) *TargetCreate {
	tc.mutation.SetStartAt(i)
	return tc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tc *TargetCreate) SetNillableStartAt(i *int64) *TargetCreate {
	if i != nil {
		tc.SetStartAt(*i)
	}
	return tc
}

// SetChallengeAt sets the "challenge_at" field.
func (tc *TargetCreate) SetChallengeAt(i int64) *TargetCreate {
	tc.mutation.SetChallengeAt(i)
	return tc
}

// SetNillableChallengeAt sets the "challenge_at" field if the given value is not nil.
func (tc *TargetCreate) SetNillableChallengeAt(i *int64) *TargetCreate {
	if i != nil {
		tc.SetChallengeAt(*i)
	}
	return tc
}

// SetDoneAt sets the "done_at" field.
func (tc *TargetCreate) SetDoneAt(i int64) *TargetCreate {
	tc.mutation.SetDoneAt(i)
	return tc
}

// SetNillableDoneAt sets the "done_at" field if the given value is not nil.
func (tc *TargetCreate) SetNillableDoneAt(i *int64) *TargetCreate {
	if i != nil {
		tc.SetDoneAt(*i)
	}
	return tc
}

// SetLayer sets the "layer" field.
func (tc *TargetCreate) SetLayer(u uint32) *TargetCreate {
	tc.mutation.SetLayer(u)
	return tc
}

// SetNillableLayer sets the "layer" field if the given value is not nil.
func (tc *TargetCreate) SetNillableLayer(u *uint32) *TargetCreate {
	if u != nil {
		tc.SetLayer(*u)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TargetCreate) SetStatus(t target.Status) *TargetCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TargetCreate) SetNillableStatus(t *target.Status) *TargetCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetParentID sets the "parent_id" field.
func (tc *TargetCreate) SetParentID(u uint64) *TargetCreate {
	tc.mutation.SetParentID(u)
	return tc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tc *TargetCreate) SetNillableParentID(u *uint64) *TargetCreate {
	if u != nil {
		tc.SetParentID(*u)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TargetCreate) SetID(u uint64) *TargetCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetParent sets the "parent" edge to the Target entity.
func (tc *TargetCreate) SetParent(t *Target) *TargetCreate {
	return tc.SetParentID(t.ID)
}

// AddChildIDs adds the "children" edge to the Target entity by IDs.
func (tc *TargetCreate) AddChildIDs(ids ...uint64) *TargetCreate {
	tc.mutation.AddChildIDs(ids...)
	return tc
}

// AddChildren adds the "children" edges to the Target entity.
func (tc *TargetCreate) AddChildren(t ...*Target) *TargetCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddChildIDs(ids...)
}

// AddStepIDs adds the "steps" edge to the Step entity by IDs.
func (tc *TargetCreate) AddStepIDs(ids ...uint64) *TargetCreate {
	tc.mutation.AddStepIDs(ids...)
	return tc
}

// AddSteps adds the "steps" edges to the Step entity.
func (tc *TargetCreate) AddSteps(s ...*Step) *TargetCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddStepIDs(ids...)
}

// Mutation returns the TargetMutation object of the builder.
func (tc *TargetCreate) Mutation() *TargetMutation {
	return tc.mutation
}

// Save creates the Target in the database.
func (tc *TargetCreate) Save(ctx context.Context) (*Target, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TargetCreate) SaveX(ctx context.Context) *Target {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TargetCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TargetCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TargetCreate) defaults() {
	if _, ok := tc.mutation.GetType(); !ok {
		v := target.DefaultType
		tc.mutation.SetType(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := target.DefaultCreatedAt
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.Layer(); !ok {
		v := target.DefaultLayer
		tc.mutation.SetLayer(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := target.DefaultStatus
		tc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TargetCreate) check() error {
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Target.user_id"`)}
	}
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Target.title"`)}
	}
	if v, ok := tc.mutation.Title(); ok {
		if err := target.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Target.title": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Target.description"`)}
	}
	if v, ok := tc.mutation.Description(); ok {
		if err := target.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Target.description": %w`, err)}
		}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Target.type"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Target.created_at"`)}
	}
	if _, ok := tc.mutation.Layer(); !ok {
		return &ValidationError{Name: "layer", err: errors.New(`ent: missing required field "Target.layer"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Target.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := target.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Target.status": %w`, err)}
		}
	}
	return nil
}

func (tc *TargetCreate) sqlSave(ctx context.Context) (*Target, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TargetCreate) createSpec() (*Target, *sqlgraph.CreateSpec) {
	var (
		_node = &Target{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(target.Table, sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.UserID(); ok {
		_spec.SetField(target.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(target.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(target.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(target.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(target.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.StartAt(); ok {
		_spec.SetField(target.FieldStartAt, field.TypeInt64, value)
		_node.StartAt = value
	}
	if value, ok := tc.mutation.ChallengeAt(); ok {
		_spec.SetField(target.FieldChallengeAt, field.TypeInt64, value)
		_node.ChallengeAt = value
	}
	if value, ok := tc.mutation.DoneAt(); ok {
		_spec.SetField(target.FieldDoneAt, field.TypeInt64, value)
		_node.DoneAt = value
	}
	if value, ok := tc.mutation.Layer(); ok {
		_spec.SetField(target.FieldLayer, field.TypeUint32, value)
		_node.Layer = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(target.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := tc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.ParentTable,
			Columns: []string{target.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.ChildrenTable,
			Columns: []string{target.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.StepsTable,
			Columns: []string{target.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TargetCreateBulk is the builder for creating many Target entities in bulk.
type TargetCreateBulk struct {
	config
	err      error
	builders []*TargetCreate
}

// Save creates the Target entities in the database.
func (tcb *TargetCreateBulk) Save(ctx context.Context) ([]*Target, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Target, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TargetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TargetCreateBulk) SaveX(ctx context.Context) []*Target {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TargetCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TargetCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
