// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"step/internal/data/ent/award"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Award is the model entity for the Award schema.
type Award struct {
	config `json:"-"`
	// ID of the ent.
	// 自增ID
	ID uint64 `json:"id,omitempty"`
	// User ID
	UserID string `json:"user_id,omitempty"`
	// Status
	Status award.Status `json:"status,omitempty"`
	// Description
	Description string `json:"description,omitempty"`
	// Setted Files
	SettedFiles []string `json:"setted_files,omitempty"`
	// Realized Files
	RealizedFiles []string `json:"realized_files,omitempty"`
	// 设定的目标类型, 自身画像或者目标
	TargetType award.TargetType `json:"target_type,omitempty"`
	// Scope, top dimension for portrait type/top_target_id for target type
	Scope string `json:"scope,omitempty"`
	// 维度
	Dimension string `json:"dimension,omitempty"`
	// 阈值
	Threshold int32 `json:"threshold,omitempty"`
	// Setted At
	SettedAt int64 `json:"setted_at,omitempty"`
	// Achieved At
	AchievedAt int64 `json:"achieved_at,omitempty"`
	// Realized At
	RealizedAt   int64 `json:"realized_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Award) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case award.FieldSettedFiles, award.FieldRealizedFiles:
			values[i] = new([]byte)
		case award.FieldID, award.FieldThreshold, award.FieldSettedAt, award.FieldAchievedAt, award.FieldRealizedAt:
			values[i] = new(sql.NullInt64)
		case award.FieldUserID, award.FieldStatus, award.FieldDescription, award.FieldTargetType, award.FieldScope, award.FieldDimension:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Award fields.
func (a *Award) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case award.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case award.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = value.String
			}
		case award.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = award.Status(value.String)
			}
		case award.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case award.FieldSettedFiles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field setted_files", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.SettedFiles); err != nil {
					return fmt.Errorf("unmarshal field setted_files: %w", err)
				}
			}
		case award.FieldRealizedFiles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field realized_files", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.RealizedFiles); err != nil {
					return fmt.Errorf("unmarshal field realized_files: %w", err)
				}
			}
		case award.FieldTargetType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_type", values[i])
			} else if value.Valid {
				a.TargetType = award.TargetType(value.String)
			}
		case award.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				a.Scope = value.String
			}
		case award.FieldDimension:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dimension", values[i])
			} else if value.Valid {
				a.Dimension = value.String
			}
		case award.FieldThreshold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field threshold", values[i])
			} else if value.Valid {
				a.Threshold = int32(value.Int64)
			}
		case award.FieldSettedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field setted_at", values[i])
			} else if value.Valid {
				a.SettedAt = value.Int64
			}
		case award.FieldAchievedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field achieved_at", values[i])
			} else if value.Valid {
				a.AchievedAt = value.Int64
			}
		case award.FieldRealizedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field realized_at", values[i])
			} else if value.Valid {
				a.RealizedAt = value.Int64
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Award.
// This includes values selected through modifiers, order, etc.
func (a *Award) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Award.
// Note that you need to call Award.Unwrap() before calling this method if this Award
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Award) Update() *AwardUpdateOne {
	return NewAwardClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Award entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Award) Unwrap() *Award {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Award is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Award) String() string {
	var builder strings.Builder
	builder.WriteString("Award(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("user_id=")
	builder.WriteString(a.UserID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("setted_files=")
	builder.WriteString(fmt.Sprintf("%v", a.SettedFiles))
	builder.WriteString(", ")
	builder.WriteString("realized_files=")
	builder.WriteString(fmt.Sprintf("%v", a.RealizedFiles))
	builder.WriteString(", ")
	builder.WriteString("target_type=")
	builder.WriteString(fmt.Sprintf("%v", a.TargetType))
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(a.Scope)
	builder.WriteString(", ")
	builder.WriteString("dimension=")
	builder.WriteString(a.Dimension)
	builder.WriteString(", ")
	builder.WriteString("threshold=")
	builder.WriteString(fmt.Sprintf("%v", a.Threshold))
	builder.WriteString(", ")
	builder.WriteString("setted_at=")
	builder.WriteString(fmt.Sprintf("%v", a.SettedAt))
	builder.WriteString(", ")
	builder.WriteString("achieved_at=")
	builder.WriteString(fmt.Sprintf("%v", a.AchievedAt))
	builder.WriteString(", ")
	builder.WriteString("realized_at=")
	builder.WriteString(fmt.Sprintf("%v", a.RealizedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Awards is a parsable slice of Award.
type Awards []*Award
