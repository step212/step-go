// Code generated by ent, DO NOT EDIT.

package step

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the step type in the database.
	Label = "step"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsChallenge holds the string denoting the is_challenge field in the database.
	FieldIsChallenge = "is_challenge"
	// FieldTeacherComment holds the string denoting the teacher_comment field in the database.
	FieldTeacherComment = "teacher_comment"
	// FieldParentComment holds the string denoting the parent_comment field in the database.
	FieldParentComment = "parent_comment"
	// FieldFriendComment holds the string denoting the friend_comment field in the database.
	FieldFriendComment = "friend_comment"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldObjectName holds the string denoting the object_name field in the database.
	FieldObjectName = "object_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldRefTargetID holds the string denoting the ref_target_id field in the database.
	FieldRefTargetID = "ref_target_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// EdgeTarget holds the string denoting the target edge name in mutations.
	EdgeTarget = "target"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// Table holds the table name of the step in the database.
	Table = "steps"
	// TargetTable is the table that holds the target relation/edge.
	TargetTable = "steps"
	// TargetInverseTable is the table name for the Target entity.
	// It exists in this package in order to avoid circular dependency with the "target" package.
	TargetInverseTable = "targets"
	// TargetColumn is the table column denoting the target relation/edge.
	TargetColumn = "ref_target_id"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "steps"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "steps"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
)

// Columns holds all SQL columns for step fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldIsChallenge,
	FieldTeacherComment,
	FieldParentComment,
	FieldFriendComment,
	FieldType,
	FieldObjectName,
	FieldCreatedAt,
	FieldRefTargetID,
	FieldParentID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultIsChallenge holds the default value on creation for the "is_challenge" field.
	DefaultIsChallenge bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt int64
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeImage Type = "image"
	TypeVideo Type = "video"
	TypeAudio Type = "audio"
	TypeDir   Type = "dir"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeImage, TypeVideo, TypeAudio, TypeDir:
		return nil
	default:
		return fmt.Errorf("step: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Step queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsChallenge orders the results by the is_challenge field.
func ByIsChallenge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsChallenge, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByObjectName orders the results by the object_name field.
func ByObjectName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldObjectName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRefTargetID orders the results by the ref_target_id field.
func ByRefTargetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefTargetID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByTargetField orders the results by target field.
func ByTargetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTargetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TargetTable, TargetColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
