// Code generated by ent, DO NOT EDIT.

package step

import (
	"step/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Step {
	return predicate.Step(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Step {
	return predicate.Step(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Step {
	return predicate.Step(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Step {
	return predicate.Step(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Step {
	return predicate.Step(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Step {
	return predicate.Step(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Step {
	return predicate.Step(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldDescription, v))
}

// IsChallenge applies equality check predicate on the "is_challenge" field. It's identical to IsChallengeEQ.
func IsChallenge(v bool) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldIsChallenge, v))
}

// ObjectName applies equality check predicate on the "object_name" field. It's identical to ObjectNameEQ.
func ObjectName(v string) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldObjectName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldCreatedAt, v))
}

// RefTargetID applies equality check predicate on the "ref_target_id" field. It's identical to RefTargetIDEQ.
func RefTargetID(v uint64) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldRefTargetID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint64) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldParentID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Step {
	return predicate.Step(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Step {
	return predicate.Step(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Step {
	return predicate.Step(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Step {
	return predicate.Step(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Step {
	return predicate.Step(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Step {
	return predicate.Step(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Step {
	return predicate.Step(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Step {
	return predicate.Step(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Step {
	return predicate.Step(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Step {
	return predicate.Step(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Step {
	return predicate.Step(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Step {
	return predicate.Step(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Step {
	return predicate.Step(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Step {
	return predicate.Step(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Step {
	return predicate.Step(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Step {
	return predicate.Step(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Step {
	return predicate.Step(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Step {
	return predicate.Step(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Step {
	return predicate.Step(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Step {
	return predicate.Step(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Step {
	return predicate.Step(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Step {
	return predicate.Step(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Step {
	return predicate.Step(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Step {
	return predicate.Step(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Step {
	return predicate.Step(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Step {
	return predicate.Step(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Step {
	return predicate.Step(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Step {
	return predicate.Step(sql.FieldContainsFold(FieldDescription, v))
}

// IsChallengeEQ applies the EQ predicate on the "is_challenge" field.
func IsChallengeEQ(v bool) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldIsChallenge, v))
}

// IsChallengeNEQ applies the NEQ predicate on the "is_challenge" field.
func IsChallengeNEQ(v bool) predicate.Step {
	return predicate.Step(sql.FieldNEQ(FieldIsChallenge, v))
}

// TeacherCommentIsNil applies the IsNil predicate on the "teacher_comment" field.
func TeacherCommentIsNil() predicate.Step {
	return predicate.Step(sql.FieldIsNull(FieldTeacherComment))
}

// TeacherCommentNotNil applies the NotNil predicate on the "teacher_comment" field.
func TeacherCommentNotNil() predicate.Step {
	return predicate.Step(sql.FieldNotNull(FieldTeacherComment))
}

// ParentCommentIsNil applies the IsNil predicate on the "parent_comment" field.
func ParentCommentIsNil() predicate.Step {
	return predicate.Step(sql.FieldIsNull(FieldParentComment))
}

// ParentCommentNotNil applies the NotNil predicate on the "parent_comment" field.
func ParentCommentNotNil() predicate.Step {
	return predicate.Step(sql.FieldNotNull(FieldParentComment))
}

// FriendCommentIsNil applies the IsNil predicate on the "friend_comment" field.
func FriendCommentIsNil() predicate.Step {
	return predicate.Step(sql.FieldIsNull(FieldFriendComment))
}

// FriendCommentNotNil applies the NotNil predicate on the "friend_comment" field.
func FriendCommentNotNil() predicate.Step {
	return predicate.Step(sql.FieldNotNull(FieldFriendComment))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Step {
	return predicate.Step(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Step {
	return predicate.Step(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Step {
	return predicate.Step(sql.FieldNotIn(FieldType, vs...))
}

// ObjectNameEQ applies the EQ predicate on the "object_name" field.
func ObjectNameEQ(v string) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldObjectName, v))
}

// ObjectNameNEQ applies the NEQ predicate on the "object_name" field.
func ObjectNameNEQ(v string) predicate.Step {
	return predicate.Step(sql.FieldNEQ(FieldObjectName, v))
}

// ObjectNameIn applies the In predicate on the "object_name" field.
func ObjectNameIn(vs ...string) predicate.Step {
	return predicate.Step(sql.FieldIn(FieldObjectName, vs...))
}

// ObjectNameNotIn applies the NotIn predicate on the "object_name" field.
func ObjectNameNotIn(vs ...string) predicate.Step {
	return predicate.Step(sql.FieldNotIn(FieldObjectName, vs...))
}

// ObjectNameGT applies the GT predicate on the "object_name" field.
func ObjectNameGT(v string) predicate.Step {
	return predicate.Step(sql.FieldGT(FieldObjectName, v))
}

// ObjectNameGTE applies the GTE predicate on the "object_name" field.
func ObjectNameGTE(v string) predicate.Step {
	return predicate.Step(sql.FieldGTE(FieldObjectName, v))
}

// ObjectNameLT applies the LT predicate on the "object_name" field.
func ObjectNameLT(v string) predicate.Step {
	return predicate.Step(sql.FieldLT(FieldObjectName, v))
}

// ObjectNameLTE applies the LTE predicate on the "object_name" field.
func ObjectNameLTE(v string) predicate.Step {
	return predicate.Step(sql.FieldLTE(FieldObjectName, v))
}

// ObjectNameContains applies the Contains predicate on the "object_name" field.
func ObjectNameContains(v string) predicate.Step {
	return predicate.Step(sql.FieldContains(FieldObjectName, v))
}

// ObjectNameHasPrefix applies the HasPrefix predicate on the "object_name" field.
func ObjectNameHasPrefix(v string) predicate.Step {
	return predicate.Step(sql.FieldHasPrefix(FieldObjectName, v))
}

// ObjectNameHasSuffix applies the HasSuffix predicate on the "object_name" field.
func ObjectNameHasSuffix(v string) predicate.Step {
	return predicate.Step(sql.FieldHasSuffix(FieldObjectName, v))
}

// ObjectNameIsNil applies the IsNil predicate on the "object_name" field.
func ObjectNameIsNil() predicate.Step {
	return predicate.Step(sql.FieldIsNull(FieldObjectName))
}

// ObjectNameNotNil applies the NotNil predicate on the "object_name" field.
func ObjectNameNotNil() predicate.Step {
	return predicate.Step(sql.FieldNotNull(FieldObjectName))
}

// ObjectNameEqualFold applies the EqualFold predicate on the "object_name" field.
func ObjectNameEqualFold(v string) predicate.Step {
	return predicate.Step(sql.FieldEqualFold(FieldObjectName, v))
}

// ObjectNameContainsFold applies the ContainsFold predicate on the "object_name" field.
func ObjectNameContainsFold(v string) predicate.Step {
	return predicate.Step(sql.FieldContainsFold(FieldObjectName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Step {
	return predicate.Step(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Step {
	return predicate.Step(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Step {
	return predicate.Step(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Step {
	return predicate.Step(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Step {
	return predicate.Step(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Step {
	return predicate.Step(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Step {
	return predicate.Step(sql.FieldLTE(FieldCreatedAt, v))
}

// RefTargetIDEQ applies the EQ predicate on the "ref_target_id" field.
func RefTargetIDEQ(v uint64) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldRefTargetID, v))
}

// RefTargetIDNEQ applies the NEQ predicate on the "ref_target_id" field.
func RefTargetIDNEQ(v uint64) predicate.Step {
	return predicate.Step(sql.FieldNEQ(FieldRefTargetID, v))
}

// RefTargetIDIn applies the In predicate on the "ref_target_id" field.
func RefTargetIDIn(vs ...uint64) predicate.Step {
	return predicate.Step(sql.FieldIn(FieldRefTargetID, vs...))
}

// RefTargetIDNotIn applies the NotIn predicate on the "ref_target_id" field.
func RefTargetIDNotIn(vs ...uint64) predicate.Step {
	return predicate.Step(sql.FieldNotIn(FieldRefTargetID, vs...))
}

// RefTargetIDIsNil applies the IsNil predicate on the "ref_target_id" field.
func RefTargetIDIsNil() predicate.Step {
	return predicate.Step(sql.FieldIsNull(FieldRefTargetID))
}

// RefTargetIDNotNil applies the NotNil predicate on the "ref_target_id" field.
func RefTargetIDNotNil() predicate.Step {
	return predicate.Step(sql.FieldNotNull(FieldRefTargetID))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint64) predicate.Step {
	return predicate.Step(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint64) predicate.Step {
	return predicate.Step(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint64) predicate.Step {
	return predicate.Step(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint64) predicate.Step {
	return predicate.Step(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Step {
	return predicate.Step(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Step {
	return predicate.Step(sql.FieldNotNull(FieldParentID))
}

// HasTarget applies the HasEdge predicate on the "target" edge.
func HasTarget() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TargetTable, TargetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetWith applies the HasEdge predicate on the "target" edge with a given conditions (other predicates).
func HasTargetWith(preds ...predicate.Target) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		step := newTargetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Step) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Step) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Step) predicate.Step {
	return predicate.Step(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Step) predicate.Step {
	return predicate.Step(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Step) predicate.Step {
	return predicate.Step(sql.NotPredicates(p))
}
