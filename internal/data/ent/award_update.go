// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/award"
	"step/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// AwardUpdate is the builder for updating Award entities.
type AwardUpdate struct {
	config
	hooks     []Hook
	mutation  *AwardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AwardUpdate builder.
func (au *AwardUpdate) Where(ps ...predicate.Award) *AwardUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AwardUpdate) SetUserID(s string) *AwardUpdate {
	au.mutation.SetUserID(s)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AwardUpdate) SetNillableUserID(s *string) *AwardUpdate {
	if s != nil {
		au.SetUserID(*s)
	}
	return au
}

// SetStatus sets the "status" field.
func (au *AwardUpdate) SetStatus(a award.Status) *AwardUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AwardUpdate) SetNillableStatus(a *award.Status) *AwardUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AwardUpdate) SetDescription(s string) *AwardUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AwardUpdate) SetNillableDescription(s *string) *AwardUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// SetSettedFiles sets the "setted_files" field.
func (au *AwardUpdate) SetSettedFiles(s []string) *AwardUpdate {
	au.mutation.SetSettedFiles(s)
	return au
}

// AppendSettedFiles appends s to the "setted_files" field.
func (au *AwardUpdate) AppendSettedFiles(s []string) *AwardUpdate {
	au.mutation.AppendSettedFiles(s)
	return au
}

// ClearSettedFiles clears the value of the "setted_files" field.
func (au *AwardUpdate) ClearSettedFiles() *AwardUpdate {
	au.mutation.ClearSettedFiles()
	return au
}

// SetRealizedFiles sets the "realized_files" field.
func (au *AwardUpdate) SetRealizedFiles(s []string) *AwardUpdate {
	au.mutation.SetRealizedFiles(s)
	return au
}

// AppendRealizedFiles appends s to the "realized_files" field.
func (au *AwardUpdate) AppendRealizedFiles(s []string) *AwardUpdate {
	au.mutation.AppendRealizedFiles(s)
	return au
}

// ClearRealizedFiles clears the value of the "realized_files" field.
func (au *AwardUpdate) ClearRealizedFiles() *AwardUpdate {
	au.mutation.ClearRealizedFiles()
	return au
}

// SetTargetType sets the "target_type" field.
func (au *AwardUpdate) SetTargetType(at award.TargetType) *AwardUpdate {
	au.mutation.SetTargetType(at)
	return au
}

// SetNillableTargetType sets the "target_type" field if the given value is not nil.
func (au *AwardUpdate) SetNillableTargetType(at *award.TargetType) *AwardUpdate {
	if at != nil {
		au.SetTargetType(*at)
	}
	return au
}

// SetScope sets the "scope" field.
func (au *AwardUpdate) SetScope(s string) *AwardUpdate {
	au.mutation.SetScope(s)
	return au
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (au *AwardUpdate) SetNillableScope(s *string) *AwardUpdate {
	if s != nil {
		au.SetScope(*s)
	}
	return au
}

// SetDimension sets the "dimension" field.
func (au *AwardUpdate) SetDimension(s string) *AwardUpdate {
	au.mutation.SetDimension(s)
	return au
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (au *AwardUpdate) SetNillableDimension(s *string) *AwardUpdate {
	if s != nil {
		au.SetDimension(*s)
	}
	return au
}

// SetThreshold sets the "threshold" field.
func (au *AwardUpdate) SetThreshold(i int32) *AwardUpdate {
	au.mutation.ResetThreshold()
	au.mutation.SetThreshold(i)
	return au
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (au *AwardUpdate) SetNillableThreshold(i *int32) *AwardUpdate {
	if i != nil {
		au.SetThreshold(*i)
	}
	return au
}

// AddThreshold adds i to the "threshold" field.
func (au *AwardUpdate) AddThreshold(i int32) *AwardUpdate {
	au.mutation.AddThreshold(i)
	return au
}

// SetAchievedAt sets the "achieved_at" field.
func (au *AwardUpdate) SetAchievedAt(i int64) *AwardUpdate {
	au.mutation.ResetAchievedAt()
	au.mutation.SetAchievedAt(i)
	return au
}

// SetNillableAchievedAt sets the "achieved_at" field if the given value is not nil.
func (au *AwardUpdate) SetNillableAchievedAt(i *int64) *AwardUpdate {
	if i != nil {
		au.SetAchievedAt(*i)
	}
	return au
}

// AddAchievedAt adds i to the "achieved_at" field.
func (au *AwardUpdate) AddAchievedAt(i int64) *AwardUpdate {
	au.mutation.AddAchievedAt(i)
	return au
}

// ClearAchievedAt clears the value of the "achieved_at" field.
func (au *AwardUpdate) ClearAchievedAt() *AwardUpdate {
	au.mutation.ClearAchievedAt()
	return au
}

// SetRealizedAt sets the "realized_at" field.
func (au *AwardUpdate) SetRealizedAt(i int64) *AwardUpdate {
	au.mutation.ResetRealizedAt()
	au.mutation.SetRealizedAt(i)
	return au
}

// SetNillableRealizedAt sets the "realized_at" field if the given value is not nil.
func (au *AwardUpdate) SetNillableRealizedAt(i *int64) *AwardUpdate {
	if i != nil {
		au.SetRealizedAt(*i)
	}
	return au
}

// AddRealizedAt adds i to the "realized_at" field.
func (au *AwardUpdate) AddRealizedAt(i int64) *AwardUpdate {
	au.mutation.AddRealizedAt(i)
	return au
}

// ClearRealizedAt clears the value of the "realized_at" field.
func (au *AwardUpdate) ClearRealizedAt() *AwardUpdate {
	au.mutation.ClearRealizedAt()
	return au
}

// Mutation returns the AwardMutation object of the builder.
func (au *AwardUpdate) Mutation() *AwardMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AwardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AwardUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AwardUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AwardUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AwardUpdate) check() error {
	if v, ok := au.mutation.Status(); ok {
		if err := award.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Award.status": %w`, err)}
		}
	}
	if v, ok := au.mutation.TargetType(); ok {
		if err := award.TargetTypeValidator(v); err != nil {
			return &ValidationError{Name: "target_type", err: fmt.Errorf(`ent: validator failed for field "Award.target_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AwardUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AwardUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AwardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(award.Table, award.Columns, sqlgraph.NewFieldSpec(award.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.SetField(award.FieldUserID, field.TypeString, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(award.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(award.FieldDescription, field.TypeString, value)
	}
	if value, ok := au.mutation.SettedFiles(); ok {
		_spec.SetField(award.FieldSettedFiles, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedSettedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, award.FieldSettedFiles, value)
		})
	}
	if au.mutation.SettedFilesCleared() {
		_spec.ClearField(award.FieldSettedFiles, field.TypeJSON)
	}
	if value, ok := au.mutation.RealizedFiles(); ok {
		_spec.SetField(award.FieldRealizedFiles, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedRealizedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, award.FieldRealizedFiles, value)
		})
	}
	if au.mutation.RealizedFilesCleared() {
		_spec.ClearField(award.FieldRealizedFiles, field.TypeJSON)
	}
	if value, ok := au.mutation.TargetType(); ok {
		_spec.SetField(award.FieldTargetType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Scope(); ok {
		_spec.SetField(award.FieldScope, field.TypeString, value)
	}
	if value, ok := au.mutation.Dimension(); ok {
		_spec.SetField(award.FieldDimension, field.TypeString, value)
	}
	if value, ok := au.mutation.Threshold(); ok {
		_spec.SetField(award.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedThreshold(); ok {
		_spec.AddField(award.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AchievedAt(); ok {
		_spec.SetField(award.FieldAchievedAt, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedAchievedAt(); ok {
		_spec.AddField(award.FieldAchievedAt, field.TypeInt64, value)
	}
	if au.mutation.AchievedAtCleared() {
		_spec.ClearField(award.FieldAchievedAt, field.TypeInt64)
	}
	if value, ok := au.mutation.RealizedAt(); ok {
		_spec.SetField(award.FieldRealizedAt, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedRealizedAt(); ok {
		_spec.AddField(award.FieldRealizedAt, field.TypeInt64, value)
	}
	if au.mutation.RealizedAtCleared() {
		_spec.ClearField(award.FieldRealizedAt, field.TypeInt64)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{award.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AwardUpdateOne is the builder for updating a single Award entity.
type AwardUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AwardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (auo *AwardUpdateOne) SetUserID(s string) *AwardUpdateOne {
	auo.mutation.SetUserID(s)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableUserID(s *string) *AwardUpdateOne {
	if s != nil {
		auo.SetUserID(*s)
	}
	return auo
}

// SetStatus sets the "status" field.
func (auo *AwardUpdateOne) SetStatus(a award.Status) *AwardUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableStatus(a *award.Status) *AwardUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AwardUpdateOne) SetDescription(s string) *AwardUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableDescription(s *string) *AwardUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// SetSettedFiles sets the "setted_files" field.
func (auo *AwardUpdateOne) SetSettedFiles(s []string) *AwardUpdateOne {
	auo.mutation.SetSettedFiles(s)
	return auo
}

// AppendSettedFiles appends s to the "setted_files" field.
func (auo *AwardUpdateOne) AppendSettedFiles(s []string) *AwardUpdateOne {
	auo.mutation.AppendSettedFiles(s)
	return auo
}

// ClearSettedFiles clears the value of the "setted_files" field.
func (auo *AwardUpdateOne) ClearSettedFiles() *AwardUpdateOne {
	auo.mutation.ClearSettedFiles()
	return auo
}

// SetRealizedFiles sets the "realized_files" field.
func (auo *AwardUpdateOne) SetRealizedFiles(s []string) *AwardUpdateOne {
	auo.mutation.SetRealizedFiles(s)
	return auo
}

// AppendRealizedFiles appends s to the "realized_files" field.
func (auo *AwardUpdateOne) AppendRealizedFiles(s []string) *AwardUpdateOne {
	auo.mutation.AppendRealizedFiles(s)
	return auo
}

// ClearRealizedFiles clears the value of the "realized_files" field.
func (auo *AwardUpdateOne) ClearRealizedFiles() *AwardUpdateOne {
	auo.mutation.ClearRealizedFiles()
	return auo
}

// SetTargetType sets the "target_type" field.
func (auo *AwardUpdateOne) SetTargetType(at award.TargetType) *AwardUpdateOne {
	auo.mutation.SetTargetType(at)
	return auo
}

// SetNillableTargetType sets the "target_type" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableTargetType(at *award.TargetType) *AwardUpdateOne {
	if at != nil {
		auo.SetTargetType(*at)
	}
	return auo
}

// SetScope sets the "scope" field.
func (auo *AwardUpdateOne) SetScope(s string) *AwardUpdateOne {
	auo.mutation.SetScope(s)
	return auo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableScope(s *string) *AwardUpdateOne {
	if s != nil {
		auo.SetScope(*s)
	}
	return auo
}

// SetDimension sets the "dimension" field.
func (auo *AwardUpdateOne) SetDimension(s string) *AwardUpdateOne {
	auo.mutation.SetDimension(s)
	return auo
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableDimension(s *string) *AwardUpdateOne {
	if s != nil {
		auo.SetDimension(*s)
	}
	return auo
}

// SetThreshold sets the "threshold" field.
func (auo *AwardUpdateOne) SetThreshold(i int32) *AwardUpdateOne {
	auo.mutation.ResetThreshold()
	auo.mutation.SetThreshold(i)
	return auo
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableThreshold(i *int32) *AwardUpdateOne {
	if i != nil {
		auo.SetThreshold(*i)
	}
	return auo
}

// AddThreshold adds i to the "threshold" field.
func (auo *AwardUpdateOne) AddThreshold(i int32) *AwardUpdateOne {
	auo.mutation.AddThreshold(i)
	return auo
}

// SetAchievedAt sets the "achieved_at" field.
func (auo *AwardUpdateOne) SetAchievedAt(i int64) *AwardUpdateOne {
	auo.mutation.ResetAchievedAt()
	auo.mutation.SetAchievedAt(i)
	return auo
}

// SetNillableAchievedAt sets the "achieved_at" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableAchievedAt(i *int64) *AwardUpdateOne {
	if i != nil {
		auo.SetAchievedAt(*i)
	}
	return auo
}

// AddAchievedAt adds i to the "achieved_at" field.
func (auo *AwardUpdateOne) AddAchievedAt(i int64) *AwardUpdateOne {
	auo.mutation.AddAchievedAt(i)
	return auo
}

// ClearAchievedAt clears the value of the "achieved_at" field.
func (auo *AwardUpdateOne) ClearAchievedAt() *AwardUpdateOne {
	auo.mutation.ClearAchievedAt()
	return auo
}

// SetRealizedAt sets the "realized_at" field.
func (auo *AwardUpdateOne) SetRealizedAt(i int64) *AwardUpdateOne {
	auo.mutation.ResetRealizedAt()
	auo.mutation.SetRealizedAt(i)
	return auo
}

// SetNillableRealizedAt sets the "realized_at" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableRealizedAt(i *int64) *AwardUpdateOne {
	if i != nil {
		auo.SetRealizedAt(*i)
	}
	return auo
}

// AddRealizedAt adds i to the "realized_at" field.
func (auo *AwardUpdateOne) AddRealizedAt(i int64) *AwardUpdateOne {
	auo.mutation.AddRealizedAt(i)
	return auo
}

// ClearRealizedAt clears the value of the "realized_at" field.
func (auo *AwardUpdateOne) ClearRealizedAt() *AwardUpdateOne {
	auo.mutation.ClearRealizedAt()
	return auo
}

// Mutation returns the AwardMutation object of the builder.
func (auo *AwardUpdateOne) Mutation() *AwardMutation {
	return auo.mutation
}

// Where appends a list predicates to the AwardUpdate builder.
func (auo *AwardUpdateOne) Where(ps ...predicate.Award) *AwardUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AwardUpdateOne) Select(field string, fields ...string) *AwardUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Award entity.
func (auo *AwardUpdateOne) Save(ctx context.Context) (*Award, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AwardUpdateOne) SaveX(ctx context.Context) *Award {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AwardUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AwardUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AwardUpdateOne) check() error {
	if v, ok := auo.mutation.Status(); ok {
		if err := award.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Award.status": %w`, err)}
		}
	}
	if v, ok := auo.mutation.TargetType(); ok {
		if err := award.TargetTypeValidator(v); err != nil {
			return &ValidationError{Name: "target_type", err: fmt.Errorf(`ent: validator failed for field "Award.target_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AwardUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AwardUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AwardUpdateOne) sqlSave(ctx context.Context) (_node *Award, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(award.Table, award.Columns, sqlgraph.NewFieldSpec(award.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Award.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, award.FieldID)
		for _, f := range fields {
			if !award.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != award.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.SetField(award.FieldUserID, field.TypeString, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(award.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(award.FieldDescription, field.TypeString, value)
	}
	if value, ok := auo.mutation.SettedFiles(); ok {
		_spec.SetField(award.FieldSettedFiles, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedSettedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, award.FieldSettedFiles, value)
		})
	}
	if auo.mutation.SettedFilesCleared() {
		_spec.ClearField(award.FieldSettedFiles, field.TypeJSON)
	}
	if value, ok := auo.mutation.RealizedFiles(); ok {
		_spec.SetField(award.FieldRealizedFiles, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedRealizedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, award.FieldRealizedFiles, value)
		})
	}
	if auo.mutation.RealizedFilesCleared() {
		_spec.ClearField(award.FieldRealizedFiles, field.TypeJSON)
	}
	if value, ok := auo.mutation.TargetType(); ok {
		_spec.SetField(award.FieldTargetType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Scope(); ok {
		_spec.SetField(award.FieldScope, field.TypeString, value)
	}
	if value, ok := auo.mutation.Dimension(); ok {
		_spec.SetField(award.FieldDimension, field.TypeString, value)
	}
	if value, ok := auo.mutation.Threshold(); ok {
		_spec.SetField(award.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedThreshold(); ok {
		_spec.AddField(award.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AchievedAt(); ok {
		_spec.SetField(award.FieldAchievedAt, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedAchievedAt(); ok {
		_spec.AddField(award.FieldAchievedAt, field.TypeInt64, value)
	}
	if auo.mutation.AchievedAtCleared() {
		_spec.ClearField(award.FieldAchievedAt, field.TypeInt64)
	}
	if value, ok := auo.mutation.RealizedAt(); ok {
		_spec.SetField(award.FieldRealizedAt, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedRealizedAt(); ok {
		_spec.AddField(award.FieldRealizedAt, field.TypeInt64, value)
	}
	if auo.mutation.RealizedAtCleared() {
		_spec.ClearField(award.FieldRealizedAt, field.TypeInt64)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Award{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{award.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
