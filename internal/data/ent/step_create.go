// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/step"
	"step/internal/data/ent/target"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StepCreate is the builder for creating a Step entity.
type StepCreate struct {
	config
	mutation *StepMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (sc *StepCreate) SetTitle(s string) *StepCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sc *StepCreate) SetNillableTitle(s *string) *StepCreate {
	if s != nil {
		sc.SetTitle(*s)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *StepCreate) SetDescription(s string) *StepCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *StepCreate) SetNillableDescription(s *string) *StepCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetIsChallenge sets the "is_challenge" field.
func (sc *StepCreate) SetIsChallenge(b bool) *StepCreate {
	sc.mutation.SetIsChallenge(b)
	return sc
}

// SetNillableIsChallenge sets the "is_challenge" field if the given value is not nil.
func (sc *StepCreate) SetNillableIsChallenge(b *bool) *StepCreate {
	if b != nil {
		sc.SetIsChallenge(*b)
	}
	return sc
}

// SetTeacherComment sets the "teacher_comment" field.
func (sc *StepCreate) SetTeacherComment(m map[string]interface{}) *StepCreate {
	sc.mutation.SetTeacherComment(m)
	return sc
}

// SetParentComment sets the "parent_comment" field.
func (sc *StepCreate) SetParentComment(m map[string]interface{}) *StepCreate {
	sc.mutation.SetParentComment(m)
	return sc
}

// SetFriendComment sets the "friend_comment" field.
func (sc *StepCreate) SetFriendComment(m map[string]interface{}) *StepCreate {
	sc.mutation.SetFriendComment(m)
	return sc
}

// SetType sets the "type" field.
func (sc *StepCreate) SetType(s step.Type) *StepCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetObjectName sets the "object_name" field.
func (sc *StepCreate) SetObjectName(s string) *StepCreate {
	sc.mutation.SetObjectName(s)
	return sc
}

// SetNillableObjectName sets the "object_name" field if the given value is not nil.
func (sc *StepCreate) SetNillableObjectName(s *string) *StepCreate {
	if s != nil {
		sc.SetObjectName(*s)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *StepCreate) SetCreatedAt(i int64) *StepCreate {
	sc.mutation.SetCreatedAt(i)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StepCreate) SetNillableCreatedAt(i *int64) *StepCreate {
	if i != nil {
		sc.SetCreatedAt(*i)
	}
	return sc
}

// SetRefTargetID sets the "ref_target_id" field.
func (sc *StepCreate) SetRefTargetID(u uint64) *StepCreate {
	sc.mutation.SetRefTargetID(u)
	return sc
}

// SetNillableRefTargetID sets the "ref_target_id" field if the given value is not nil.
func (sc *StepCreate) SetNillableRefTargetID(u *uint64) *StepCreate {
	if u != nil {
		sc.SetRefTargetID(*u)
	}
	return sc
}

// SetParentID sets the "parent_id" field.
func (sc *StepCreate) SetParentID(u uint64) *StepCreate {
	sc.mutation.SetParentID(u)
	return sc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (sc *StepCreate) SetNillableParentID(u *uint64) *StepCreate {
	if u != nil {
		sc.SetParentID(*u)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StepCreate) SetID(u uint64) *StepCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (sc *StepCreate) SetTargetID(id uint64) *StepCreate {
	sc.mutation.SetTargetID(id)
	return sc
}

// SetNillableTargetID sets the "target" edge to the Target entity by ID if the given value is not nil.
func (sc *StepCreate) SetNillableTargetID(id *uint64) *StepCreate {
	if id != nil {
		sc = sc.SetTargetID(*id)
	}
	return sc
}

// SetTarget sets the "target" edge to the Target entity.
func (sc *StepCreate) SetTarget(t *Target) *StepCreate {
	return sc.SetTargetID(t.ID)
}

// SetParent sets the "parent" edge to the Step entity.
func (sc *StepCreate) SetParent(s *Step) *StepCreate {
	return sc.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the Step entity by IDs.
func (sc *StepCreate) AddChildIDs(ids ...uint64) *StepCreate {
	sc.mutation.AddChildIDs(ids...)
	return sc
}

// AddChildren adds the "children" edges to the Step entity.
func (sc *StepCreate) AddChildren(s ...*Step) *StepCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddChildIDs(ids...)
}

// Mutation returns the StepMutation object of the builder.
func (sc *StepCreate) Mutation() *StepMutation {
	return sc.mutation
}

// Save creates the Step in the database.
func (sc *StepCreate) Save(ctx context.Context) (*Step, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StepCreate) SaveX(ctx context.Context) *Step {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StepCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StepCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StepCreate) defaults() {
	if _, ok := sc.mutation.IsChallenge(); !ok {
		v := step.DefaultIsChallenge
		sc.mutation.SetIsChallenge(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := step.DefaultCreatedAt
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StepCreate) check() error {
	if v, ok := sc.mutation.Title(); ok {
		if err := step.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Step.title": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Description(); ok {
		if err := step.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Step.description": %w`, err)}
		}
	}
	if _, ok := sc.mutation.IsChallenge(); !ok {
		return &ValidationError{Name: "is_challenge", err: errors.New(`ent: missing required field "Step.is_challenge"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Step.type"`)}
	}
	if v, ok := sc.mutation.GetType(); ok {
		if err := step.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Step.type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Step.created_at"`)}
	}
	return nil
}

func (sc *StepCreate) sqlSave(ctx context.Context) (*Step, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StepCreate) createSpec() (*Step, *sqlgraph.CreateSpec) {
	var (
		_node = &Step{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(step.Table, sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(step.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(step.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.IsChallenge(); ok {
		_spec.SetField(step.FieldIsChallenge, field.TypeBool, value)
		_node.IsChallenge = value
	}
	if value, ok := sc.mutation.TeacherComment(); ok {
		_spec.SetField(step.FieldTeacherComment, field.TypeJSON, value)
		_node.TeacherComment = value
	}
	if value, ok := sc.mutation.ParentComment(); ok {
		_spec.SetField(step.FieldParentComment, field.TypeJSON, value)
		_node.ParentComment = value
	}
	if value, ok := sc.mutation.FriendComment(); ok {
		_spec.SetField(step.FieldFriendComment, field.TypeJSON, value)
		_node.FriendComment = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(step.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.ObjectName(); ok {
		_spec.SetField(step.FieldObjectName, field.TypeString, value)
		_node.ObjectName = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(step.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if nodes := sc.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.TargetTable,
			Columns: []string{step.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RefTargetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.ParentTable,
			Columns: []string{step.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   step.ChildrenTable,
			Columns: []string{step.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StepCreateBulk is the builder for creating many Step entities in bulk.
type StepCreateBulk struct {
	config
	err      error
	builders []*StepCreate
}

// Save creates the Step entities in the database.
func (scb *StepCreateBulk) Save(ctx context.Context) ([]*Step, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Step, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StepMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StepCreateBulk) SaveX(ctx context.Context) []*Step {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StepCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StepCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
