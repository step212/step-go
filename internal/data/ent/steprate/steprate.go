// Code generated by ent, DO NOT EDIT.

package steprate

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the steprate type in the database.
	Label = "step_rate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTopTargetID holds the string denoting the top_target_id field in the database.
	FieldTopTargetID = "top_target_id"
	// FieldTargetID holds the string denoting the target_id field in the database.
	FieldTargetID = "target_id"
	// FieldStepID holds the string denoting the step_id field in the database.
	FieldStepID = "step_id"
	// FieldWeightedValue holds the string denoting the weighted_value field in the database.
	FieldWeightedValue = "weighted_value"
	// FieldTargetReasonableness holds the string denoting the target_reasonableness field in the database.
	FieldTargetReasonableness = "target_reasonableness"
	// FieldTargetClarity holds the string denoting the target_clarity field in the database.
	FieldTargetClarity = "target_clarity"
	// FieldTargetAchievement holds the string denoting the target_achievement field in the database.
	FieldTargetAchievement = "target_achievement"
	// FieldReflectionImprovement holds the string denoting the reflection_improvement field in the database.
	FieldReflectionImprovement = "reflection_improvement"
	// FieldInnovation holds the string denoting the innovation field in the database.
	FieldInnovation = "innovation"
	// FieldBasicReliability holds the string denoting the basic_reliability field in the database.
	FieldBasicReliability = "basic_reliability"
	// FieldSkillImprovement holds the string denoting the skill_improvement field in the database.
	FieldSkillImprovement = "skill_improvement"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// Table holds the table name of the steprate in the database.
	Table = "step_rates"
)

// Columns holds all SQL columns for steprate fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTopTargetID,
	FieldTargetID,
	FieldStepID,
	FieldWeightedValue,
	FieldTargetReasonableness,
	FieldTargetClarity,
	FieldTargetAchievement,
	FieldReflectionImprovement,
	FieldInnovation,
	FieldBasicReliability,
	FieldSkillImprovement,
	FieldDifficulty,
	FieldDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the StepRate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTopTargetID orders the results by the top_target_id field.
func ByTopTargetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopTargetID, opts...).ToFunc()
}

// ByTargetID orders the results by the target_id field.
func ByTargetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetID, opts...).ToFunc()
}

// ByStepID orders the results by the step_id field.
func ByStepID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepID, opts...).ToFunc()
}

// ByWeightedValue orders the results by the weighted_value field.
func ByWeightedValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeightedValue, opts...).ToFunc()
}

// ByTargetReasonableness orders the results by the target_reasonableness field.
func ByTargetReasonableness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetReasonableness, opts...).ToFunc()
}

// ByTargetClarity orders the results by the target_clarity field.
func ByTargetClarity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetClarity, opts...).ToFunc()
}

// ByTargetAchievement orders the results by the target_achievement field.
func ByTargetAchievement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetAchievement, opts...).ToFunc()
}

// ByReflectionImprovement orders the results by the reflection_improvement field.
func ByReflectionImprovement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReflectionImprovement, opts...).ToFunc()
}

// ByInnovation orders the results by the innovation field.
func ByInnovation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInnovation, opts...).ToFunc()
}

// ByBasicReliability orders the results by the basic_reliability field.
func ByBasicReliability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBasicReliability, opts...).ToFunc()
}

// BySkillImprovement orders the results by the skill_improvement field.
func BySkillImprovement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkillImprovement, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}
