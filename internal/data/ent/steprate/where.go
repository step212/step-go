// Code generated by ent, DO NOT EDIT.

package steprate

import (
	"step/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldUserID, v))
}

// TopTargetID applies equality check predicate on the "top_target_id" field. It's identical to TopTargetIDEQ.
func TopTargetID(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTopTargetID, v))
}

// TargetID applies equality check predicate on the "target_id" field. It's identical to TargetIDEQ.
func TargetID(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTargetID, v))
}

// StepID applies equality check predicate on the "step_id" field. It's identical to StepIDEQ.
func StepID(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldStepID, v))
}

// WeightedValue applies equality check predicate on the "weighted_value" field. It's identical to WeightedValueEQ.
func WeightedValue(v float64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldWeightedValue, v))
}

// TargetReasonableness applies equality check predicate on the "target_reasonableness" field. It's identical to TargetReasonablenessEQ.
func TargetReasonableness(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTargetReasonableness, v))
}

// TargetClarity applies equality check predicate on the "target_clarity" field. It's identical to TargetClarityEQ.
func TargetClarity(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTargetClarity, v))
}

// TargetAchievement applies equality check predicate on the "target_achievement" field. It's identical to TargetAchievementEQ.
func TargetAchievement(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTargetAchievement, v))
}

// ReflectionImprovement applies equality check predicate on the "reflection_improvement" field. It's identical to ReflectionImprovementEQ.
func ReflectionImprovement(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldReflectionImprovement, v))
}

// Innovation applies equality check predicate on the "innovation" field. It's identical to InnovationEQ.
func Innovation(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldInnovation, v))
}

// BasicReliability applies equality check predicate on the "basic_reliability" field. It's identical to BasicReliabilityEQ.
func BasicReliability(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldBasicReliability, v))
}

// SkillImprovement applies equality check predicate on the "skill_improvement" field. It's identical to SkillImprovementEQ.
func SkillImprovement(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldSkillImprovement, v))
}

// Difficulty applies equality check predicate on the "difficulty" field. It's identical to DifficultyEQ.
func Difficulty(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldDifficulty, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldDate, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.StepRate {
	return predicate.StepRate(sql.FieldContainsFold(FieldUserID, v))
}

// TopTargetIDEQ applies the EQ predicate on the "top_target_id" field.
func TopTargetIDEQ(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTopTargetID, v))
}

// TopTargetIDNEQ applies the NEQ predicate on the "top_target_id" field.
func TopTargetIDNEQ(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldTopTargetID, v))
}

// TopTargetIDIn applies the In predicate on the "top_target_id" field.
func TopTargetIDIn(vs ...uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldTopTargetID, vs...))
}

// TopTargetIDNotIn applies the NotIn predicate on the "top_target_id" field.
func TopTargetIDNotIn(vs ...uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldTopTargetID, vs...))
}

// TopTargetIDGT applies the GT predicate on the "top_target_id" field.
func TopTargetIDGT(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldTopTargetID, v))
}

// TopTargetIDGTE applies the GTE predicate on the "top_target_id" field.
func TopTargetIDGTE(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldTopTargetID, v))
}

// TopTargetIDLT applies the LT predicate on the "top_target_id" field.
func TopTargetIDLT(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldTopTargetID, v))
}

// TopTargetIDLTE applies the LTE predicate on the "top_target_id" field.
func TopTargetIDLTE(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldTopTargetID, v))
}

// TargetIDEQ applies the EQ predicate on the "target_id" field.
func TargetIDEQ(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTargetID, v))
}

// TargetIDNEQ applies the NEQ predicate on the "target_id" field.
func TargetIDNEQ(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldTargetID, v))
}

// TargetIDIn applies the In predicate on the "target_id" field.
func TargetIDIn(vs ...uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldTargetID, vs...))
}

// TargetIDNotIn applies the NotIn predicate on the "target_id" field.
func TargetIDNotIn(vs ...uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldTargetID, vs...))
}

// TargetIDGT applies the GT predicate on the "target_id" field.
func TargetIDGT(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldTargetID, v))
}

// TargetIDGTE applies the GTE predicate on the "target_id" field.
func TargetIDGTE(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldTargetID, v))
}

// TargetIDLT applies the LT predicate on the "target_id" field.
func TargetIDLT(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldTargetID, v))
}

// TargetIDLTE applies the LTE predicate on the "target_id" field.
func TargetIDLTE(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldTargetID, v))
}

// StepIDEQ applies the EQ predicate on the "step_id" field.
func StepIDEQ(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldStepID, v))
}

// StepIDNEQ applies the NEQ predicate on the "step_id" field.
func StepIDNEQ(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldStepID, v))
}

// StepIDIn applies the In predicate on the "step_id" field.
func StepIDIn(vs ...uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldStepID, vs...))
}

// StepIDNotIn applies the NotIn predicate on the "step_id" field.
func StepIDNotIn(vs ...uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldStepID, vs...))
}

// StepIDGT applies the GT predicate on the "step_id" field.
func StepIDGT(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldStepID, v))
}

// StepIDGTE applies the GTE predicate on the "step_id" field.
func StepIDGTE(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldStepID, v))
}

// StepIDLT applies the LT predicate on the "step_id" field.
func StepIDLT(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldStepID, v))
}

// StepIDLTE applies the LTE predicate on the "step_id" field.
func StepIDLTE(v uint64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldStepID, v))
}

// WeightedValueEQ applies the EQ predicate on the "weighted_value" field.
func WeightedValueEQ(v float64) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldWeightedValue, v))
}

// WeightedValueNEQ applies the NEQ predicate on the "weighted_value" field.
func WeightedValueNEQ(v float64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldWeightedValue, v))
}

// WeightedValueIn applies the In predicate on the "weighted_value" field.
func WeightedValueIn(vs ...float64) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldWeightedValue, vs...))
}

// WeightedValueNotIn applies the NotIn predicate on the "weighted_value" field.
func WeightedValueNotIn(vs ...float64) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldWeightedValue, vs...))
}

// WeightedValueGT applies the GT predicate on the "weighted_value" field.
func WeightedValueGT(v float64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldWeightedValue, v))
}

// WeightedValueGTE applies the GTE predicate on the "weighted_value" field.
func WeightedValueGTE(v float64) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldWeightedValue, v))
}

// WeightedValueLT applies the LT predicate on the "weighted_value" field.
func WeightedValueLT(v float64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldWeightedValue, v))
}

// WeightedValueLTE applies the LTE predicate on the "weighted_value" field.
func WeightedValueLTE(v float64) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldWeightedValue, v))
}

// TargetReasonablenessEQ applies the EQ predicate on the "target_reasonableness" field.
func TargetReasonablenessEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTargetReasonableness, v))
}

// TargetReasonablenessNEQ applies the NEQ predicate on the "target_reasonableness" field.
func TargetReasonablenessNEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldTargetReasonableness, v))
}

// TargetReasonablenessIn applies the In predicate on the "target_reasonableness" field.
func TargetReasonablenessIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldTargetReasonableness, vs...))
}

// TargetReasonablenessNotIn applies the NotIn predicate on the "target_reasonableness" field.
func TargetReasonablenessNotIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldTargetReasonableness, vs...))
}

// TargetReasonablenessGT applies the GT predicate on the "target_reasonableness" field.
func TargetReasonablenessGT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldTargetReasonableness, v))
}

// TargetReasonablenessGTE applies the GTE predicate on the "target_reasonableness" field.
func TargetReasonablenessGTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldTargetReasonableness, v))
}

// TargetReasonablenessLT applies the LT predicate on the "target_reasonableness" field.
func TargetReasonablenessLT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldTargetReasonableness, v))
}

// TargetReasonablenessLTE applies the LTE predicate on the "target_reasonableness" field.
func TargetReasonablenessLTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldTargetReasonableness, v))
}

// TargetClarityEQ applies the EQ predicate on the "target_clarity" field.
func TargetClarityEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTargetClarity, v))
}

// TargetClarityNEQ applies the NEQ predicate on the "target_clarity" field.
func TargetClarityNEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldTargetClarity, v))
}

// TargetClarityIn applies the In predicate on the "target_clarity" field.
func TargetClarityIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldTargetClarity, vs...))
}

// TargetClarityNotIn applies the NotIn predicate on the "target_clarity" field.
func TargetClarityNotIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldTargetClarity, vs...))
}

// TargetClarityGT applies the GT predicate on the "target_clarity" field.
func TargetClarityGT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldTargetClarity, v))
}

// TargetClarityGTE applies the GTE predicate on the "target_clarity" field.
func TargetClarityGTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldTargetClarity, v))
}

// TargetClarityLT applies the LT predicate on the "target_clarity" field.
func TargetClarityLT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldTargetClarity, v))
}

// TargetClarityLTE applies the LTE predicate on the "target_clarity" field.
func TargetClarityLTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldTargetClarity, v))
}

// TargetAchievementEQ applies the EQ predicate on the "target_achievement" field.
func TargetAchievementEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldTargetAchievement, v))
}

// TargetAchievementNEQ applies the NEQ predicate on the "target_achievement" field.
func TargetAchievementNEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldTargetAchievement, v))
}

// TargetAchievementIn applies the In predicate on the "target_achievement" field.
func TargetAchievementIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldTargetAchievement, vs...))
}

// TargetAchievementNotIn applies the NotIn predicate on the "target_achievement" field.
func TargetAchievementNotIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldTargetAchievement, vs...))
}

// TargetAchievementGT applies the GT predicate on the "target_achievement" field.
func TargetAchievementGT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldTargetAchievement, v))
}

// TargetAchievementGTE applies the GTE predicate on the "target_achievement" field.
func TargetAchievementGTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldTargetAchievement, v))
}

// TargetAchievementLT applies the LT predicate on the "target_achievement" field.
func TargetAchievementLT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldTargetAchievement, v))
}

// TargetAchievementLTE applies the LTE predicate on the "target_achievement" field.
func TargetAchievementLTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldTargetAchievement, v))
}

// ReflectionImprovementEQ applies the EQ predicate on the "reflection_improvement" field.
func ReflectionImprovementEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldReflectionImprovement, v))
}

// ReflectionImprovementNEQ applies the NEQ predicate on the "reflection_improvement" field.
func ReflectionImprovementNEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldReflectionImprovement, v))
}

// ReflectionImprovementIn applies the In predicate on the "reflection_improvement" field.
func ReflectionImprovementIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldReflectionImprovement, vs...))
}

// ReflectionImprovementNotIn applies the NotIn predicate on the "reflection_improvement" field.
func ReflectionImprovementNotIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldReflectionImprovement, vs...))
}

// ReflectionImprovementGT applies the GT predicate on the "reflection_improvement" field.
func ReflectionImprovementGT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldReflectionImprovement, v))
}

// ReflectionImprovementGTE applies the GTE predicate on the "reflection_improvement" field.
func ReflectionImprovementGTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldReflectionImprovement, v))
}

// ReflectionImprovementLT applies the LT predicate on the "reflection_improvement" field.
func ReflectionImprovementLT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldReflectionImprovement, v))
}

// ReflectionImprovementLTE applies the LTE predicate on the "reflection_improvement" field.
func ReflectionImprovementLTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldReflectionImprovement, v))
}

// InnovationEQ applies the EQ predicate on the "innovation" field.
func InnovationEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldInnovation, v))
}

// InnovationNEQ applies the NEQ predicate on the "innovation" field.
func InnovationNEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldInnovation, v))
}

// InnovationIn applies the In predicate on the "innovation" field.
func InnovationIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldInnovation, vs...))
}

// InnovationNotIn applies the NotIn predicate on the "innovation" field.
func InnovationNotIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldInnovation, vs...))
}

// InnovationGT applies the GT predicate on the "innovation" field.
func InnovationGT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldInnovation, v))
}

// InnovationGTE applies the GTE predicate on the "innovation" field.
func InnovationGTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldInnovation, v))
}

// InnovationLT applies the LT predicate on the "innovation" field.
func InnovationLT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldInnovation, v))
}

// InnovationLTE applies the LTE predicate on the "innovation" field.
func InnovationLTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldInnovation, v))
}

// BasicReliabilityEQ applies the EQ predicate on the "basic_reliability" field.
func BasicReliabilityEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldBasicReliability, v))
}

// BasicReliabilityNEQ applies the NEQ predicate on the "basic_reliability" field.
func BasicReliabilityNEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldBasicReliability, v))
}

// BasicReliabilityIn applies the In predicate on the "basic_reliability" field.
func BasicReliabilityIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldBasicReliability, vs...))
}

// BasicReliabilityNotIn applies the NotIn predicate on the "basic_reliability" field.
func BasicReliabilityNotIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldBasicReliability, vs...))
}

// BasicReliabilityGT applies the GT predicate on the "basic_reliability" field.
func BasicReliabilityGT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldBasicReliability, v))
}

// BasicReliabilityGTE applies the GTE predicate on the "basic_reliability" field.
func BasicReliabilityGTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldBasicReliability, v))
}

// BasicReliabilityLT applies the LT predicate on the "basic_reliability" field.
func BasicReliabilityLT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldBasicReliability, v))
}

// BasicReliabilityLTE applies the LTE predicate on the "basic_reliability" field.
func BasicReliabilityLTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldBasicReliability, v))
}

// SkillImprovementEQ applies the EQ predicate on the "skill_improvement" field.
func SkillImprovementEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldSkillImprovement, v))
}

// SkillImprovementNEQ applies the NEQ predicate on the "skill_improvement" field.
func SkillImprovementNEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldSkillImprovement, v))
}

// SkillImprovementIn applies the In predicate on the "skill_improvement" field.
func SkillImprovementIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldSkillImprovement, vs...))
}

// SkillImprovementNotIn applies the NotIn predicate on the "skill_improvement" field.
func SkillImprovementNotIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldSkillImprovement, vs...))
}

// SkillImprovementGT applies the GT predicate on the "skill_improvement" field.
func SkillImprovementGT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldSkillImprovement, v))
}

// SkillImprovementGTE applies the GTE predicate on the "skill_improvement" field.
func SkillImprovementGTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldSkillImprovement, v))
}

// SkillImprovementLT applies the LT predicate on the "skill_improvement" field.
func SkillImprovementLT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldSkillImprovement, v))
}

// SkillImprovementLTE applies the LTE predicate on the "skill_improvement" field.
func SkillImprovementLTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldSkillImprovement, v))
}

// DifficultyEQ applies the EQ predicate on the "difficulty" field.
func DifficultyEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldDifficulty, v))
}

// DifficultyNEQ applies the NEQ predicate on the "difficulty" field.
func DifficultyNEQ(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldDifficulty, v))
}

// DifficultyIn applies the In predicate on the "difficulty" field.
func DifficultyIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldDifficulty, vs...))
}

// DifficultyNotIn applies the NotIn predicate on the "difficulty" field.
func DifficultyNotIn(vs ...int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldDifficulty, vs...))
}

// DifficultyGT applies the GT predicate on the "difficulty" field.
func DifficultyGT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldDifficulty, v))
}

// DifficultyGTE applies the GTE predicate on the "difficulty" field.
func DifficultyGTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldDifficulty, v))
}

// DifficultyLT applies the LT predicate on the "difficulty" field.
func DifficultyLT(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldDifficulty, v))
}

// DifficultyLTE applies the LTE predicate on the "difficulty" field.
func DifficultyLTE(v int32) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldDifficulty, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.StepRate {
	return predicate.StepRate(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.StepRate {
	return predicate.StepRate(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.StepRate {
	return predicate.StepRate(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.StepRate {
	return predicate.StepRate(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.StepRate {
	return predicate.StepRate(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.StepRate {
	return predicate.StepRate(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.StepRate {
	return predicate.StepRate(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.StepRate {
	return predicate.StepRate(sql.FieldLTE(FieldDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StepRate) predicate.StepRate {
	return predicate.StepRate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StepRate) predicate.StepRate {
	return predicate.StepRate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StepRate) predicate.StepRate {
	return predicate.StepRate(sql.NotPredicates(p))
}
