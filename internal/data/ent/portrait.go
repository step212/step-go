// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"step/internal/data/ent/portrait"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Portrait is the model entity for the Portrait schema.
type Portrait struct {
	config `json:"-"`
	// ID of the ent.
	// 自增ID
	ID uint64 `json:"id,omitempty"`
	// User ID
	UserID string `json:"user_id,omitempty"`
	// 维度
	Dimension portrait.Dimension `json:"dimension,omitempty"`
	// 值
	Value        map[string]interface{} `json:"value,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Portrait) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case portrait.FieldValue:
			values[i] = new([]byte)
		case portrait.FieldID:
			values[i] = new(sql.NullInt64)
		case portrait.FieldUserID, portrait.FieldDimension:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Portrait fields.
func (po *Portrait) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portrait.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = uint64(value.Int64)
		case portrait.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				po.UserID = value.String
			}
		case portrait.FieldDimension:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dimension", values[i])
			} else if value.Valid {
				po.Dimension = portrait.Dimension(value.String)
			}
		case portrait.FieldValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Value); err != nil {
					return fmt.Errorf("unmarshal field value: %w", err)
				}
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Portrait.
// This includes values selected through modifiers, order, etc.
func (po *Portrait) GetValue(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// Update returns a builder for updating this Portrait.
// Note that you need to call Portrait.Unwrap() before calling this method if this Portrait
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Portrait) Update() *PortraitUpdateOne {
	return NewPortraitClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Portrait entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Portrait) Unwrap() *Portrait {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Portrait is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Portrait) String() string {
	var builder strings.Builder
	builder.WriteString("Portrait(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("user_id=")
	builder.WriteString(po.UserID)
	builder.WriteString(", ")
	builder.WriteString("dimension=")
	builder.WriteString(fmt.Sprintf("%v", po.Dimension))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", po.Value))
	builder.WriteByte(')')
	return builder.String()
}

// Portraits is a parsable slice of Portrait.
type Portraits []*Portrait
