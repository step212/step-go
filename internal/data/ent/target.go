// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"step/internal/data/ent/target"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Target is the model entity for the Target schema.
type Target struct {
	config `json:"-"`
	// ID of the ent.
	// 自增ID
	ID uint64 `json:"id,omitempty"`
	// User ID
	UserID string `json:"user_id,omitempty"`
	// 名称
	Title string `json:"title,omitempty"`
	// 描述
	Description string `json:"description,omitempty"`
	// 类型
	Type string `json:"type,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 开始时间
	StartAt int64 `json:"start_at,omitempty"`
	// 挑战时间
	ChallengeAt int64 `json:"challenge_at,omitempty"`
	// 完成时间
	DoneAt int64 `json:"done_at,omitempty"`
	// 层级
	Layer uint32 `json:"layer,omitempty"`
	// 状态
	Status target.Status `json:"status,omitempty"`
	// 父ID
	ParentID uint64 `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TargetQuery when eager-loading is set.
	Edges        TargetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TargetEdges holds the relations/edges for other nodes in the graph.
type TargetEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Target `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Target `json:"children,omitempty"`
	// Steps holds the value of the steps edge.
	Steps []*Step `json:"steps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TargetEdges) ParentOrErr() (*Target, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: target.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e TargetEdges) ChildrenOrErr() ([]*Target, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// StepsOrErr returns the Steps value or an error if the edge
// was not loaded in eager-loading.
func (e TargetEdges) StepsOrErr() ([]*Step, error) {
	if e.loadedTypes[2] {
		return e.Steps, nil
	}
	return nil, &NotLoadedError{edge: "steps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Target) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case target.FieldID, target.FieldCreatedAt, target.FieldStartAt, target.FieldChallengeAt, target.FieldDoneAt, target.FieldLayer, target.FieldParentID:
			values[i] = new(sql.NullInt64)
		case target.FieldUserID, target.FieldTitle, target.FieldDescription, target.FieldType, target.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Target fields.
func (t *Target) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case target.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint64(value.Int64)
		case target.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				t.UserID = value.String
			}
		case target.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case target.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case target.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case target.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Int64
			}
		case target.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				t.StartAt = value.Int64
			}
		case target.FieldChallengeAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field challenge_at", values[i])
			} else if value.Valid {
				t.ChallengeAt = value.Int64
			}
		case target.FieldDoneAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field done_at", values[i])
			} else if value.Valid {
				t.DoneAt = value.Int64
			}
		case target.FieldLayer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field layer", values[i])
			} else if value.Valid {
				t.Layer = uint32(value.Int64)
			}
		case target.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = target.Status(value.String)
			}
		case target.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				t.ParentID = uint64(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Target.
// This includes values selected through modifiers, order, etc.
func (t *Target) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Target entity.
func (t *Target) QueryParent() *TargetQuery {
	return NewTargetClient(t.config).QueryParent(t)
}

// QueryChildren queries the "children" edge of the Target entity.
func (t *Target) QueryChildren() *TargetQuery {
	return NewTargetClient(t.config).QueryChildren(t)
}

// QuerySteps queries the "steps" edge of the Target entity.
func (t *Target) QuerySteps() *StepQuery {
	return NewTargetClient(t.config).QuerySteps(t)
}

// Update returns a builder for updating this Target.
// Note that you need to call Target.Unwrap() before calling this method if this Target
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Target) Update() *TargetUpdateOne {
	return NewTargetClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Target entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Target) Unwrap() *Target {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Target is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Target) String() string {
	var builder strings.Builder
	builder.WriteString("Target(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("user_id=")
	builder.WriteString(t.UserID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", t.StartAt))
	builder.WriteString(", ")
	builder.WriteString("challenge_at=")
	builder.WriteString(fmt.Sprintf("%v", t.ChallengeAt))
	builder.WriteString(", ")
	builder.WriteString("done_at=")
	builder.WriteString(fmt.Sprintf("%v", t.DoneAt))
	builder.WriteString(", ")
	builder.WriteString("layer=")
	builder.WriteString(fmt.Sprintf("%v", t.Layer))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ParentID))
	builder.WriteByte(')')
	return builder.String()
}

// Targets is a parsable slice of Target.
type Targets []*Target
