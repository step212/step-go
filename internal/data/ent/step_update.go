// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/predicate"
	"step/internal/data/ent/step"
	"step/internal/data/ent/target"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StepUpdate is the builder for updating Step entities.
type StepUpdate struct {
	config
	hooks     []Hook
	mutation  *StepMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StepUpdate builder.
func (su *StepUpdate) Where(ps ...predicate.Step) *StepUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTitle sets the "title" field.
func (su *StepUpdate) SetTitle(s string) *StepUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *StepUpdate) SetNillableTitle(s *string) *StepUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// ClearTitle clears the value of the "title" field.
func (su *StepUpdate) ClearTitle() *StepUpdate {
	su.mutation.ClearTitle()
	return su
}

// SetDescription sets the "description" field.
func (su *StepUpdate) SetDescription(s string) *StepUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *StepUpdate) SetNillableDescription(s *string) *StepUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *StepUpdate) ClearDescription() *StepUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetIsChallenge sets the "is_challenge" field.
func (su *StepUpdate) SetIsChallenge(b bool) *StepUpdate {
	su.mutation.SetIsChallenge(b)
	return su
}

// SetNillableIsChallenge sets the "is_challenge" field if the given value is not nil.
func (su *StepUpdate) SetNillableIsChallenge(b *bool) *StepUpdate {
	if b != nil {
		su.SetIsChallenge(*b)
	}
	return su
}

// SetTeacherComment sets the "teacher_comment" field.
func (su *StepUpdate) SetTeacherComment(m map[string]interface{}) *StepUpdate {
	su.mutation.SetTeacherComment(m)
	return su
}

// ClearTeacherComment clears the value of the "teacher_comment" field.
func (su *StepUpdate) ClearTeacherComment() *StepUpdate {
	su.mutation.ClearTeacherComment()
	return su
}

// SetParentComment sets the "parent_comment" field.
func (su *StepUpdate) SetParentComment(m map[string]interface{}) *StepUpdate {
	su.mutation.SetParentComment(m)
	return su
}

// ClearParentComment clears the value of the "parent_comment" field.
func (su *StepUpdate) ClearParentComment() *StepUpdate {
	su.mutation.ClearParentComment()
	return su
}

// SetFriendComment sets the "friend_comment" field.
func (su *StepUpdate) SetFriendComment(m map[string]interface{}) *StepUpdate {
	su.mutation.SetFriendComment(m)
	return su
}

// ClearFriendComment clears the value of the "friend_comment" field.
func (su *StepUpdate) ClearFriendComment() *StepUpdate {
	su.mutation.ClearFriendComment()
	return su
}

// SetType sets the "type" field.
func (su *StepUpdate) SetType(s step.Type) *StepUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *StepUpdate) SetNillableType(s *step.Type) *StepUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// SetObjectName sets the "object_name" field.
func (su *StepUpdate) SetObjectName(s string) *StepUpdate {
	su.mutation.SetObjectName(s)
	return su
}

// SetNillableObjectName sets the "object_name" field if the given value is not nil.
func (su *StepUpdate) SetNillableObjectName(s *string) *StepUpdate {
	if s != nil {
		su.SetObjectName(*s)
	}
	return su
}

// ClearObjectName clears the value of the "object_name" field.
func (su *StepUpdate) ClearObjectName() *StepUpdate {
	su.mutation.ClearObjectName()
	return su
}

// SetRefTargetID sets the "ref_target_id" field.
func (su *StepUpdate) SetRefTargetID(u uint64) *StepUpdate {
	su.mutation.SetRefTargetID(u)
	return su
}

// SetNillableRefTargetID sets the "ref_target_id" field if the given value is not nil.
func (su *StepUpdate) SetNillableRefTargetID(u *uint64) *StepUpdate {
	if u != nil {
		su.SetRefTargetID(*u)
	}
	return su
}

// ClearRefTargetID clears the value of the "ref_target_id" field.
func (su *StepUpdate) ClearRefTargetID() *StepUpdate {
	su.mutation.ClearRefTargetID()
	return su
}

// SetParentID sets the "parent_id" field.
func (su *StepUpdate) SetParentID(u uint64) *StepUpdate {
	su.mutation.SetParentID(u)
	return su
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (su *StepUpdate) SetNillableParentID(u *uint64) *StepUpdate {
	if u != nil {
		su.SetParentID(*u)
	}
	return su
}

// ClearParentID clears the value of the "parent_id" field.
func (su *StepUpdate) ClearParentID() *StepUpdate {
	su.mutation.ClearParentID()
	return su
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (su *StepUpdate) SetTargetID(id uint64) *StepUpdate {
	su.mutation.SetTargetID(id)
	return su
}

// SetNillableTargetID sets the "target" edge to the Target entity by ID if the given value is not nil.
func (su *StepUpdate) SetNillableTargetID(id *uint64) *StepUpdate {
	if id != nil {
		su = su.SetTargetID(*id)
	}
	return su
}

// SetTarget sets the "target" edge to the Target entity.
func (su *StepUpdate) SetTarget(t *Target) *StepUpdate {
	return su.SetTargetID(t.ID)
}

// SetParent sets the "parent" edge to the Step entity.
func (su *StepUpdate) SetParent(s *Step) *StepUpdate {
	return su.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the Step entity by IDs.
func (su *StepUpdate) AddChildIDs(ids ...uint64) *StepUpdate {
	su.mutation.AddChildIDs(ids...)
	return su
}

// AddChildren adds the "children" edges to the Step entity.
func (su *StepUpdate) AddChildren(s ...*Step) *StepUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddChildIDs(ids...)
}

// Mutation returns the StepMutation object of the builder.
func (su *StepUpdate) Mutation() *StepMutation {
	return su.mutation
}

// ClearTarget clears the "target" edge to the Target entity.
func (su *StepUpdate) ClearTarget() *StepUpdate {
	su.mutation.ClearTarget()
	return su
}

// ClearParent clears the "parent" edge to the Step entity.
func (su *StepUpdate) ClearParent() *StepUpdate {
	su.mutation.ClearParent()
	return su
}

// ClearChildren clears all "children" edges to the Step entity.
func (su *StepUpdate) ClearChildren() *StepUpdate {
	su.mutation.ClearChildren()
	return su
}

// RemoveChildIDs removes the "children" edge to Step entities by IDs.
func (su *StepUpdate) RemoveChildIDs(ids ...uint64) *StepUpdate {
	su.mutation.RemoveChildIDs(ids...)
	return su
}

// RemoveChildren removes "children" edges to Step entities.
func (su *StepUpdate) RemoveChildren(s ...*Step) *StepUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StepUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StepUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StepUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StepUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StepUpdate) check() error {
	if v, ok := su.mutation.Title(); ok {
		if err := step.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Step.title": %w`, err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := step.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Step.description": %w`, err)}
		}
	}
	if v, ok := su.mutation.GetType(); ok {
		if err := step.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Step.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StepUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StepUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(step.Table, step.Columns, sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(step.FieldTitle, field.TypeString, value)
	}
	if su.mutation.TitleCleared() {
		_spec.ClearField(step.FieldTitle, field.TypeString)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(step.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(step.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.IsChallenge(); ok {
		_spec.SetField(step.FieldIsChallenge, field.TypeBool, value)
	}
	if value, ok := su.mutation.TeacherComment(); ok {
		_spec.SetField(step.FieldTeacherComment, field.TypeJSON, value)
	}
	if su.mutation.TeacherCommentCleared() {
		_spec.ClearField(step.FieldTeacherComment, field.TypeJSON)
	}
	if value, ok := su.mutation.ParentComment(); ok {
		_spec.SetField(step.FieldParentComment, field.TypeJSON, value)
	}
	if su.mutation.ParentCommentCleared() {
		_spec.ClearField(step.FieldParentComment, field.TypeJSON)
	}
	if value, ok := su.mutation.FriendComment(); ok {
		_spec.SetField(step.FieldFriendComment, field.TypeJSON, value)
	}
	if su.mutation.FriendCommentCleared() {
		_spec.ClearField(step.FieldFriendComment, field.TypeJSON)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(step.FieldType, field.TypeEnum, value)
	}
	if value, ok := su.mutation.ObjectName(); ok {
		_spec.SetField(step.FieldObjectName, field.TypeString, value)
	}
	if su.mutation.ObjectNameCleared() {
		_spec.ClearField(step.FieldObjectName, field.TypeString)
	}
	if su.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.TargetTable,
			Columns: []string{step.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.TargetTable,
			Columns: []string{step.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.ParentTable,
			Columns: []string{step.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.ParentTable,
			Columns: []string{step.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   step.ChildrenTable,
			Columns: []string{step.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !su.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   step.ChildrenTable,
			Columns: []string{step.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   step.ChildrenTable,
			Columns: []string{step.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{step.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StepUpdateOne is the builder for updating a single Step entity.
type StepUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StepMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTitle sets the "title" field.
func (suo *StepUpdateOne) SetTitle(s string) *StepUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *StepUpdateOne) SetNillableTitle(s *string) *StepUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// ClearTitle clears the value of the "title" field.
func (suo *StepUpdateOne) ClearTitle() *StepUpdateOne {
	suo.mutation.ClearTitle()
	return suo
}

// SetDescription sets the "description" field.
func (suo *StepUpdateOne) SetDescription(s string) *StepUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *StepUpdateOne) SetNillableDescription(s *string) *StepUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *StepUpdateOne) ClearDescription() *StepUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetIsChallenge sets the "is_challenge" field.
func (suo *StepUpdateOne) SetIsChallenge(b bool) *StepUpdateOne {
	suo.mutation.SetIsChallenge(b)
	return suo
}

// SetNillableIsChallenge sets the "is_challenge" field if the given value is not nil.
func (suo *StepUpdateOne) SetNillableIsChallenge(b *bool) *StepUpdateOne {
	if b != nil {
		suo.SetIsChallenge(*b)
	}
	return suo
}

// SetTeacherComment sets the "teacher_comment" field.
func (suo *StepUpdateOne) SetTeacherComment(m map[string]interface{}) *StepUpdateOne {
	suo.mutation.SetTeacherComment(m)
	return suo
}

// ClearTeacherComment clears the value of the "teacher_comment" field.
func (suo *StepUpdateOne) ClearTeacherComment() *StepUpdateOne {
	suo.mutation.ClearTeacherComment()
	return suo
}

// SetParentComment sets the "parent_comment" field.
func (suo *StepUpdateOne) SetParentComment(m map[string]interface{}) *StepUpdateOne {
	suo.mutation.SetParentComment(m)
	return suo
}

// ClearParentComment clears the value of the "parent_comment" field.
func (suo *StepUpdateOne) ClearParentComment() *StepUpdateOne {
	suo.mutation.ClearParentComment()
	return suo
}

// SetFriendComment sets the "friend_comment" field.
func (suo *StepUpdateOne) SetFriendComment(m map[string]interface{}) *StepUpdateOne {
	suo.mutation.SetFriendComment(m)
	return suo
}

// ClearFriendComment clears the value of the "friend_comment" field.
func (suo *StepUpdateOne) ClearFriendComment() *StepUpdateOne {
	suo.mutation.ClearFriendComment()
	return suo
}

// SetType sets the "type" field.
func (suo *StepUpdateOne) SetType(s step.Type) *StepUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *StepUpdateOne) SetNillableType(s *step.Type) *StepUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// SetObjectName sets the "object_name" field.
func (suo *StepUpdateOne) SetObjectName(s string) *StepUpdateOne {
	suo.mutation.SetObjectName(s)
	return suo
}

// SetNillableObjectName sets the "object_name" field if the given value is not nil.
func (suo *StepUpdateOne) SetNillableObjectName(s *string) *StepUpdateOne {
	if s != nil {
		suo.SetObjectName(*s)
	}
	return suo
}

// ClearObjectName clears the value of the "object_name" field.
func (suo *StepUpdateOne) ClearObjectName() *StepUpdateOne {
	suo.mutation.ClearObjectName()
	return suo
}

// SetRefTargetID sets the "ref_target_id" field.
func (suo *StepUpdateOne) SetRefTargetID(u uint64) *StepUpdateOne {
	suo.mutation.SetRefTargetID(u)
	return suo
}

// SetNillableRefTargetID sets the "ref_target_id" field if the given value is not nil.
func (suo *StepUpdateOne) SetNillableRefTargetID(u *uint64) *StepUpdateOne {
	if u != nil {
		suo.SetRefTargetID(*u)
	}
	return suo
}

// ClearRefTargetID clears the value of the "ref_target_id" field.
func (suo *StepUpdateOne) ClearRefTargetID() *StepUpdateOne {
	suo.mutation.ClearRefTargetID()
	return suo
}

// SetParentID sets the "parent_id" field.
func (suo *StepUpdateOne) SetParentID(u uint64) *StepUpdateOne {
	suo.mutation.SetParentID(u)
	return suo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (suo *StepUpdateOne) SetNillableParentID(u *uint64) *StepUpdateOne {
	if u != nil {
		suo.SetParentID(*u)
	}
	return suo
}

// ClearParentID clears the value of the "parent_id" field.
func (suo *StepUpdateOne) ClearParentID() *StepUpdateOne {
	suo.mutation.ClearParentID()
	return suo
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (suo *StepUpdateOne) SetTargetID(id uint64) *StepUpdateOne {
	suo.mutation.SetTargetID(id)
	return suo
}

// SetNillableTargetID sets the "target" edge to the Target entity by ID if the given value is not nil.
func (suo *StepUpdateOne) SetNillableTargetID(id *uint64) *StepUpdateOne {
	if id != nil {
		suo = suo.SetTargetID(*id)
	}
	return suo
}

// SetTarget sets the "target" edge to the Target entity.
func (suo *StepUpdateOne) SetTarget(t *Target) *StepUpdateOne {
	return suo.SetTargetID(t.ID)
}

// SetParent sets the "parent" edge to the Step entity.
func (suo *StepUpdateOne) SetParent(s *Step) *StepUpdateOne {
	return suo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the Step entity by IDs.
func (suo *StepUpdateOne) AddChildIDs(ids ...uint64) *StepUpdateOne {
	suo.mutation.AddChildIDs(ids...)
	return suo
}

// AddChildren adds the "children" edges to the Step entity.
func (suo *StepUpdateOne) AddChildren(s ...*Step) *StepUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddChildIDs(ids...)
}

// Mutation returns the StepMutation object of the builder.
func (suo *StepUpdateOne) Mutation() *StepMutation {
	return suo.mutation
}

// ClearTarget clears the "target" edge to the Target entity.
func (suo *StepUpdateOne) ClearTarget() *StepUpdateOne {
	suo.mutation.ClearTarget()
	return suo
}

// ClearParent clears the "parent" edge to the Step entity.
func (suo *StepUpdateOne) ClearParent() *StepUpdateOne {
	suo.mutation.ClearParent()
	return suo
}

// ClearChildren clears all "children" edges to the Step entity.
func (suo *StepUpdateOne) ClearChildren() *StepUpdateOne {
	suo.mutation.ClearChildren()
	return suo
}

// RemoveChildIDs removes the "children" edge to Step entities by IDs.
func (suo *StepUpdateOne) RemoveChildIDs(ids ...uint64) *StepUpdateOne {
	suo.mutation.RemoveChildIDs(ids...)
	return suo
}

// RemoveChildren removes "children" edges to Step entities.
func (suo *StepUpdateOne) RemoveChildren(s ...*Step) *StepUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the StepUpdate builder.
func (suo *StepUpdateOne) Where(ps ...predicate.Step) *StepUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StepUpdateOne) Select(field string, fields ...string) *StepUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Step entity.
func (suo *StepUpdateOne) Save(ctx context.Context) (*Step, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StepUpdateOne) SaveX(ctx context.Context) *Step {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StepUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StepUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StepUpdateOne) check() error {
	if v, ok := suo.mutation.Title(); ok {
		if err := step.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Step.title": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := step.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Step.description": %w`, err)}
		}
	}
	if v, ok := suo.mutation.GetType(); ok {
		if err := step.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Step.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StepUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StepUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StepUpdateOne) sqlSave(ctx context.Context) (_node *Step, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(step.Table, step.Columns, sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Step.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, step.FieldID)
		for _, f := range fields {
			if !step.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != step.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(step.FieldTitle, field.TypeString, value)
	}
	if suo.mutation.TitleCleared() {
		_spec.ClearField(step.FieldTitle, field.TypeString)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(step.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(step.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.IsChallenge(); ok {
		_spec.SetField(step.FieldIsChallenge, field.TypeBool, value)
	}
	if value, ok := suo.mutation.TeacherComment(); ok {
		_spec.SetField(step.FieldTeacherComment, field.TypeJSON, value)
	}
	if suo.mutation.TeacherCommentCleared() {
		_spec.ClearField(step.FieldTeacherComment, field.TypeJSON)
	}
	if value, ok := suo.mutation.ParentComment(); ok {
		_spec.SetField(step.FieldParentComment, field.TypeJSON, value)
	}
	if suo.mutation.ParentCommentCleared() {
		_spec.ClearField(step.FieldParentComment, field.TypeJSON)
	}
	if value, ok := suo.mutation.FriendComment(); ok {
		_spec.SetField(step.FieldFriendComment, field.TypeJSON, value)
	}
	if suo.mutation.FriendCommentCleared() {
		_spec.ClearField(step.FieldFriendComment, field.TypeJSON)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(step.FieldType, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.ObjectName(); ok {
		_spec.SetField(step.FieldObjectName, field.TypeString, value)
	}
	if suo.mutation.ObjectNameCleared() {
		_spec.ClearField(step.FieldObjectName, field.TypeString)
	}
	if suo.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.TargetTable,
			Columns: []string{step.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.TargetTable,
			Columns: []string{step.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.ParentTable,
			Columns: []string{step.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.ParentTable,
			Columns: []string{step.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   step.ChildrenTable,
			Columns: []string{step.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !suo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   step.ChildrenTable,
			Columns: []string{step.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   step.ChildrenTable,
			Columns: []string{step.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Step{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{step.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
