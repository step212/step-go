// Code generated by ent, DO NOT EDIT.

package target

import (
	"step/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldUserID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldDescription, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldCreatedAt, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldStartAt, v))
}

// ChallengeAt applies equality check predicate on the "challenge_at" field. It's identical to ChallengeAtEQ.
func ChallengeAt(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldChallengeAt, v))
}

// DoneAt applies equality check predicate on the "done_at" field. It's identical to DoneAtEQ.
func DoneAt(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldDoneAt, v))
}

// Layer applies equality check predicate on the "layer" field. It's identical to LayerEQ.
func Layer(v uint32) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldLayer, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldParentID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Target {
	return predicate.Target(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Target {
	return predicate.Target(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Target {
	return predicate.Target(sql.FieldContainsFold(FieldUserID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Target {
	return predicate.Target(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Target {
	return predicate.Target(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Target {
	return predicate.Target(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Target {
	return predicate.Target(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Target {
	return predicate.Target(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Target {
	return predicate.Target(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Target {
	return predicate.Target(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Target {
	return predicate.Target(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Target {
	return predicate.Target(sql.FieldContainsFold(FieldType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldCreatedAt, v))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v int64) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v int64) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldStartAt))
}

// ChallengeAtEQ applies the EQ predicate on the "challenge_at" field.
func ChallengeAtEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldChallengeAt, v))
}

// ChallengeAtNEQ applies the NEQ predicate on the "challenge_at" field.
func ChallengeAtNEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldChallengeAt, v))
}

// ChallengeAtIn applies the In predicate on the "challenge_at" field.
func ChallengeAtIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldChallengeAt, vs...))
}

// ChallengeAtNotIn applies the NotIn predicate on the "challenge_at" field.
func ChallengeAtNotIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldChallengeAt, vs...))
}

// ChallengeAtGT applies the GT predicate on the "challenge_at" field.
func ChallengeAtGT(v int64) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldChallengeAt, v))
}

// ChallengeAtGTE applies the GTE predicate on the "challenge_at" field.
func ChallengeAtGTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldChallengeAt, v))
}

// ChallengeAtLT applies the LT predicate on the "challenge_at" field.
func ChallengeAtLT(v int64) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldChallengeAt, v))
}

// ChallengeAtLTE applies the LTE predicate on the "challenge_at" field.
func ChallengeAtLTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldChallengeAt, v))
}

// ChallengeAtIsNil applies the IsNil predicate on the "challenge_at" field.
func ChallengeAtIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldChallengeAt))
}

// ChallengeAtNotNil applies the NotNil predicate on the "challenge_at" field.
func ChallengeAtNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldChallengeAt))
}

// DoneAtEQ applies the EQ predicate on the "done_at" field.
func DoneAtEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldDoneAt, v))
}

// DoneAtNEQ applies the NEQ predicate on the "done_at" field.
func DoneAtNEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldDoneAt, v))
}

// DoneAtIn applies the In predicate on the "done_at" field.
func DoneAtIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldDoneAt, vs...))
}

// DoneAtNotIn applies the NotIn predicate on the "done_at" field.
func DoneAtNotIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldDoneAt, vs...))
}

// DoneAtGT applies the GT predicate on the "done_at" field.
func DoneAtGT(v int64) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldDoneAt, v))
}

// DoneAtGTE applies the GTE predicate on the "done_at" field.
func DoneAtGTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldDoneAt, v))
}

// DoneAtLT applies the LT predicate on the "done_at" field.
func DoneAtLT(v int64) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldDoneAt, v))
}

// DoneAtLTE applies the LTE predicate on the "done_at" field.
func DoneAtLTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldDoneAt, v))
}

// DoneAtIsNil applies the IsNil predicate on the "done_at" field.
func DoneAtIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldDoneAt))
}

// DoneAtNotNil applies the NotNil predicate on the "done_at" field.
func DoneAtNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldDoneAt))
}

// LayerEQ applies the EQ predicate on the "layer" field.
func LayerEQ(v uint32) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldLayer, v))
}

// LayerNEQ applies the NEQ predicate on the "layer" field.
func LayerNEQ(v uint32) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldLayer, v))
}

// LayerIn applies the In predicate on the "layer" field.
func LayerIn(vs ...uint32) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldLayer, vs...))
}

// LayerNotIn applies the NotIn predicate on the "layer" field.
func LayerNotIn(vs ...uint32) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldLayer, vs...))
}

// LayerGT applies the GT predicate on the "layer" field.
func LayerGT(v uint32) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldLayer, v))
}

// LayerGTE applies the GTE predicate on the "layer" field.
func LayerGTE(v uint32) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldLayer, v))
}

// LayerLT applies the LT predicate on the "layer" field.
func LayerLT(v uint32) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldLayer, v))
}

// LayerLTE applies the LTE predicate on the "layer" field.
func LayerLTE(v uint32) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldLayer, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldStatus, vs...))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldParentID))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Target) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Target) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSteps applies the HasEdge predicate on the "steps" edge.
func HasSteps() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StepsTable, StepsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStepsWith applies the HasEdge predicate on the "steps" edge with a given conditions (other predicates).
func HasStepsWith(preds ...predicate.Step) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		step := newStepsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Target) predicate.Target {
	return predicate.Target(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Target) predicate.Target {
	return predicate.Target(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Target) predicate.Target {
	return predicate.Target(sql.NotPredicates(p))
}
