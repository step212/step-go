// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"step/internal/data/ent/step"
	"step/internal/data/ent/target"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Step is the model entity for the Step schema.
type Step struct {
	config `json:"-"`
	// ID of the ent.
	// 自增ID
	ID uint64 `json:"id,omitempty"`
	// 名称
	Title string `json:"title,omitempty"`
	// 描述
	Description string `json:"description,omitempty"`
	// 是否挑战
	IsChallenge bool `json:"is_challenge,omitempty"`
	// 老师评论
	TeacherComment map[string]interface{} `json:"teacher_comment,omitempty"`
	// 家长评论
	ParentComment map[string]interface{} `json:"parent_comment,omitempty"`
	// 朋友评论
	FriendComment map[string]interface{} `json:"friend_comment,omitempty"`
	// 类型
	Type step.Type `json:"type,omitempty"`
	// 对象名
	ObjectName string `json:"object_name,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 目标ID
	RefTargetID uint64 `json:"ref_target_id,omitempty"`
	// 父ID
	ParentID uint64 `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StepQuery when eager-loading is set.
	Edges        StepEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StepEdges holds the relations/edges for other nodes in the graph.
type StepEdges struct {
	// Target holds the value of the target edge.
	Target *Target `json:"target,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Step `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Step `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TargetOrErr returns the Target value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StepEdges) TargetOrErr() (*Target, error) {
	if e.Target != nil {
		return e.Target, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: target.Label}
	}
	return nil, &NotLoadedError{edge: "target"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StepEdges) ParentOrErr() (*Step, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: step.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e StepEdges) ChildrenOrErr() ([]*Step, error) {
	if e.loadedTypes[2] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Step) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case step.FieldTeacherComment, step.FieldParentComment, step.FieldFriendComment:
			values[i] = new([]byte)
		case step.FieldIsChallenge:
			values[i] = new(sql.NullBool)
		case step.FieldID, step.FieldCreatedAt, step.FieldRefTargetID, step.FieldParentID:
			values[i] = new(sql.NullInt64)
		case step.FieldTitle, step.FieldDescription, step.FieldType, step.FieldObjectName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Step fields.
func (s *Step) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case step.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case step.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case step.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case step.FieldIsChallenge:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_challenge", values[i])
			} else if value.Valid {
				s.IsChallenge = value.Bool
			}
		case step.FieldTeacherComment:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_comment", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.TeacherComment); err != nil {
					return fmt.Errorf("unmarshal field teacher_comment: %w", err)
				}
			}
		case step.FieldParentComment:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field parent_comment", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ParentComment); err != nil {
					return fmt.Errorf("unmarshal field parent_comment: %w", err)
				}
			}
		case step.FieldFriendComment:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field friend_comment", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.FriendComment); err != nil {
					return fmt.Errorf("unmarshal field friend_comment: %w", err)
				}
			}
		case step.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = step.Type(value.String)
			}
		case step.FieldObjectName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object_name", values[i])
			} else if value.Valid {
				s.ObjectName = value.String
			}
		case step.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Int64
			}
		case step.FieldRefTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ref_target_id", values[i])
			} else if value.Valid {
				s.RefTargetID = uint64(value.Int64)
			}
		case step.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				s.ParentID = uint64(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Step.
// This includes values selected through modifiers, order, etc.
func (s *Step) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryTarget queries the "target" edge of the Step entity.
func (s *Step) QueryTarget() *TargetQuery {
	return NewStepClient(s.config).QueryTarget(s)
}

// QueryParent queries the "parent" edge of the Step entity.
func (s *Step) QueryParent() *StepQuery {
	return NewStepClient(s.config).QueryParent(s)
}

// QueryChildren queries the "children" edge of the Step entity.
func (s *Step) QueryChildren() *StepQuery {
	return NewStepClient(s.config).QueryChildren(s)
}

// Update returns a builder for updating this Step.
// Note that you need to call Step.Unwrap() before calling this method if this Step
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Step) Update() *StepUpdateOne {
	return NewStepClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Step entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Step) Unwrap() *Step {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Step is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Step) String() string {
	var builder strings.Builder
	builder.WriteString("Step(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("title=")
	builder.WriteString(s.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("is_challenge=")
	builder.WriteString(fmt.Sprintf("%v", s.IsChallenge))
	builder.WriteString(", ")
	builder.WriteString("teacher_comment=")
	builder.WriteString(fmt.Sprintf("%v", s.TeacherComment))
	builder.WriteString(", ")
	builder.WriteString("parent_comment=")
	builder.WriteString(fmt.Sprintf("%v", s.ParentComment))
	builder.WriteString(", ")
	builder.WriteString("friend_comment=")
	builder.WriteString(fmt.Sprintf("%v", s.FriendComment))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteString(", ")
	builder.WriteString("object_name=")
	builder.WriteString(s.ObjectName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("ref_target_id=")
	builder.WriteString(fmt.Sprintf("%v", s.RefTargetID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ParentID))
	builder.WriteByte(')')
	return builder.String()
}

// Steps is a parsable slice of Step.
type Steps []*Step
