// Code generated by ent, DO NOT EDIT.

package show

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the show type in the database.
	Label = "show"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPoster holds the string denoting the poster field in the database.
	FieldPoster = "poster"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldMediaFiles holds the string denoting the media_files field in the database.
	FieldMediaFiles = "media_files"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeShowReserves holds the string denoting the show_reserves edge name in mutations.
	EdgeShowReserves = "show_reserves"
	// Table holds the table name of the show in the database.
	Table = "shows"
	// ShowReservesTable is the table that holds the show_reserves relation/edge.
	ShowReservesTable = "show_reserves"
	// ShowReservesInverseTable is the table name for the ShowReserve entity.
	// It exists in this package in order to avoid circular dependency with the "showreserve" package.
	ShowReservesInverseTable = "show_reserves"
	// ShowReservesColumn is the table column denoting the show_reserves relation/edge.
	ShowReservesColumn = "ref_show_id"
)

// Columns holds all SQL columns for show fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldPoster,
	FieldContent,
	FieldMediaFiles,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt int64
)

// OrderOption defines the ordering options for the Show queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPoster orders the results by the poster field.
func ByPoster(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoster, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByShowReservesCount orders the results by show_reserves count.
func ByShowReservesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShowReservesStep(), opts...)
	}
}

// ByShowReserves orders the results by show_reserves terms.
func ByShowReserves(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShowReservesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newShowReservesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShowReservesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShowReservesTable, ShowReservesColumn),
	)
}
