// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/steprate"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StepRateCreate is the builder for creating a StepRate entity.
type StepRateCreate struct {
	config
	mutation *StepRateMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (src *StepRateCreate) SetUserID(s string) *StepRateCreate {
	src.mutation.SetUserID(s)
	return src
}

// SetTopTargetID sets the "top_target_id" field.
func (src *StepRateCreate) SetTopTargetID(u uint64) *StepRateCreate {
	src.mutation.SetTopTargetID(u)
	return src
}

// SetTargetID sets the "target_id" field.
func (src *StepRateCreate) SetTargetID(u uint64) *StepRateCreate {
	src.mutation.SetTargetID(u)
	return src
}

// SetStepID sets the "step_id" field.
func (src *StepRateCreate) SetStepID(u uint64) *StepRateCreate {
	src.mutation.SetStepID(u)
	return src
}

// SetWeightedValue sets the "weighted_value" field.
func (src *StepRateCreate) SetWeightedValue(f float64) *StepRateCreate {
	src.mutation.SetWeightedValue(f)
	return src
}

// SetTargetReasonableness sets the "target_reasonableness" field.
func (src *StepRateCreate) SetTargetReasonableness(i int32) *StepRateCreate {
	src.mutation.SetTargetReasonableness(i)
	return src
}

// SetTargetClarity sets the "target_clarity" field.
func (src *StepRateCreate) SetTargetClarity(i int32) *StepRateCreate {
	src.mutation.SetTargetClarity(i)
	return src
}

// SetTargetAchievement sets the "target_achievement" field.
func (src *StepRateCreate) SetTargetAchievement(i int32) *StepRateCreate {
	src.mutation.SetTargetAchievement(i)
	return src
}

// SetReflectionImprovement sets the "reflection_improvement" field.
func (src *StepRateCreate) SetReflectionImprovement(i int32) *StepRateCreate {
	src.mutation.SetReflectionImprovement(i)
	return src
}

// SetInnovation sets the "innovation" field.
func (src *StepRateCreate) SetInnovation(i int32) *StepRateCreate {
	src.mutation.SetInnovation(i)
	return src
}

// SetBasicReliability sets the "basic_reliability" field.
func (src *StepRateCreate) SetBasicReliability(i int32) *StepRateCreate {
	src.mutation.SetBasicReliability(i)
	return src
}

// SetSkillImprovement sets the "skill_improvement" field.
func (src *StepRateCreate) SetSkillImprovement(i int32) *StepRateCreate {
	src.mutation.SetSkillImprovement(i)
	return src
}

// SetDifficulty sets the "difficulty" field.
func (src *StepRateCreate) SetDifficulty(i int32) *StepRateCreate {
	src.mutation.SetDifficulty(i)
	return src
}

// SetDate sets the "date" field.
func (src *StepRateCreate) SetDate(t time.Time) *StepRateCreate {
	src.mutation.SetDate(t)
	return src
}

// SetID sets the "id" field.
func (src *StepRateCreate) SetID(u uint64) *StepRateCreate {
	src.mutation.SetID(u)
	return src
}

// Mutation returns the StepRateMutation object of the builder.
func (src *StepRateCreate) Mutation() *StepRateMutation {
	return src.mutation
}

// Save creates the StepRate in the database.
func (src *StepRateCreate) Save(ctx context.Context) (*StepRate, error) {
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *StepRateCreate) SaveX(ctx context.Context) *StepRate {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *StepRateCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *StepRateCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *StepRateCreate) check() error {
	if _, ok := src.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "StepRate.user_id"`)}
	}
	if _, ok := src.mutation.TopTargetID(); !ok {
		return &ValidationError{Name: "top_target_id", err: errors.New(`ent: missing required field "StepRate.top_target_id"`)}
	}
	if _, ok := src.mutation.TargetID(); !ok {
		return &ValidationError{Name: "target_id", err: errors.New(`ent: missing required field "StepRate.target_id"`)}
	}
	if _, ok := src.mutation.StepID(); !ok {
		return &ValidationError{Name: "step_id", err: errors.New(`ent: missing required field "StepRate.step_id"`)}
	}
	if _, ok := src.mutation.WeightedValue(); !ok {
		return &ValidationError{Name: "weighted_value", err: errors.New(`ent: missing required field "StepRate.weighted_value"`)}
	}
	if _, ok := src.mutation.TargetReasonableness(); !ok {
		return &ValidationError{Name: "target_reasonableness", err: errors.New(`ent: missing required field "StepRate.target_reasonableness"`)}
	}
	if _, ok := src.mutation.TargetClarity(); !ok {
		return &ValidationError{Name: "target_clarity", err: errors.New(`ent: missing required field "StepRate.target_clarity"`)}
	}
	if _, ok := src.mutation.TargetAchievement(); !ok {
		return &ValidationError{Name: "target_achievement", err: errors.New(`ent: missing required field "StepRate.target_achievement"`)}
	}
	if _, ok := src.mutation.ReflectionImprovement(); !ok {
		return &ValidationError{Name: "reflection_improvement", err: errors.New(`ent: missing required field "StepRate.reflection_improvement"`)}
	}
	if _, ok := src.mutation.Innovation(); !ok {
		return &ValidationError{Name: "innovation", err: errors.New(`ent: missing required field "StepRate.innovation"`)}
	}
	if _, ok := src.mutation.BasicReliability(); !ok {
		return &ValidationError{Name: "basic_reliability", err: errors.New(`ent: missing required field "StepRate.basic_reliability"`)}
	}
	if _, ok := src.mutation.SkillImprovement(); !ok {
		return &ValidationError{Name: "skill_improvement", err: errors.New(`ent: missing required field "StepRate.skill_improvement"`)}
	}
	if _, ok := src.mutation.Difficulty(); !ok {
		return &ValidationError{Name: "difficulty", err: errors.New(`ent: missing required field "StepRate.difficulty"`)}
	}
	if _, ok := src.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "StepRate.date"`)}
	}
	return nil
}

func (src *StepRateCreate) sqlSave(ctx context.Context) (*StepRate, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *StepRateCreate) createSpec() (*StepRate, *sqlgraph.CreateSpec) {
	var (
		_node = &StepRate{config: src.config}
		_spec = sqlgraph.NewCreateSpec(steprate.Table, sqlgraph.NewFieldSpec(steprate.FieldID, field.TypeUint64))
	)
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.UserID(); ok {
		_spec.SetField(steprate.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := src.mutation.TopTargetID(); ok {
		_spec.SetField(steprate.FieldTopTargetID, field.TypeUint64, value)
		_node.TopTargetID = value
	}
	if value, ok := src.mutation.TargetID(); ok {
		_spec.SetField(steprate.FieldTargetID, field.TypeUint64, value)
		_node.TargetID = value
	}
	if value, ok := src.mutation.StepID(); ok {
		_spec.SetField(steprate.FieldStepID, field.TypeUint64, value)
		_node.StepID = value
	}
	if value, ok := src.mutation.WeightedValue(); ok {
		_spec.SetField(steprate.FieldWeightedValue, field.TypeFloat64, value)
		_node.WeightedValue = value
	}
	if value, ok := src.mutation.TargetReasonableness(); ok {
		_spec.SetField(steprate.FieldTargetReasonableness, field.TypeInt32, value)
		_node.TargetReasonableness = value
	}
	if value, ok := src.mutation.TargetClarity(); ok {
		_spec.SetField(steprate.FieldTargetClarity, field.TypeInt32, value)
		_node.TargetClarity = value
	}
	if value, ok := src.mutation.TargetAchievement(); ok {
		_spec.SetField(steprate.FieldTargetAchievement, field.TypeInt32, value)
		_node.TargetAchievement = value
	}
	if value, ok := src.mutation.ReflectionImprovement(); ok {
		_spec.SetField(steprate.FieldReflectionImprovement, field.TypeInt32, value)
		_node.ReflectionImprovement = value
	}
	if value, ok := src.mutation.Innovation(); ok {
		_spec.SetField(steprate.FieldInnovation, field.TypeInt32, value)
		_node.Innovation = value
	}
	if value, ok := src.mutation.BasicReliability(); ok {
		_spec.SetField(steprate.FieldBasicReliability, field.TypeInt32, value)
		_node.BasicReliability = value
	}
	if value, ok := src.mutation.SkillImprovement(); ok {
		_spec.SetField(steprate.FieldSkillImprovement, field.TypeInt32, value)
		_node.SkillImprovement = value
	}
	if value, ok := src.mutation.Difficulty(); ok {
		_spec.SetField(steprate.FieldDifficulty, field.TypeInt32, value)
		_node.Difficulty = value
	}
	if value, ok := src.mutation.Date(); ok {
		_spec.SetField(steprate.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	return _node, _spec
}

// StepRateCreateBulk is the builder for creating many StepRate entities in bulk.
type StepRateCreateBulk struct {
	config
	err      error
	builders []*StepRateCreate
}

// Save creates the StepRate entities in the database.
func (srcb *StepRateCreateBulk) Save(ctx context.Context) ([]*StepRate, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*StepRate, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StepRateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *StepRateCreateBulk) SaveX(ctx context.Context) []*StepRate {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *StepRateCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *StepRateCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
