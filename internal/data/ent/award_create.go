// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/award"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AwardCreate is the builder for creating a Award entity.
type AwardCreate struct {
	config
	mutation *AwardMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ac *AwardCreate) SetUserID(s string) *AwardCreate {
	ac.mutation.SetUserID(s)
	return ac
}

// SetStatus sets the "status" field.
func (ac *AwardCreate) SetStatus(a award.Status) *AwardCreate {
	ac.mutation.SetStatus(a)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AwardCreate) SetNillableStatus(a *award.Status) *AwardCreate {
	if a != nil {
		ac.SetStatus(*a)
	}
	return ac
}

// SetDescription sets the "description" field.
func (ac *AwardCreate) SetDescription(s string) *AwardCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetSettedFiles sets the "setted_files" field.
func (ac *AwardCreate) SetSettedFiles(s []string) *AwardCreate {
	ac.mutation.SetSettedFiles(s)
	return ac
}

// SetRealizedFiles sets the "realized_files" field.
func (ac *AwardCreate) SetRealizedFiles(s []string) *AwardCreate {
	ac.mutation.SetRealizedFiles(s)
	return ac
}

// SetTargetType sets the "target_type" field.
func (ac *AwardCreate) SetTargetType(at award.TargetType) *AwardCreate {
	ac.mutation.SetTargetType(at)
	return ac
}

// SetScope sets the "scope" field.
func (ac *AwardCreate) SetScope(s string) *AwardCreate {
	ac.mutation.SetScope(s)
	return ac
}

// SetDimension sets the "dimension" field.
func (ac *AwardCreate) SetDimension(s string) *AwardCreate {
	ac.mutation.SetDimension(s)
	return ac
}

// SetThreshold sets the "threshold" field.
func (ac *AwardCreate) SetThreshold(i int32) *AwardCreate {
	ac.mutation.SetThreshold(i)
	return ac
}

// SetSettedAt sets the "setted_at" field.
func (ac *AwardCreate) SetSettedAt(i int64) *AwardCreate {
	ac.mutation.SetSettedAt(i)
	return ac
}

// SetNillableSettedAt sets the "setted_at" field if the given value is not nil.
func (ac *AwardCreate) SetNillableSettedAt(i *int64) *AwardCreate {
	if i != nil {
		ac.SetSettedAt(*i)
	}
	return ac
}

// SetAchievedAt sets the "achieved_at" field.
func (ac *AwardCreate) SetAchievedAt(i int64) *AwardCreate {
	ac.mutation.SetAchievedAt(i)
	return ac
}

// SetNillableAchievedAt sets the "achieved_at" field if the given value is not nil.
func (ac *AwardCreate) SetNillableAchievedAt(i *int64) *AwardCreate {
	if i != nil {
		ac.SetAchievedAt(*i)
	}
	return ac
}

// SetRealizedAt sets the "realized_at" field.
func (ac *AwardCreate) SetRealizedAt(i int64) *AwardCreate {
	ac.mutation.SetRealizedAt(i)
	return ac
}

// SetNillableRealizedAt sets the "realized_at" field if the given value is not nil.
func (ac *AwardCreate) SetNillableRealizedAt(i *int64) *AwardCreate {
	if i != nil {
		ac.SetRealizedAt(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AwardCreate) SetID(u uint64) *AwardCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the AwardMutation object of the builder.
func (ac *AwardCreate) Mutation() *AwardMutation {
	return ac.mutation
}

// Save creates the Award in the database.
func (ac *AwardCreate) Save(ctx context.Context) (*Award, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AwardCreate) SaveX(ctx context.Context) *Award {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AwardCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AwardCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AwardCreate) defaults() {
	if _, ok := ac.mutation.Status(); !ok {
		v := award.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.SettedAt(); !ok {
		v := award.DefaultSettedAt
		ac.mutation.SetSettedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AwardCreate) check() error {
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Award.user_id"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Award.status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := award.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Award.status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Award.description"`)}
	}
	if _, ok := ac.mutation.TargetType(); !ok {
		return &ValidationError{Name: "target_type", err: errors.New(`ent: missing required field "Award.target_type"`)}
	}
	if v, ok := ac.mutation.TargetType(); ok {
		if err := award.TargetTypeValidator(v); err != nil {
			return &ValidationError{Name: "target_type", err: fmt.Errorf(`ent: validator failed for field "Award.target_type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "Award.scope"`)}
	}
	if _, ok := ac.mutation.Dimension(); !ok {
		return &ValidationError{Name: "dimension", err: errors.New(`ent: missing required field "Award.dimension"`)}
	}
	if _, ok := ac.mutation.Threshold(); !ok {
		return &ValidationError{Name: "threshold", err: errors.New(`ent: missing required field "Award.threshold"`)}
	}
	if _, ok := ac.mutation.SettedAt(); !ok {
		return &ValidationError{Name: "setted_at", err: errors.New(`ent: missing required field "Award.setted_at"`)}
	}
	return nil
}

func (ac *AwardCreate) sqlSave(ctx context.Context) (*Award, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AwardCreate) createSpec() (*Award, *sqlgraph.CreateSpec) {
	var (
		_node = &Award{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(award.Table, sqlgraph.NewFieldSpec(award.FieldID, field.TypeUint64))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.SetField(award.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(award.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(award.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.SettedFiles(); ok {
		_spec.SetField(award.FieldSettedFiles, field.TypeJSON, value)
		_node.SettedFiles = value
	}
	if value, ok := ac.mutation.RealizedFiles(); ok {
		_spec.SetField(award.FieldRealizedFiles, field.TypeJSON, value)
		_node.RealizedFiles = value
	}
	if value, ok := ac.mutation.TargetType(); ok {
		_spec.SetField(award.FieldTargetType, field.TypeEnum, value)
		_node.TargetType = value
	}
	if value, ok := ac.mutation.Scope(); ok {
		_spec.SetField(award.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := ac.mutation.Dimension(); ok {
		_spec.SetField(award.FieldDimension, field.TypeString, value)
		_node.Dimension = value
	}
	if value, ok := ac.mutation.Threshold(); ok {
		_spec.SetField(award.FieldThreshold, field.TypeInt32, value)
		_node.Threshold = value
	}
	if value, ok := ac.mutation.SettedAt(); ok {
		_spec.SetField(award.FieldSettedAt, field.TypeInt64, value)
		_node.SettedAt = value
	}
	if value, ok := ac.mutation.AchievedAt(); ok {
		_spec.SetField(award.FieldAchievedAt, field.TypeInt64, value)
		_node.AchievedAt = value
	}
	if value, ok := ac.mutation.RealizedAt(); ok {
		_spec.SetField(award.FieldRealizedAt, field.TypeInt64, value)
		_node.RealizedAt = value
	}
	return _node, _spec
}

// AwardCreateBulk is the builder for creating many Award entities in bulk.
type AwardCreateBulk struct {
	config
	err      error
	builders []*AwardCreate
}

// Save creates the Award entities in the database.
func (acb *AwardCreateBulk) Save(ctx context.Context) ([]*Award, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Award, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AwardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AwardCreateBulk) SaveX(ctx context.Context) []*Award {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AwardCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AwardCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
