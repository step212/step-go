// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/predicate"
	"step/internal/data/ent/step"
	"step/internal/data/ent/target"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TargetUpdate is the builder for updating Target entities.
type TargetUpdate struct {
	config
	hooks     []Hook
	mutation  *TargetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TargetUpdate builder.
func (tu *TargetUpdate) Where(ps ...predicate.Target) *TargetUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TargetUpdate) SetUserID(s string) *TargetUpdate {
	tu.mutation.SetUserID(s)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableUserID(s *string) *TargetUpdate {
	if s != nil {
		tu.SetUserID(*s)
	}
	return tu
}

// SetTitle sets the "title" field.
func (tu *TargetUpdate) SetTitle(s string) *TargetUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableTitle(s *string) *TargetUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TargetUpdate) SetDescription(s string) *TargetUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableDescription(s *string) *TargetUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetType sets the "type" field.
func (tu *TargetUpdate) SetType(s string) *TargetUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableType(s *string) *TargetUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// SetStartAt sets the "start_at" field.
func (tu *TargetUpdate) SetStartAt(i int64) *TargetUpdate {
	tu.mutation.ResetStartAt()
	tu.mutation.SetStartAt(i)
	return tu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableStartAt(i *int64) *TargetUpdate {
	if i != nil {
		tu.SetStartAt(*i)
	}
	return tu
}

// AddStartAt adds i to the "start_at" field.
func (tu *TargetUpdate) AddStartAt(i int64) *TargetUpdate {
	tu.mutation.AddStartAt(i)
	return tu
}

// ClearStartAt clears the value of the "start_at" field.
func (tu *TargetUpdate) ClearStartAt() *TargetUpdate {
	tu.mutation.ClearStartAt()
	return tu
}

// SetChallengeAt sets the "challenge_at" field.
func (tu *TargetUpdate) SetChallengeAt(i int64) *TargetUpdate {
	tu.mutation.ResetChallengeAt()
	tu.mutation.SetChallengeAt(i)
	return tu
}

// SetNillableChallengeAt sets the "challenge_at" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableChallengeAt(i *int64) *TargetUpdate {
	if i != nil {
		tu.SetChallengeAt(*i)
	}
	return tu
}

// AddChallengeAt adds i to the "challenge_at" field.
func (tu *TargetUpdate) AddChallengeAt(i int64) *TargetUpdate {
	tu.mutation.AddChallengeAt(i)
	return tu
}

// ClearChallengeAt clears the value of the "challenge_at" field.
func (tu *TargetUpdate) ClearChallengeAt() *TargetUpdate {
	tu.mutation.ClearChallengeAt()
	return tu
}

// SetDoneAt sets the "done_at" field.
func (tu *TargetUpdate) SetDoneAt(i int64) *TargetUpdate {
	tu.mutation.ResetDoneAt()
	tu.mutation.SetDoneAt(i)
	return tu
}

// SetNillableDoneAt sets the "done_at" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableDoneAt(i *int64) *TargetUpdate {
	if i != nil {
		tu.SetDoneAt(*i)
	}
	return tu
}

// AddDoneAt adds i to the "done_at" field.
func (tu *TargetUpdate) AddDoneAt(i int64) *TargetUpdate {
	tu.mutation.AddDoneAt(i)
	return tu
}

// ClearDoneAt clears the value of the "done_at" field.
func (tu *TargetUpdate) ClearDoneAt() *TargetUpdate {
	tu.mutation.ClearDoneAt()
	return tu
}

// SetLayer sets the "layer" field.
func (tu *TargetUpdate) SetLayer(u uint32) *TargetUpdate {
	tu.mutation.ResetLayer()
	tu.mutation.SetLayer(u)
	return tu
}

// SetNillableLayer sets the "layer" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableLayer(u *uint32) *TargetUpdate {
	if u != nil {
		tu.SetLayer(*u)
	}
	return tu
}

// AddLayer adds u to the "layer" field.
func (tu *TargetUpdate) AddLayer(u int32) *TargetUpdate {
	tu.mutation.AddLayer(u)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TargetUpdate) SetStatus(t target.Status) *TargetUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableStatus(t *target.Status) *TargetUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetParentID sets the "parent_id" field.
func (tu *TargetUpdate) SetParentID(u uint64) *TargetUpdate {
	tu.mutation.SetParentID(u)
	return tu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableParentID(u *uint64) *TargetUpdate {
	if u != nil {
		tu.SetParentID(*u)
	}
	return tu
}

// ClearParentID clears the value of the "parent_id" field.
func (tu *TargetUpdate) ClearParentID() *TargetUpdate {
	tu.mutation.ClearParentID()
	return tu
}

// SetParent sets the "parent" edge to the Target entity.
func (tu *TargetUpdate) SetParent(t *Target) *TargetUpdate {
	return tu.SetParentID(t.ID)
}

// AddChildIDs adds the "children" edge to the Target entity by IDs.
func (tu *TargetUpdate) AddChildIDs(ids ...uint64) *TargetUpdate {
	tu.mutation.AddChildIDs(ids...)
	return tu
}

// AddChildren adds the "children" edges to the Target entity.
func (tu *TargetUpdate) AddChildren(t ...*Target) *TargetUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddChildIDs(ids...)
}

// AddStepIDs adds the "steps" edge to the Step entity by IDs.
func (tu *TargetUpdate) AddStepIDs(ids ...uint64) *TargetUpdate {
	tu.mutation.AddStepIDs(ids...)
	return tu
}

// AddSteps adds the "steps" edges to the Step entity.
func (tu *TargetUpdate) AddSteps(s ...*Step) *TargetUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddStepIDs(ids...)
}

// Mutation returns the TargetMutation object of the builder.
func (tu *TargetUpdate) Mutation() *TargetMutation {
	return tu.mutation
}

// ClearParent clears the "parent" edge to the Target entity.
func (tu *TargetUpdate) ClearParent() *TargetUpdate {
	tu.mutation.ClearParent()
	return tu
}

// ClearChildren clears all "children" edges to the Target entity.
func (tu *TargetUpdate) ClearChildren() *TargetUpdate {
	tu.mutation.ClearChildren()
	return tu
}

// RemoveChildIDs removes the "children" edge to Target entities by IDs.
func (tu *TargetUpdate) RemoveChildIDs(ids ...uint64) *TargetUpdate {
	tu.mutation.RemoveChildIDs(ids...)
	return tu
}

// RemoveChildren removes "children" edges to Target entities.
func (tu *TargetUpdate) RemoveChildren(t ...*Target) *TargetUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveChildIDs(ids...)
}

// ClearSteps clears all "steps" edges to the Step entity.
func (tu *TargetUpdate) ClearSteps() *TargetUpdate {
	tu.mutation.ClearSteps()
	return tu
}

// RemoveStepIDs removes the "steps" edge to Step entities by IDs.
func (tu *TargetUpdate) RemoveStepIDs(ids ...uint64) *TargetUpdate {
	tu.mutation.RemoveStepIDs(ids...)
	return tu
}

// RemoveSteps removes "steps" edges to Step entities.
func (tu *TargetUpdate) RemoveSteps(s ...*Step) *TargetUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveStepIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TargetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TargetUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TargetUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TargetUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TargetUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := target.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Target.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := target.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Target.description": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := target.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Target.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TargetUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TargetUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TargetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(target.Table, target.Columns, sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UserID(); ok {
		_spec.SetField(target.FieldUserID, field.TypeString, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(target.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(target.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(target.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.StartAt(); ok {
		_spec.SetField(target.FieldStartAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedStartAt(); ok {
		_spec.AddField(target.FieldStartAt, field.TypeInt64, value)
	}
	if tu.mutation.StartAtCleared() {
		_spec.ClearField(target.FieldStartAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.ChallengeAt(); ok {
		_spec.SetField(target.FieldChallengeAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedChallengeAt(); ok {
		_spec.AddField(target.FieldChallengeAt, field.TypeInt64, value)
	}
	if tu.mutation.ChallengeAtCleared() {
		_spec.ClearField(target.FieldChallengeAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.DoneAt(); ok {
		_spec.SetField(target.FieldDoneAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedDoneAt(); ok {
		_spec.AddField(target.FieldDoneAt, field.TypeInt64, value)
	}
	if tu.mutation.DoneAtCleared() {
		_spec.ClearField(target.FieldDoneAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.Layer(); ok {
		_spec.SetField(target.FieldLayer, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.AddedLayer(); ok {
		_spec.AddField(target.FieldLayer, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(target.FieldStatus, field.TypeEnum, value)
	}
	if tu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.ParentTable,
			Columns: []string{target.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.ParentTable,
			Columns: []string{target.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.ChildrenTable,
			Columns: []string{target.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !tu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.ChildrenTable,
			Columns: []string{target.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.ChildrenTable,
			Columns: []string{target.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.StepsTable,
			Columns: []string{target.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedStepsIDs(); len(nodes) > 0 && !tu.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.StepsTable,
			Columns: []string{target.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.StepsTable,
			Columns: []string{target.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{target.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TargetUpdateOne is the builder for updating a single Target entity.
type TargetUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TargetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (tuo *TargetUpdateOne) SetUserID(s string) *TargetUpdateOne {
	tuo.mutation.SetUserID(s)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableUserID(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetUserID(*s)
	}
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TargetUpdateOne) SetTitle(s string) *TargetUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableTitle(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TargetUpdateOne) SetDescription(s string) *TargetUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableDescription(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetType sets the "type" field.
func (tuo *TargetUpdateOne) SetType(s string) *TargetUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableType(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// SetStartAt sets the "start_at" field.
func (tuo *TargetUpdateOne) SetStartAt(i int64) *TargetUpdateOne {
	tuo.mutation.ResetStartAt()
	tuo.mutation.SetStartAt(i)
	return tuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableStartAt(i *int64) *TargetUpdateOne {
	if i != nil {
		tuo.SetStartAt(*i)
	}
	return tuo
}

// AddStartAt adds i to the "start_at" field.
func (tuo *TargetUpdateOne) AddStartAt(i int64) *TargetUpdateOne {
	tuo.mutation.AddStartAt(i)
	return tuo
}

// ClearStartAt clears the value of the "start_at" field.
func (tuo *TargetUpdateOne) ClearStartAt() *TargetUpdateOne {
	tuo.mutation.ClearStartAt()
	return tuo
}

// SetChallengeAt sets the "challenge_at" field.
func (tuo *TargetUpdateOne) SetChallengeAt(i int64) *TargetUpdateOne {
	tuo.mutation.ResetChallengeAt()
	tuo.mutation.SetChallengeAt(i)
	return tuo
}

// SetNillableChallengeAt sets the "challenge_at" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableChallengeAt(i *int64) *TargetUpdateOne {
	if i != nil {
		tuo.SetChallengeAt(*i)
	}
	return tuo
}

// AddChallengeAt adds i to the "challenge_at" field.
func (tuo *TargetUpdateOne) AddChallengeAt(i int64) *TargetUpdateOne {
	tuo.mutation.AddChallengeAt(i)
	return tuo
}

// ClearChallengeAt clears the value of the "challenge_at" field.
func (tuo *TargetUpdateOne) ClearChallengeAt() *TargetUpdateOne {
	tuo.mutation.ClearChallengeAt()
	return tuo
}

// SetDoneAt sets the "done_at" field.
func (tuo *TargetUpdateOne) SetDoneAt(i int64) *TargetUpdateOne {
	tuo.mutation.ResetDoneAt()
	tuo.mutation.SetDoneAt(i)
	return tuo
}

// SetNillableDoneAt sets the "done_at" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableDoneAt(i *int64) *TargetUpdateOne {
	if i != nil {
		tuo.SetDoneAt(*i)
	}
	return tuo
}

// AddDoneAt adds i to the "done_at" field.
func (tuo *TargetUpdateOne) AddDoneAt(i int64) *TargetUpdateOne {
	tuo.mutation.AddDoneAt(i)
	return tuo
}

// ClearDoneAt clears the value of the "done_at" field.
func (tuo *TargetUpdateOne) ClearDoneAt() *TargetUpdateOne {
	tuo.mutation.ClearDoneAt()
	return tuo
}

// SetLayer sets the "layer" field.
func (tuo *TargetUpdateOne) SetLayer(u uint32) *TargetUpdateOne {
	tuo.mutation.ResetLayer()
	tuo.mutation.SetLayer(u)
	return tuo
}

// SetNillableLayer sets the "layer" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableLayer(u *uint32) *TargetUpdateOne {
	if u != nil {
		tuo.SetLayer(*u)
	}
	return tuo
}

// AddLayer adds u to the "layer" field.
func (tuo *TargetUpdateOne) AddLayer(u int32) *TargetUpdateOne {
	tuo.mutation.AddLayer(u)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TargetUpdateOne) SetStatus(t target.Status) *TargetUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableStatus(t *target.Status) *TargetUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetParentID sets the "parent_id" field.
func (tuo *TargetUpdateOne) SetParentID(u uint64) *TargetUpdateOne {
	tuo.mutation.SetParentID(u)
	return tuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableParentID(u *uint64) *TargetUpdateOne {
	if u != nil {
		tuo.SetParentID(*u)
	}
	return tuo
}

// ClearParentID clears the value of the "parent_id" field.
func (tuo *TargetUpdateOne) ClearParentID() *TargetUpdateOne {
	tuo.mutation.ClearParentID()
	return tuo
}

// SetParent sets the "parent" edge to the Target entity.
func (tuo *TargetUpdateOne) SetParent(t *Target) *TargetUpdateOne {
	return tuo.SetParentID(t.ID)
}

// AddChildIDs adds the "children" edge to the Target entity by IDs.
func (tuo *TargetUpdateOne) AddChildIDs(ids ...uint64) *TargetUpdateOne {
	tuo.mutation.AddChildIDs(ids...)
	return tuo
}

// AddChildren adds the "children" edges to the Target entity.
func (tuo *TargetUpdateOne) AddChildren(t ...*Target) *TargetUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddChildIDs(ids...)
}

// AddStepIDs adds the "steps" edge to the Step entity by IDs.
func (tuo *TargetUpdateOne) AddStepIDs(ids ...uint64) *TargetUpdateOne {
	tuo.mutation.AddStepIDs(ids...)
	return tuo
}

// AddSteps adds the "steps" edges to the Step entity.
func (tuo *TargetUpdateOne) AddSteps(s ...*Step) *TargetUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddStepIDs(ids...)
}

// Mutation returns the TargetMutation object of the builder.
func (tuo *TargetUpdateOne) Mutation() *TargetMutation {
	return tuo.mutation
}

// ClearParent clears the "parent" edge to the Target entity.
func (tuo *TargetUpdateOne) ClearParent() *TargetUpdateOne {
	tuo.mutation.ClearParent()
	return tuo
}

// ClearChildren clears all "children" edges to the Target entity.
func (tuo *TargetUpdateOne) ClearChildren() *TargetUpdateOne {
	tuo.mutation.ClearChildren()
	return tuo
}

// RemoveChildIDs removes the "children" edge to Target entities by IDs.
func (tuo *TargetUpdateOne) RemoveChildIDs(ids ...uint64) *TargetUpdateOne {
	tuo.mutation.RemoveChildIDs(ids...)
	return tuo
}

// RemoveChildren removes "children" edges to Target entities.
func (tuo *TargetUpdateOne) RemoveChildren(t ...*Target) *TargetUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveChildIDs(ids...)
}

// ClearSteps clears all "steps" edges to the Step entity.
func (tuo *TargetUpdateOne) ClearSteps() *TargetUpdateOne {
	tuo.mutation.ClearSteps()
	return tuo
}

// RemoveStepIDs removes the "steps" edge to Step entities by IDs.
func (tuo *TargetUpdateOne) RemoveStepIDs(ids ...uint64) *TargetUpdateOne {
	tuo.mutation.RemoveStepIDs(ids...)
	return tuo
}

// RemoveSteps removes "steps" edges to Step entities.
func (tuo *TargetUpdateOne) RemoveSteps(s ...*Step) *TargetUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveStepIDs(ids...)
}

// Where appends a list predicates to the TargetUpdate builder.
func (tuo *TargetUpdateOne) Where(ps ...predicate.Target) *TargetUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TargetUpdateOne) Select(field string, fields ...string) *TargetUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Target entity.
func (tuo *TargetUpdateOne) Save(ctx context.Context) (*Target, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TargetUpdateOne) SaveX(ctx context.Context) *Target {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TargetUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TargetUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TargetUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := target.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Target.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := target.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Target.description": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := target.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Target.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TargetUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TargetUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TargetUpdateOne) sqlSave(ctx context.Context) (_node *Target, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(target.Table, target.Columns, sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Target.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, target.FieldID)
		for _, f := range fields {
			if !target.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != target.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UserID(); ok {
		_spec.SetField(target.FieldUserID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(target.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(target.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(target.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.StartAt(); ok {
		_spec.SetField(target.FieldStartAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedStartAt(); ok {
		_spec.AddField(target.FieldStartAt, field.TypeInt64, value)
	}
	if tuo.mutation.StartAtCleared() {
		_spec.ClearField(target.FieldStartAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.ChallengeAt(); ok {
		_spec.SetField(target.FieldChallengeAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedChallengeAt(); ok {
		_spec.AddField(target.FieldChallengeAt, field.TypeInt64, value)
	}
	if tuo.mutation.ChallengeAtCleared() {
		_spec.ClearField(target.FieldChallengeAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.DoneAt(); ok {
		_spec.SetField(target.FieldDoneAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedDoneAt(); ok {
		_spec.AddField(target.FieldDoneAt, field.TypeInt64, value)
	}
	if tuo.mutation.DoneAtCleared() {
		_spec.ClearField(target.FieldDoneAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.Layer(); ok {
		_spec.SetField(target.FieldLayer, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.AddedLayer(); ok {
		_spec.AddField(target.FieldLayer, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(target.FieldStatus, field.TypeEnum, value)
	}
	if tuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.ParentTable,
			Columns: []string{target.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.ParentTable,
			Columns: []string{target.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.ChildrenTable,
			Columns: []string{target.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !tuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.ChildrenTable,
			Columns: []string{target.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.ChildrenTable,
			Columns: []string{target.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.StepsTable,
			Columns: []string{target.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedStepsIDs(); len(nodes) > 0 && !tuo.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.StepsTable,
			Columns: []string{target.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.StepsTable,
			Columns: []string{target.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(step.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Target{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{target.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
