// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/show"
	"step/internal/data/ent/showreserve"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShowReserveCreate is the builder for creating a ShowReserve entity.
type ShowReserveCreate struct {
	config
	mutation *ShowReserveMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (src *ShowReserveCreate) SetUserID(s string) *ShowReserveCreate {
	src.mutation.SetUserID(s)
	return src
}

// SetStatus sets the "status" field.
func (src *ShowReserveCreate) SetStatus(s showreserve.Status) *ShowReserveCreate {
	src.mutation.SetStatus(s)
	return src
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (src *ShowReserveCreate) SetNillableStatus(s *showreserve.Status) *ShowReserveCreate {
	if s != nil {
		src.SetStatus(*s)
	}
	return src
}

// SetMemories sets the "memories" field.
func (src *ShowReserveCreate) SetMemories(s []string) *ShowReserveCreate {
	src.mutation.SetMemories(s)
	return src
}

// SetCreatedAt sets the "created_at" field.
func (src *ShowReserveCreate) SetCreatedAt(i int64) *ShowReserveCreate {
	src.mutation.SetCreatedAt(i)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *ShowReserveCreate) SetNillableCreatedAt(i *int64) *ShowReserveCreate {
	if i != nil {
		src.SetCreatedAt(*i)
	}
	return src
}

// SetRefShowID sets the "ref_show_id" field.
func (src *ShowReserveCreate) SetRefShowID(u uint64) *ShowReserveCreate {
	src.mutation.SetRefShowID(u)
	return src
}

// SetNillableRefShowID sets the "ref_show_id" field if the given value is not nil.
func (src *ShowReserveCreate) SetNillableRefShowID(u *uint64) *ShowReserveCreate {
	if u != nil {
		src.SetRefShowID(*u)
	}
	return src
}

// SetID sets the "id" field.
func (src *ShowReserveCreate) SetID(u uint64) *ShowReserveCreate {
	src.mutation.SetID(u)
	return src
}

// SetShowID sets the "show" edge to the Show entity by ID.
func (src *ShowReserveCreate) SetShowID(id uint64) *ShowReserveCreate {
	src.mutation.SetShowID(id)
	return src
}

// SetNillableShowID sets the "show" edge to the Show entity by ID if the given value is not nil.
func (src *ShowReserveCreate) SetNillableShowID(id *uint64) *ShowReserveCreate {
	if id != nil {
		src = src.SetShowID(*id)
	}
	return src
}

// SetShow sets the "show" edge to the Show entity.
func (src *ShowReserveCreate) SetShow(s *Show) *ShowReserveCreate {
	return src.SetShowID(s.ID)
}

// Mutation returns the ShowReserveMutation object of the builder.
func (src *ShowReserveCreate) Mutation() *ShowReserveMutation {
	return src.mutation
}

// Save creates the ShowReserve in the database.
func (src *ShowReserveCreate) Save(ctx context.Context) (*ShowReserve, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *ShowReserveCreate) SaveX(ctx context.Context) *ShowReserve {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *ShowReserveCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *ShowReserveCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *ShowReserveCreate) defaults() {
	if _, ok := src.mutation.Status(); !ok {
		v := showreserve.DefaultStatus
		src.mutation.SetStatus(v)
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := showreserve.DefaultCreatedAt
		src.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *ShowReserveCreate) check() error {
	if _, ok := src.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ShowReserve.user_id"`)}
	}
	if _, ok := src.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ShowReserve.status"`)}
	}
	if v, ok := src.mutation.Status(); ok {
		if err := showreserve.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShowReserve.status": %w`, err)}
		}
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ShowReserve.created_at"`)}
	}
	return nil
}

func (src *ShowReserveCreate) sqlSave(ctx context.Context) (*ShowReserve, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *ShowReserveCreate) createSpec() (*ShowReserve, *sqlgraph.CreateSpec) {
	var (
		_node = &ShowReserve{config: src.config}
		_spec = sqlgraph.NewCreateSpec(showreserve.Table, sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64))
	)
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.UserID(); ok {
		_spec.SetField(showreserve.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(showreserve.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := src.mutation.Memories(); ok {
		_spec.SetField(showreserve.FieldMemories, field.TypeJSON, value)
		_node.Memories = value
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(showreserve.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if nodes := src.mutation.ShowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   showreserve.ShowTable,
			Columns: []string{showreserve.ShowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(show.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RefShowID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShowReserveCreateBulk is the builder for creating many ShowReserve entities in bulk.
type ShowReserveCreateBulk struct {
	config
	err      error
	builders []*ShowReserveCreate
}

// Save creates the ShowReserve entities in the database.
func (srcb *ShowReserveCreateBulk) Save(ctx context.Context) ([]*ShowReserve, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*ShowReserve, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShowReserveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *ShowReserveCreateBulk) SaveX(ctx context.Context) []*ShowReserve {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *ShowReserveCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *ShowReserveCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
