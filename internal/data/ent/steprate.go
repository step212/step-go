// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"step/internal/data/ent/steprate"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StepRate is the model entity for the StepRate schema.
type StepRate struct {
	config `json:"-"`
	// ID of the ent.
	// 自增ID
	ID uint64 `json:"id,omitempty"`
	// User ID
	UserID string `json:"user_id,omitempty"`
	// Top Target ID
	TopTargetID uint64 `json:"top_target_id,omitempty"`
	// Target ID
	TargetID uint64 `json:"target_id,omitempty"`
	// Step ID
	StepID uint64 `json:"step_id,omitempty"`
	// 加权值
	WeightedValue float64 `json:"weighted_value,omitempty"`
	// 目标合理性
	TargetReasonableness int32 `json:"target_reasonableness,omitempty"`
	// 目标明确性
	TargetClarity int32 `json:"target_clarity,omitempty"`
	// 目标达成度
	TargetAchievement int32 `json:"target_achievement,omitempty"`
	// 反思与改进
	ReflectionImprovement int32 `json:"reflection_improvement,omitempty"`
	// 创新性
	Innovation int32 `json:"innovation,omitempty"`
	// 基础牢靠
	BasicReliability int32 `json:"basic_reliability,omitempty"`
	// 技能提升
	SkillImprovement int32 `json:"skill_improvement,omitempty"`
	// 困难度
	Difficulty int32 `json:"difficulty,omitempty"`
	// 日期
	Date         time.Time `json:"date,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StepRate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case steprate.FieldWeightedValue:
			values[i] = new(sql.NullFloat64)
		case steprate.FieldID, steprate.FieldTopTargetID, steprate.FieldTargetID, steprate.FieldStepID, steprate.FieldTargetReasonableness, steprate.FieldTargetClarity, steprate.FieldTargetAchievement, steprate.FieldReflectionImprovement, steprate.FieldInnovation, steprate.FieldBasicReliability, steprate.FieldSkillImprovement, steprate.FieldDifficulty:
			values[i] = new(sql.NullInt64)
		case steprate.FieldUserID:
			values[i] = new(sql.NullString)
		case steprate.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StepRate fields.
func (sr *StepRate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case steprate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = uint64(value.Int64)
		case steprate.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sr.UserID = value.String
			}
		case steprate.FieldTopTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field top_target_id", values[i])
			} else if value.Valid {
				sr.TopTargetID = uint64(value.Int64)
			}
		case steprate.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_id", values[i])
			} else if value.Valid {
				sr.TargetID = uint64(value.Int64)
			}
		case steprate.FieldStepID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step_id", values[i])
			} else if value.Valid {
				sr.StepID = uint64(value.Int64)
			}
		case steprate.FieldWeightedValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weighted_value", values[i])
			} else if value.Valid {
				sr.WeightedValue = value.Float64
			}
		case steprate.FieldTargetReasonableness:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_reasonableness", values[i])
			} else if value.Valid {
				sr.TargetReasonableness = int32(value.Int64)
			}
		case steprate.FieldTargetClarity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_clarity", values[i])
			} else if value.Valid {
				sr.TargetClarity = int32(value.Int64)
			}
		case steprate.FieldTargetAchievement:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_achievement", values[i])
			} else if value.Valid {
				sr.TargetAchievement = int32(value.Int64)
			}
		case steprate.FieldReflectionImprovement:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reflection_improvement", values[i])
			} else if value.Valid {
				sr.ReflectionImprovement = int32(value.Int64)
			}
		case steprate.FieldInnovation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field innovation", values[i])
			} else if value.Valid {
				sr.Innovation = int32(value.Int64)
			}
		case steprate.FieldBasicReliability:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field basic_reliability", values[i])
			} else if value.Valid {
				sr.BasicReliability = int32(value.Int64)
			}
		case steprate.FieldSkillImprovement:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field skill_improvement", values[i])
			} else if value.Valid {
				sr.SkillImprovement = int32(value.Int64)
			}
		case steprate.FieldDifficulty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				sr.Difficulty = int32(value.Int64)
			}
		case steprate.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				sr.Date = value.Time
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StepRate.
// This includes values selected through modifiers, order, etc.
func (sr *StepRate) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// Update returns a builder for updating this StepRate.
// Note that you need to call StepRate.Unwrap() before calling this method if this StepRate
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *StepRate) Update() *StepRateUpdateOne {
	return NewStepRateClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the StepRate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *StepRate) Unwrap() *StepRate {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: StepRate is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *StepRate) String() string {
	var builder strings.Builder
	builder.WriteString("StepRate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(sr.UserID)
	builder.WriteString(", ")
	builder.WriteString("top_target_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.TopTargetID))
	builder.WriteString(", ")
	builder.WriteString("target_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.TargetID))
	builder.WriteString(", ")
	builder.WriteString("step_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.StepID))
	builder.WriteString(", ")
	builder.WriteString("weighted_value=")
	builder.WriteString(fmt.Sprintf("%v", sr.WeightedValue))
	builder.WriteString(", ")
	builder.WriteString("target_reasonableness=")
	builder.WriteString(fmt.Sprintf("%v", sr.TargetReasonableness))
	builder.WriteString(", ")
	builder.WriteString("target_clarity=")
	builder.WriteString(fmt.Sprintf("%v", sr.TargetClarity))
	builder.WriteString(", ")
	builder.WriteString("target_achievement=")
	builder.WriteString(fmt.Sprintf("%v", sr.TargetAchievement))
	builder.WriteString(", ")
	builder.WriteString("reflection_improvement=")
	builder.WriteString(fmt.Sprintf("%v", sr.ReflectionImprovement))
	builder.WriteString(", ")
	builder.WriteString("innovation=")
	builder.WriteString(fmt.Sprintf("%v", sr.Innovation))
	builder.WriteString(", ")
	builder.WriteString("basic_reliability=")
	builder.WriteString(fmt.Sprintf("%v", sr.BasicReliability))
	builder.WriteString(", ")
	builder.WriteString("skill_improvement=")
	builder.WriteString(fmt.Sprintf("%v", sr.SkillImprovement))
	builder.WriteString(", ")
	builder.WriteString("difficulty=")
	builder.WriteString(fmt.Sprintf("%v", sr.Difficulty))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(sr.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StepRates is a parsable slice of StepRate.
type StepRates []*StepRate
