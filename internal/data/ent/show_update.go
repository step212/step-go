// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/predicate"
	"step/internal/data/ent/show"
	"step/internal/data/ent/showreserve"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ShowUpdate is the builder for updating Show entities.
type ShowUpdate struct {
	config
	hooks     []Hook
	mutation  *ShowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShowUpdate builder.
func (su *ShowUpdate) Where(ps ...predicate.Show) *ShowUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetType sets the "type" field.
func (su *ShowUpdate) SetType(s string) *ShowUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *ShowUpdate) SetNillableType(s *string) *ShowUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// SetPoster sets the "poster" field.
func (su *ShowUpdate) SetPoster(s string) *ShowUpdate {
	su.mutation.SetPoster(s)
	return su
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (su *ShowUpdate) SetNillablePoster(s *string) *ShowUpdate {
	if s != nil {
		su.SetPoster(*s)
	}
	return su
}

// ClearPoster clears the value of the "poster" field.
func (su *ShowUpdate) ClearPoster() *ShowUpdate {
	su.mutation.ClearPoster()
	return su
}

// SetContent sets the "content" field.
func (su *ShowUpdate) SetContent(s string) *ShowUpdate {
	su.mutation.SetContent(s)
	return su
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (su *ShowUpdate) SetNillableContent(s *string) *ShowUpdate {
	if s != nil {
		su.SetContent(*s)
	}
	return su
}

// SetMediaFiles sets the "media_files" field.
func (su *ShowUpdate) SetMediaFiles(s []string) *ShowUpdate {
	su.mutation.SetMediaFiles(s)
	return su
}

// AppendMediaFiles appends s to the "media_files" field.
func (su *ShowUpdate) AppendMediaFiles(s []string) *ShowUpdate {
	su.mutation.AppendMediaFiles(s)
	return su
}

// ClearMediaFiles clears the value of the "media_files" field.
func (su *ShowUpdate) ClearMediaFiles() *ShowUpdate {
	su.mutation.ClearMediaFiles()
	return su
}

// AddShowReserfIDs adds the "show_reserves" edge to the ShowReserve entity by IDs.
func (su *ShowUpdate) AddShowReserfIDs(ids ...uint64) *ShowUpdate {
	su.mutation.AddShowReserfIDs(ids...)
	return su
}

// AddShowReserves adds the "show_reserves" edges to the ShowReserve entity.
func (su *ShowUpdate) AddShowReserves(s ...*ShowReserve) *ShowUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddShowReserfIDs(ids...)
}

// Mutation returns the ShowMutation object of the builder.
func (su *ShowUpdate) Mutation() *ShowMutation {
	return su.mutation
}

// ClearShowReserves clears all "show_reserves" edges to the ShowReserve entity.
func (su *ShowUpdate) ClearShowReserves() *ShowUpdate {
	su.mutation.ClearShowReserves()
	return su
}

// RemoveShowReserfIDs removes the "show_reserves" edge to ShowReserve entities by IDs.
func (su *ShowUpdate) RemoveShowReserfIDs(ids ...uint64) *ShowUpdate {
	su.mutation.RemoveShowReserfIDs(ids...)
	return su
}

// RemoveShowReserves removes "show_reserves" edges to ShowReserve entities.
func (su *ShowUpdate) RemoveShowReserves(s ...*ShowReserve) *ShowUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveShowReserfIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShowUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShowUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShowUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ShowUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShowUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ShowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(show.Table, show.Columns, sqlgraph.NewFieldSpec(show.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(show.FieldType, field.TypeString, value)
	}
	if value, ok := su.mutation.Poster(); ok {
		_spec.SetField(show.FieldPoster, field.TypeString, value)
	}
	if su.mutation.PosterCleared() {
		_spec.ClearField(show.FieldPoster, field.TypeString)
	}
	if value, ok := su.mutation.Content(); ok {
		_spec.SetField(show.FieldContent, field.TypeString, value)
	}
	if value, ok := su.mutation.MediaFiles(); ok {
		_spec.SetField(show.FieldMediaFiles, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedMediaFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, show.FieldMediaFiles, value)
		})
	}
	if su.mutation.MediaFilesCleared() {
		_spec.ClearField(show.FieldMediaFiles, field.TypeJSON)
	}
	if su.mutation.ShowReservesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   show.ShowReservesTable,
			Columns: []string{show.ShowReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedShowReservesIDs(); len(nodes) > 0 && !su.mutation.ShowReservesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   show.ShowReservesTable,
			Columns: []string{show.ShowReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShowReservesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   show.ShowReservesTable,
			Columns: []string{show.ShowReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{show.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShowUpdateOne is the builder for updating a single Show entity.
type ShowUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetType sets the "type" field.
func (suo *ShowUpdateOne) SetType(s string) *ShowUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *ShowUpdateOne) SetNillableType(s *string) *ShowUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// SetPoster sets the "poster" field.
func (suo *ShowUpdateOne) SetPoster(s string) *ShowUpdateOne {
	suo.mutation.SetPoster(s)
	return suo
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (suo *ShowUpdateOne) SetNillablePoster(s *string) *ShowUpdateOne {
	if s != nil {
		suo.SetPoster(*s)
	}
	return suo
}

// ClearPoster clears the value of the "poster" field.
func (suo *ShowUpdateOne) ClearPoster() *ShowUpdateOne {
	suo.mutation.ClearPoster()
	return suo
}

// SetContent sets the "content" field.
func (suo *ShowUpdateOne) SetContent(s string) *ShowUpdateOne {
	suo.mutation.SetContent(s)
	return suo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (suo *ShowUpdateOne) SetNillableContent(s *string) *ShowUpdateOne {
	if s != nil {
		suo.SetContent(*s)
	}
	return suo
}

// SetMediaFiles sets the "media_files" field.
func (suo *ShowUpdateOne) SetMediaFiles(s []string) *ShowUpdateOne {
	suo.mutation.SetMediaFiles(s)
	return suo
}

// AppendMediaFiles appends s to the "media_files" field.
func (suo *ShowUpdateOne) AppendMediaFiles(s []string) *ShowUpdateOne {
	suo.mutation.AppendMediaFiles(s)
	return suo
}

// ClearMediaFiles clears the value of the "media_files" field.
func (suo *ShowUpdateOne) ClearMediaFiles() *ShowUpdateOne {
	suo.mutation.ClearMediaFiles()
	return suo
}

// AddShowReserfIDs adds the "show_reserves" edge to the ShowReserve entity by IDs.
func (suo *ShowUpdateOne) AddShowReserfIDs(ids ...uint64) *ShowUpdateOne {
	suo.mutation.AddShowReserfIDs(ids...)
	return suo
}

// AddShowReserves adds the "show_reserves" edges to the ShowReserve entity.
func (suo *ShowUpdateOne) AddShowReserves(s ...*ShowReserve) *ShowUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddShowReserfIDs(ids...)
}

// Mutation returns the ShowMutation object of the builder.
func (suo *ShowUpdateOne) Mutation() *ShowMutation {
	return suo.mutation
}

// ClearShowReserves clears all "show_reserves" edges to the ShowReserve entity.
func (suo *ShowUpdateOne) ClearShowReserves() *ShowUpdateOne {
	suo.mutation.ClearShowReserves()
	return suo
}

// RemoveShowReserfIDs removes the "show_reserves" edge to ShowReserve entities by IDs.
func (suo *ShowUpdateOne) RemoveShowReserfIDs(ids ...uint64) *ShowUpdateOne {
	suo.mutation.RemoveShowReserfIDs(ids...)
	return suo
}

// RemoveShowReserves removes "show_reserves" edges to ShowReserve entities.
func (suo *ShowUpdateOne) RemoveShowReserves(s ...*ShowReserve) *ShowUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveShowReserfIDs(ids...)
}

// Where appends a list predicates to the ShowUpdate builder.
func (suo *ShowUpdateOne) Where(ps ...predicate.Show) *ShowUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShowUpdateOne) Select(field string, fields ...string) *ShowUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Show entity.
func (suo *ShowUpdateOne) Save(ctx context.Context) (*Show, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShowUpdateOne) SaveX(ctx context.Context) *Show {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShowUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShowUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ShowUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShowUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ShowUpdateOne) sqlSave(ctx context.Context) (_node *Show, err error) {
	_spec := sqlgraph.NewUpdateSpec(show.Table, show.Columns, sqlgraph.NewFieldSpec(show.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Show.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, show.FieldID)
		for _, f := range fields {
			if !show.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != show.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(show.FieldType, field.TypeString, value)
	}
	if value, ok := suo.mutation.Poster(); ok {
		_spec.SetField(show.FieldPoster, field.TypeString, value)
	}
	if suo.mutation.PosterCleared() {
		_spec.ClearField(show.FieldPoster, field.TypeString)
	}
	if value, ok := suo.mutation.Content(); ok {
		_spec.SetField(show.FieldContent, field.TypeString, value)
	}
	if value, ok := suo.mutation.MediaFiles(); ok {
		_spec.SetField(show.FieldMediaFiles, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedMediaFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, show.FieldMediaFiles, value)
		})
	}
	if suo.mutation.MediaFilesCleared() {
		_spec.ClearField(show.FieldMediaFiles, field.TypeJSON)
	}
	if suo.mutation.ShowReservesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   show.ShowReservesTable,
			Columns: []string{show.ShowReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedShowReservesIDs(); len(nodes) > 0 && !suo.mutation.ShowReservesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   show.ShowReservesTable,
			Columns: []string{show.ShowReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShowReservesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   show.ShowReservesTable,
			Columns: []string{show.ShowReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Show{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{show.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
