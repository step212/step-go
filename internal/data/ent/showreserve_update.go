// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/predicate"
	"step/internal/data/ent/show"
	"step/internal/data/ent/showreserve"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ShowReserveUpdate is the builder for updating ShowReserve entities.
type ShowReserveUpdate struct {
	config
	hooks     []Hook
	mutation  *ShowReserveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShowReserveUpdate builder.
func (sru *ShowReserveUpdate) Where(ps ...predicate.ShowReserve) *ShowReserveUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetUserID sets the "user_id" field.
func (sru *ShowReserveUpdate) SetUserID(s string) *ShowReserveUpdate {
	sru.mutation.SetUserID(s)
	return sru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sru *ShowReserveUpdate) SetNillableUserID(s *string) *ShowReserveUpdate {
	if s != nil {
		sru.SetUserID(*s)
	}
	return sru
}

// SetStatus sets the "status" field.
func (sru *ShowReserveUpdate) SetStatus(s showreserve.Status) *ShowReserveUpdate {
	sru.mutation.SetStatus(s)
	return sru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sru *ShowReserveUpdate) SetNillableStatus(s *showreserve.Status) *ShowReserveUpdate {
	if s != nil {
		sru.SetStatus(*s)
	}
	return sru
}

// SetMemories sets the "memories" field.
func (sru *ShowReserveUpdate) SetMemories(s []string) *ShowReserveUpdate {
	sru.mutation.SetMemories(s)
	return sru
}

// AppendMemories appends s to the "memories" field.
func (sru *ShowReserveUpdate) AppendMemories(s []string) *ShowReserveUpdate {
	sru.mutation.AppendMemories(s)
	return sru
}

// ClearMemories clears the value of the "memories" field.
func (sru *ShowReserveUpdate) ClearMemories() *ShowReserveUpdate {
	sru.mutation.ClearMemories()
	return sru
}

// SetRefShowID sets the "ref_show_id" field.
func (sru *ShowReserveUpdate) SetRefShowID(u uint64) *ShowReserveUpdate {
	sru.mutation.SetRefShowID(u)
	return sru
}

// SetNillableRefShowID sets the "ref_show_id" field if the given value is not nil.
func (sru *ShowReserveUpdate) SetNillableRefShowID(u *uint64) *ShowReserveUpdate {
	if u != nil {
		sru.SetRefShowID(*u)
	}
	return sru
}

// ClearRefShowID clears the value of the "ref_show_id" field.
func (sru *ShowReserveUpdate) ClearRefShowID() *ShowReserveUpdate {
	sru.mutation.ClearRefShowID()
	return sru
}

// SetShowID sets the "show" edge to the Show entity by ID.
func (sru *ShowReserveUpdate) SetShowID(id uint64) *ShowReserveUpdate {
	sru.mutation.SetShowID(id)
	return sru
}

// SetNillableShowID sets the "show" edge to the Show entity by ID if the given value is not nil.
func (sru *ShowReserveUpdate) SetNillableShowID(id *uint64) *ShowReserveUpdate {
	if id != nil {
		sru = sru.SetShowID(*id)
	}
	return sru
}

// SetShow sets the "show" edge to the Show entity.
func (sru *ShowReserveUpdate) SetShow(s *Show) *ShowReserveUpdate {
	return sru.SetShowID(s.ID)
}

// Mutation returns the ShowReserveMutation object of the builder.
func (sru *ShowReserveUpdate) Mutation() *ShowReserveMutation {
	return sru.mutation
}

// ClearShow clears the "show" edge to the Show entity.
func (sru *ShowReserveUpdate) ClearShow() *ShowReserveUpdate {
	sru.mutation.ClearShow()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *ShowReserveUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *ShowReserveUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *ShowReserveUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *ShowReserveUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *ShowReserveUpdate) check() error {
	if v, ok := sru.mutation.Status(); ok {
		if err := showreserve.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShowReserve.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *ShowReserveUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShowReserveUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *ShowReserveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(showreserve.Table, showreserve.Columns, sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UserID(); ok {
		_spec.SetField(showreserve.FieldUserID, field.TypeString, value)
	}
	if value, ok := sru.mutation.Status(); ok {
		_spec.SetField(showreserve.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sru.mutation.Memories(); ok {
		_spec.SetField(showreserve.FieldMemories, field.TypeJSON, value)
	}
	if value, ok := sru.mutation.AppendedMemories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, showreserve.FieldMemories, value)
		})
	}
	if sru.mutation.MemoriesCleared() {
		_spec.ClearField(showreserve.FieldMemories, field.TypeJSON)
	}
	if sru.mutation.ShowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   showreserve.ShowTable,
			Columns: []string{showreserve.ShowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(show.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.ShowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   showreserve.ShowTable,
			Columns: []string{showreserve.ShowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(show.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{showreserve.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// ShowReserveUpdateOne is the builder for updating a single ShowReserve entity.
type ShowReserveUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShowReserveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (sruo *ShowReserveUpdateOne) SetUserID(s string) *ShowReserveUpdateOne {
	sruo.mutation.SetUserID(s)
	return sruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sruo *ShowReserveUpdateOne) SetNillableUserID(s *string) *ShowReserveUpdateOne {
	if s != nil {
		sruo.SetUserID(*s)
	}
	return sruo
}

// SetStatus sets the "status" field.
func (sruo *ShowReserveUpdateOne) SetStatus(s showreserve.Status) *ShowReserveUpdateOne {
	sruo.mutation.SetStatus(s)
	return sruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sruo *ShowReserveUpdateOne) SetNillableStatus(s *showreserve.Status) *ShowReserveUpdateOne {
	if s != nil {
		sruo.SetStatus(*s)
	}
	return sruo
}

// SetMemories sets the "memories" field.
func (sruo *ShowReserveUpdateOne) SetMemories(s []string) *ShowReserveUpdateOne {
	sruo.mutation.SetMemories(s)
	return sruo
}

// AppendMemories appends s to the "memories" field.
func (sruo *ShowReserveUpdateOne) AppendMemories(s []string) *ShowReserveUpdateOne {
	sruo.mutation.AppendMemories(s)
	return sruo
}

// ClearMemories clears the value of the "memories" field.
func (sruo *ShowReserveUpdateOne) ClearMemories() *ShowReserveUpdateOne {
	sruo.mutation.ClearMemories()
	return sruo
}

// SetRefShowID sets the "ref_show_id" field.
func (sruo *ShowReserveUpdateOne) SetRefShowID(u uint64) *ShowReserveUpdateOne {
	sruo.mutation.SetRefShowID(u)
	return sruo
}

// SetNillableRefShowID sets the "ref_show_id" field if the given value is not nil.
func (sruo *ShowReserveUpdateOne) SetNillableRefShowID(u *uint64) *ShowReserveUpdateOne {
	if u != nil {
		sruo.SetRefShowID(*u)
	}
	return sruo
}

// ClearRefShowID clears the value of the "ref_show_id" field.
func (sruo *ShowReserveUpdateOne) ClearRefShowID() *ShowReserveUpdateOne {
	sruo.mutation.ClearRefShowID()
	return sruo
}

// SetShowID sets the "show" edge to the Show entity by ID.
func (sruo *ShowReserveUpdateOne) SetShowID(id uint64) *ShowReserveUpdateOne {
	sruo.mutation.SetShowID(id)
	return sruo
}

// SetNillableShowID sets the "show" edge to the Show entity by ID if the given value is not nil.
func (sruo *ShowReserveUpdateOne) SetNillableShowID(id *uint64) *ShowReserveUpdateOne {
	if id != nil {
		sruo = sruo.SetShowID(*id)
	}
	return sruo
}

// SetShow sets the "show" edge to the Show entity.
func (sruo *ShowReserveUpdateOne) SetShow(s *Show) *ShowReserveUpdateOne {
	return sruo.SetShowID(s.ID)
}

// Mutation returns the ShowReserveMutation object of the builder.
func (sruo *ShowReserveUpdateOne) Mutation() *ShowReserveMutation {
	return sruo.mutation
}

// ClearShow clears the "show" edge to the Show entity.
func (sruo *ShowReserveUpdateOne) ClearShow() *ShowReserveUpdateOne {
	sruo.mutation.ClearShow()
	return sruo
}

// Where appends a list predicates to the ShowReserveUpdate builder.
func (sruo *ShowReserveUpdateOne) Where(ps ...predicate.ShowReserve) *ShowReserveUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *ShowReserveUpdateOne) Select(field string, fields ...string) *ShowReserveUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated ShowReserve entity.
func (sruo *ShowReserveUpdateOne) Save(ctx context.Context) (*ShowReserve, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *ShowReserveUpdateOne) SaveX(ctx context.Context) *ShowReserve {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *ShowReserveUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *ShowReserveUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *ShowReserveUpdateOne) check() error {
	if v, ok := sruo.mutation.Status(); ok {
		if err := showreserve.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShowReserve.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *ShowReserveUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShowReserveUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *ShowReserveUpdateOne) sqlSave(ctx context.Context) (_node *ShowReserve, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(showreserve.Table, showreserve.Columns, sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShowReserve.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, showreserve.FieldID)
		for _, f := range fields {
			if !showreserve.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != showreserve.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.UserID(); ok {
		_spec.SetField(showreserve.FieldUserID, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Status(); ok {
		_spec.SetField(showreserve.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sruo.mutation.Memories(); ok {
		_spec.SetField(showreserve.FieldMemories, field.TypeJSON, value)
	}
	if value, ok := sruo.mutation.AppendedMemories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, showreserve.FieldMemories, value)
		})
	}
	if sruo.mutation.MemoriesCleared() {
		_spec.ClearField(showreserve.FieldMemories, field.TypeJSON)
	}
	if sruo.mutation.ShowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   showreserve.ShowTable,
			Columns: []string{showreserve.ShowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(show.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.ShowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   showreserve.ShowTable,
			Columns: []string{showreserve.ShowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(show.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sruo.modifiers...)
	_node = &ShowReserve{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{showreserve.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
