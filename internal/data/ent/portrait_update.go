// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/portrait"
	"step/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PortraitUpdate is the builder for updating Portrait entities.
type PortraitUpdate struct {
	config
	hooks     []Hook
	mutation  *PortraitMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PortraitUpdate builder.
func (pu *PortraitUpdate) Where(ps ...predicate.Portrait) *PortraitUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PortraitUpdate) SetUserID(s string) *PortraitUpdate {
	pu.mutation.SetUserID(s)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PortraitUpdate) SetNillableUserID(s *string) *PortraitUpdate {
	if s != nil {
		pu.SetUserID(*s)
	}
	return pu
}

// SetDimension sets the "dimension" field.
func (pu *PortraitUpdate) SetDimension(po portrait.Dimension) *PortraitUpdate {
	pu.mutation.SetDimension(po)
	return pu
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (pu *PortraitUpdate) SetNillableDimension(po *portrait.Dimension) *PortraitUpdate {
	if po != nil {
		pu.SetDimension(*po)
	}
	return pu
}

// SetValue sets the "value" field.
func (pu *PortraitUpdate) SetValue(m map[string]interface{}) *PortraitUpdate {
	pu.mutation.SetValue(m)
	return pu
}

// Mutation returns the PortraitMutation object of the builder.
func (pu *PortraitUpdate) Mutation() *PortraitMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PortraitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PortraitUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PortraitUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PortraitUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PortraitUpdate) check() error {
	if v, ok := pu.mutation.Dimension(); ok {
		if err := portrait.DimensionValidator(v); err != nil {
			return &ValidationError{Name: "dimension", err: fmt.Errorf(`ent: validator failed for field "Portrait.dimension": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PortraitUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PortraitUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PortraitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(portrait.Table, portrait.Columns, sqlgraph.NewFieldSpec(portrait.FieldID, field.TypeUint64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(portrait.FieldUserID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Dimension(); ok {
		_spec.SetField(portrait.FieldDimension, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Value(); ok {
		_spec.SetField(portrait.FieldValue, field.TypeJSON, value)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portrait.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PortraitUpdateOne is the builder for updating a single Portrait entity.
type PortraitUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PortraitMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (puo *PortraitUpdateOne) SetUserID(s string) *PortraitUpdateOne {
	puo.mutation.SetUserID(s)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PortraitUpdateOne) SetNillableUserID(s *string) *PortraitUpdateOne {
	if s != nil {
		puo.SetUserID(*s)
	}
	return puo
}

// SetDimension sets the "dimension" field.
func (puo *PortraitUpdateOne) SetDimension(po portrait.Dimension) *PortraitUpdateOne {
	puo.mutation.SetDimension(po)
	return puo
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (puo *PortraitUpdateOne) SetNillableDimension(po *portrait.Dimension) *PortraitUpdateOne {
	if po != nil {
		puo.SetDimension(*po)
	}
	return puo
}

// SetValue sets the "value" field.
func (puo *PortraitUpdateOne) SetValue(m map[string]interface{}) *PortraitUpdateOne {
	puo.mutation.SetValue(m)
	return puo
}

// Mutation returns the PortraitMutation object of the builder.
func (puo *PortraitUpdateOne) Mutation() *PortraitMutation {
	return puo.mutation
}

// Where appends a list predicates to the PortraitUpdate builder.
func (puo *PortraitUpdateOne) Where(ps ...predicate.Portrait) *PortraitUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PortraitUpdateOne) Select(field string, fields ...string) *PortraitUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Portrait entity.
func (puo *PortraitUpdateOne) Save(ctx context.Context) (*Portrait, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PortraitUpdateOne) SaveX(ctx context.Context) *Portrait {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PortraitUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PortraitUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PortraitUpdateOne) check() error {
	if v, ok := puo.mutation.Dimension(); ok {
		if err := portrait.DimensionValidator(v); err != nil {
			return &ValidationError{Name: "dimension", err: fmt.Errorf(`ent: validator failed for field "Portrait.dimension": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PortraitUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PortraitUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PortraitUpdateOne) sqlSave(ctx context.Context) (_node *Portrait, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(portrait.Table, portrait.Columns, sqlgraph.NewFieldSpec(portrait.FieldID, field.TypeUint64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Portrait.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portrait.FieldID)
		for _, f := range fields {
			if !portrait.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != portrait.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(portrait.FieldUserID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Dimension(); ok {
		_spec.SetField(portrait.FieldDimension, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Value(); ok {
		_spec.SetField(portrait.FieldValue, field.TypeJSON, value)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Portrait{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portrait.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
