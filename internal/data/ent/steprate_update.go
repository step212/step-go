// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/predicate"
	"step/internal/data/ent/steprate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StepRateUpdate is the builder for updating StepRate entities.
type StepRateUpdate struct {
	config
	hooks     []Hook
	mutation  *StepRateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StepRateUpdate builder.
func (sru *StepRateUpdate) Where(ps ...predicate.StepRate) *StepRateUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetUserID sets the "user_id" field.
func (sru *StepRateUpdate) SetUserID(s string) *StepRateUpdate {
	sru.mutation.SetUserID(s)
	return sru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableUserID(s *string) *StepRateUpdate {
	if s != nil {
		sru.SetUserID(*s)
	}
	return sru
}

// SetTopTargetID sets the "top_target_id" field.
func (sru *StepRateUpdate) SetTopTargetID(u uint64) *StepRateUpdate {
	sru.mutation.ResetTopTargetID()
	sru.mutation.SetTopTargetID(u)
	return sru
}

// SetNillableTopTargetID sets the "top_target_id" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableTopTargetID(u *uint64) *StepRateUpdate {
	if u != nil {
		sru.SetTopTargetID(*u)
	}
	return sru
}

// AddTopTargetID adds u to the "top_target_id" field.
func (sru *StepRateUpdate) AddTopTargetID(u int64) *StepRateUpdate {
	sru.mutation.AddTopTargetID(u)
	return sru
}

// SetTargetID sets the "target_id" field.
func (sru *StepRateUpdate) SetTargetID(u uint64) *StepRateUpdate {
	sru.mutation.ResetTargetID()
	sru.mutation.SetTargetID(u)
	return sru
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableTargetID(u *uint64) *StepRateUpdate {
	if u != nil {
		sru.SetTargetID(*u)
	}
	return sru
}

// AddTargetID adds u to the "target_id" field.
func (sru *StepRateUpdate) AddTargetID(u int64) *StepRateUpdate {
	sru.mutation.AddTargetID(u)
	return sru
}

// SetStepID sets the "step_id" field.
func (sru *StepRateUpdate) SetStepID(u uint64) *StepRateUpdate {
	sru.mutation.ResetStepID()
	sru.mutation.SetStepID(u)
	return sru
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableStepID(u *uint64) *StepRateUpdate {
	if u != nil {
		sru.SetStepID(*u)
	}
	return sru
}

// AddStepID adds u to the "step_id" field.
func (sru *StepRateUpdate) AddStepID(u int64) *StepRateUpdate {
	sru.mutation.AddStepID(u)
	return sru
}

// SetWeightedValue sets the "weighted_value" field.
func (sru *StepRateUpdate) SetWeightedValue(f float64) *StepRateUpdate {
	sru.mutation.ResetWeightedValue()
	sru.mutation.SetWeightedValue(f)
	return sru
}

// SetNillableWeightedValue sets the "weighted_value" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableWeightedValue(f *float64) *StepRateUpdate {
	if f != nil {
		sru.SetWeightedValue(*f)
	}
	return sru
}

// AddWeightedValue adds f to the "weighted_value" field.
func (sru *StepRateUpdate) AddWeightedValue(f float64) *StepRateUpdate {
	sru.mutation.AddWeightedValue(f)
	return sru
}

// SetTargetReasonableness sets the "target_reasonableness" field.
func (sru *StepRateUpdate) SetTargetReasonableness(i int32) *StepRateUpdate {
	sru.mutation.ResetTargetReasonableness()
	sru.mutation.SetTargetReasonableness(i)
	return sru
}

// SetNillableTargetReasonableness sets the "target_reasonableness" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableTargetReasonableness(i *int32) *StepRateUpdate {
	if i != nil {
		sru.SetTargetReasonableness(*i)
	}
	return sru
}

// AddTargetReasonableness adds i to the "target_reasonableness" field.
func (sru *StepRateUpdate) AddTargetReasonableness(i int32) *StepRateUpdate {
	sru.mutation.AddTargetReasonableness(i)
	return sru
}

// SetTargetClarity sets the "target_clarity" field.
func (sru *StepRateUpdate) SetTargetClarity(i int32) *StepRateUpdate {
	sru.mutation.ResetTargetClarity()
	sru.mutation.SetTargetClarity(i)
	return sru
}

// SetNillableTargetClarity sets the "target_clarity" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableTargetClarity(i *int32) *StepRateUpdate {
	if i != nil {
		sru.SetTargetClarity(*i)
	}
	return sru
}

// AddTargetClarity adds i to the "target_clarity" field.
func (sru *StepRateUpdate) AddTargetClarity(i int32) *StepRateUpdate {
	sru.mutation.AddTargetClarity(i)
	return sru
}

// SetTargetAchievement sets the "target_achievement" field.
func (sru *StepRateUpdate) SetTargetAchievement(i int32) *StepRateUpdate {
	sru.mutation.ResetTargetAchievement()
	sru.mutation.SetTargetAchievement(i)
	return sru
}

// SetNillableTargetAchievement sets the "target_achievement" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableTargetAchievement(i *int32) *StepRateUpdate {
	if i != nil {
		sru.SetTargetAchievement(*i)
	}
	return sru
}

// AddTargetAchievement adds i to the "target_achievement" field.
func (sru *StepRateUpdate) AddTargetAchievement(i int32) *StepRateUpdate {
	sru.mutation.AddTargetAchievement(i)
	return sru
}

// SetReflectionImprovement sets the "reflection_improvement" field.
func (sru *StepRateUpdate) SetReflectionImprovement(i int32) *StepRateUpdate {
	sru.mutation.ResetReflectionImprovement()
	sru.mutation.SetReflectionImprovement(i)
	return sru
}

// SetNillableReflectionImprovement sets the "reflection_improvement" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableReflectionImprovement(i *int32) *StepRateUpdate {
	if i != nil {
		sru.SetReflectionImprovement(*i)
	}
	return sru
}

// AddReflectionImprovement adds i to the "reflection_improvement" field.
func (sru *StepRateUpdate) AddReflectionImprovement(i int32) *StepRateUpdate {
	sru.mutation.AddReflectionImprovement(i)
	return sru
}

// SetInnovation sets the "innovation" field.
func (sru *StepRateUpdate) SetInnovation(i int32) *StepRateUpdate {
	sru.mutation.ResetInnovation()
	sru.mutation.SetInnovation(i)
	return sru
}

// SetNillableInnovation sets the "innovation" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableInnovation(i *int32) *StepRateUpdate {
	if i != nil {
		sru.SetInnovation(*i)
	}
	return sru
}

// AddInnovation adds i to the "innovation" field.
func (sru *StepRateUpdate) AddInnovation(i int32) *StepRateUpdate {
	sru.mutation.AddInnovation(i)
	return sru
}

// SetBasicReliability sets the "basic_reliability" field.
func (sru *StepRateUpdate) SetBasicReliability(i int32) *StepRateUpdate {
	sru.mutation.ResetBasicReliability()
	sru.mutation.SetBasicReliability(i)
	return sru
}

// SetNillableBasicReliability sets the "basic_reliability" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableBasicReliability(i *int32) *StepRateUpdate {
	if i != nil {
		sru.SetBasicReliability(*i)
	}
	return sru
}

// AddBasicReliability adds i to the "basic_reliability" field.
func (sru *StepRateUpdate) AddBasicReliability(i int32) *StepRateUpdate {
	sru.mutation.AddBasicReliability(i)
	return sru
}

// SetSkillImprovement sets the "skill_improvement" field.
func (sru *StepRateUpdate) SetSkillImprovement(i int32) *StepRateUpdate {
	sru.mutation.ResetSkillImprovement()
	sru.mutation.SetSkillImprovement(i)
	return sru
}

// SetNillableSkillImprovement sets the "skill_improvement" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableSkillImprovement(i *int32) *StepRateUpdate {
	if i != nil {
		sru.SetSkillImprovement(*i)
	}
	return sru
}

// AddSkillImprovement adds i to the "skill_improvement" field.
func (sru *StepRateUpdate) AddSkillImprovement(i int32) *StepRateUpdate {
	sru.mutation.AddSkillImprovement(i)
	return sru
}

// SetDifficulty sets the "difficulty" field.
func (sru *StepRateUpdate) SetDifficulty(i int32) *StepRateUpdate {
	sru.mutation.ResetDifficulty()
	sru.mutation.SetDifficulty(i)
	return sru
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableDifficulty(i *int32) *StepRateUpdate {
	if i != nil {
		sru.SetDifficulty(*i)
	}
	return sru
}

// AddDifficulty adds i to the "difficulty" field.
func (sru *StepRateUpdate) AddDifficulty(i int32) *StepRateUpdate {
	sru.mutation.AddDifficulty(i)
	return sru
}

// SetDate sets the "date" field.
func (sru *StepRateUpdate) SetDate(t time.Time) *StepRateUpdate {
	sru.mutation.SetDate(t)
	return sru
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (sru *StepRateUpdate) SetNillableDate(t *time.Time) *StepRateUpdate {
	if t != nil {
		sru.SetDate(*t)
	}
	return sru
}

// Mutation returns the StepRateMutation object of the builder.
func (sru *StepRateUpdate) Mutation() *StepRateMutation {
	return sru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *StepRateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *StepRateUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *StepRateUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *StepRateUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *StepRateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StepRateUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *StepRateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(steprate.Table, steprate.Columns, sqlgraph.NewFieldSpec(steprate.FieldID, field.TypeUint64))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UserID(); ok {
		_spec.SetField(steprate.FieldUserID, field.TypeString, value)
	}
	if value, ok := sru.mutation.TopTargetID(); ok {
		_spec.SetField(steprate.FieldTopTargetID, field.TypeUint64, value)
	}
	if value, ok := sru.mutation.AddedTopTargetID(); ok {
		_spec.AddField(steprate.FieldTopTargetID, field.TypeUint64, value)
	}
	if value, ok := sru.mutation.TargetID(); ok {
		_spec.SetField(steprate.FieldTargetID, field.TypeUint64, value)
	}
	if value, ok := sru.mutation.AddedTargetID(); ok {
		_spec.AddField(steprate.FieldTargetID, field.TypeUint64, value)
	}
	if value, ok := sru.mutation.StepID(); ok {
		_spec.SetField(steprate.FieldStepID, field.TypeUint64, value)
	}
	if value, ok := sru.mutation.AddedStepID(); ok {
		_spec.AddField(steprate.FieldStepID, field.TypeUint64, value)
	}
	if value, ok := sru.mutation.WeightedValue(); ok {
		_spec.SetField(steprate.FieldWeightedValue, field.TypeFloat64, value)
	}
	if value, ok := sru.mutation.AddedWeightedValue(); ok {
		_spec.AddField(steprate.FieldWeightedValue, field.TypeFloat64, value)
	}
	if value, ok := sru.mutation.TargetReasonableness(); ok {
		_spec.SetField(steprate.FieldTargetReasonableness, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedTargetReasonableness(); ok {
		_spec.AddField(steprate.FieldTargetReasonableness, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.TargetClarity(); ok {
		_spec.SetField(steprate.FieldTargetClarity, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedTargetClarity(); ok {
		_spec.AddField(steprate.FieldTargetClarity, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.TargetAchievement(); ok {
		_spec.SetField(steprate.FieldTargetAchievement, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedTargetAchievement(); ok {
		_spec.AddField(steprate.FieldTargetAchievement, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.ReflectionImprovement(); ok {
		_spec.SetField(steprate.FieldReflectionImprovement, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedReflectionImprovement(); ok {
		_spec.AddField(steprate.FieldReflectionImprovement, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.Innovation(); ok {
		_spec.SetField(steprate.FieldInnovation, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedInnovation(); ok {
		_spec.AddField(steprate.FieldInnovation, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.BasicReliability(); ok {
		_spec.SetField(steprate.FieldBasicReliability, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedBasicReliability(); ok {
		_spec.AddField(steprate.FieldBasicReliability, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.SkillImprovement(); ok {
		_spec.SetField(steprate.FieldSkillImprovement, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedSkillImprovement(); ok {
		_spec.AddField(steprate.FieldSkillImprovement, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.Difficulty(); ok {
		_spec.SetField(steprate.FieldDifficulty, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedDifficulty(); ok {
		_spec.AddField(steprate.FieldDifficulty, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.Date(); ok {
		_spec.SetField(steprate.FieldDate, field.TypeTime, value)
	}
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{steprate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// StepRateUpdateOne is the builder for updating a single StepRate entity.
type StepRateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StepRateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (sruo *StepRateUpdateOne) SetUserID(s string) *StepRateUpdateOne {
	sruo.mutation.SetUserID(s)
	return sruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableUserID(s *string) *StepRateUpdateOne {
	if s != nil {
		sruo.SetUserID(*s)
	}
	return sruo
}

// SetTopTargetID sets the "top_target_id" field.
func (sruo *StepRateUpdateOne) SetTopTargetID(u uint64) *StepRateUpdateOne {
	sruo.mutation.ResetTopTargetID()
	sruo.mutation.SetTopTargetID(u)
	return sruo
}

// SetNillableTopTargetID sets the "top_target_id" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableTopTargetID(u *uint64) *StepRateUpdateOne {
	if u != nil {
		sruo.SetTopTargetID(*u)
	}
	return sruo
}

// AddTopTargetID adds u to the "top_target_id" field.
func (sruo *StepRateUpdateOne) AddTopTargetID(u int64) *StepRateUpdateOne {
	sruo.mutation.AddTopTargetID(u)
	return sruo
}

// SetTargetID sets the "target_id" field.
func (sruo *StepRateUpdateOne) SetTargetID(u uint64) *StepRateUpdateOne {
	sruo.mutation.ResetTargetID()
	sruo.mutation.SetTargetID(u)
	return sruo
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableTargetID(u *uint64) *StepRateUpdateOne {
	if u != nil {
		sruo.SetTargetID(*u)
	}
	return sruo
}

// AddTargetID adds u to the "target_id" field.
func (sruo *StepRateUpdateOne) AddTargetID(u int64) *StepRateUpdateOne {
	sruo.mutation.AddTargetID(u)
	return sruo
}

// SetStepID sets the "step_id" field.
func (sruo *StepRateUpdateOne) SetStepID(u uint64) *StepRateUpdateOne {
	sruo.mutation.ResetStepID()
	sruo.mutation.SetStepID(u)
	return sruo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableStepID(u *uint64) *StepRateUpdateOne {
	if u != nil {
		sruo.SetStepID(*u)
	}
	return sruo
}

// AddStepID adds u to the "step_id" field.
func (sruo *StepRateUpdateOne) AddStepID(u int64) *StepRateUpdateOne {
	sruo.mutation.AddStepID(u)
	return sruo
}

// SetWeightedValue sets the "weighted_value" field.
func (sruo *StepRateUpdateOne) SetWeightedValue(f float64) *StepRateUpdateOne {
	sruo.mutation.ResetWeightedValue()
	sruo.mutation.SetWeightedValue(f)
	return sruo
}

// SetNillableWeightedValue sets the "weighted_value" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableWeightedValue(f *float64) *StepRateUpdateOne {
	if f != nil {
		sruo.SetWeightedValue(*f)
	}
	return sruo
}

// AddWeightedValue adds f to the "weighted_value" field.
func (sruo *StepRateUpdateOne) AddWeightedValue(f float64) *StepRateUpdateOne {
	sruo.mutation.AddWeightedValue(f)
	return sruo
}

// SetTargetReasonableness sets the "target_reasonableness" field.
func (sruo *StepRateUpdateOne) SetTargetReasonableness(i int32) *StepRateUpdateOne {
	sruo.mutation.ResetTargetReasonableness()
	sruo.mutation.SetTargetReasonableness(i)
	return sruo
}

// SetNillableTargetReasonableness sets the "target_reasonableness" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableTargetReasonableness(i *int32) *StepRateUpdateOne {
	if i != nil {
		sruo.SetTargetReasonableness(*i)
	}
	return sruo
}

// AddTargetReasonableness adds i to the "target_reasonableness" field.
func (sruo *StepRateUpdateOne) AddTargetReasonableness(i int32) *StepRateUpdateOne {
	sruo.mutation.AddTargetReasonableness(i)
	return sruo
}

// SetTargetClarity sets the "target_clarity" field.
func (sruo *StepRateUpdateOne) SetTargetClarity(i int32) *StepRateUpdateOne {
	sruo.mutation.ResetTargetClarity()
	sruo.mutation.SetTargetClarity(i)
	return sruo
}

// SetNillableTargetClarity sets the "target_clarity" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableTargetClarity(i *int32) *StepRateUpdateOne {
	if i != nil {
		sruo.SetTargetClarity(*i)
	}
	return sruo
}

// AddTargetClarity adds i to the "target_clarity" field.
func (sruo *StepRateUpdateOne) AddTargetClarity(i int32) *StepRateUpdateOne {
	sruo.mutation.AddTargetClarity(i)
	return sruo
}

// SetTargetAchievement sets the "target_achievement" field.
func (sruo *StepRateUpdateOne) SetTargetAchievement(i int32) *StepRateUpdateOne {
	sruo.mutation.ResetTargetAchievement()
	sruo.mutation.SetTargetAchievement(i)
	return sruo
}

// SetNillableTargetAchievement sets the "target_achievement" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableTargetAchievement(i *int32) *StepRateUpdateOne {
	if i != nil {
		sruo.SetTargetAchievement(*i)
	}
	return sruo
}

// AddTargetAchievement adds i to the "target_achievement" field.
func (sruo *StepRateUpdateOne) AddTargetAchievement(i int32) *StepRateUpdateOne {
	sruo.mutation.AddTargetAchievement(i)
	return sruo
}

// SetReflectionImprovement sets the "reflection_improvement" field.
func (sruo *StepRateUpdateOne) SetReflectionImprovement(i int32) *StepRateUpdateOne {
	sruo.mutation.ResetReflectionImprovement()
	sruo.mutation.SetReflectionImprovement(i)
	return sruo
}

// SetNillableReflectionImprovement sets the "reflection_improvement" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableReflectionImprovement(i *int32) *StepRateUpdateOne {
	if i != nil {
		sruo.SetReflectionImprovement(*i)
	}
	return sruo
}

// AddReflectionImprovement adds i to the "reflection_improvement" field.
func (sruo *StepRateUpdateOne) AddReflectionImprovement(i int32) *StepRateUpdateOne {
	sruo.mutation.AddReflectionImprovement(i)
	return sruo
}

// SetInnovation sets the "innovation" field.
func (sruo *StepRateUpdateOne) SetInnovation(i int32) *StepRateUpdateOne {
	sruo.mutation.ResetInnovation()
	sruo.mutation.SetInnovation(i)
	return sruo
}

// SetNillableInnovation sets the "innovation" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableInnovation(i *int32) *StepRateUpdateOne {
	if i != nil {
		sruo.SetInnovation(*i)
	}
	return sruo
}

// AddInnovation adds i to the "innovation" field.
func (sruo *StepRateUpdateOne) AddInnovation(i int32) *StepRateUpdateOne {
	sruo.mutation.AddInnovation(i)
	return sruo
}

// SetBasicReliability sets the "basic_reliability" field.
func (sruo *StepRateUpdateOne) SetBasicReliability(i int32) *StepRateUpdateOne {
	sruo.mutation.ResetBasicReliability()
	sruo.mutation.SetBasicReliability(i)
	return sruo
}

// SetNillableBasicReliability sets the "basic_reliability" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableBasicReliability(i *int32) *StepRateUpdateOne {
	if i != nil {
		sruo.SetBasicReliability(*i)
	}
	return sruo
}

// AddBasicReliability adds i to the "basic_reliability" field.
func (sruo *StepRateUpdateOne) AddBasicReliability(i int32) *StepRateUpdateOne {
	sruo.mutation.AddBasicReliability(i)
	return sruo
}

// SetSkillImprovement sets the "skill_improvement" field.
func (sruo *StepRateUpdateOne) SetSkillImprovement(i int32) *StepRateUpdateOne {
	sruo.mutation.ResetSkillImprovement()
	sruo.mutation.SetSkillImprovement(i)
	return sruo
}

// SetNillableSkillImprovement sets the "skill_improvement" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableSkillImprovement(i *int32) *StepRateUpdateOne {
	if i != nil {
		sruo.SetSkillImprovement(*i)
	}
	return sruo
}

// AddSkillImprovement adds i to the "skill_improvement" field.
func (sruo *StepRateUpdateOne) AddSkillImprovement(i int32) *StepRateUpdateOne {
	sruo.mutation.AddSkillImprovement(i)
	return sruo
}

// SetDifficulty sets the "difficulty" field.
func (sruo *StepRateUpdateOne) SetDifficulty(i int32) *StepRateUpdateOne {
	sruo.mutation.ResetDifficulty()
	sruo.mutation.SetDifficulty(i)
	return sruo
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableDifficulty(i *int32) *StepRateUpdateOne {
	if i != nil {
		sruo.SetDifficulty(*i)
	}
	return sruo
}

// AddDifficulty adds i to the "difficulty" field.
func (sruo *StepRateUpdateOne) AddDifficulty(i int32) *StepRateUpdateOne {
	sruo.mutation.AddDifficulty(i)
	return sruo
}

// SetDate sets the "date" field.
func (sruo *StepRateUpdateOne) SetDate(t time.Time) *StepRateUpdateOne {
	sruo.mutation.SetDate(t)
	return sruo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (sruo *StepRateUpdateOne) SetNillableDate(t *time.Time) *StepRateUpdateOne {
	if t != nil {
		sruo.SetDate(*t)
	}
	return sruo
}

// Mutation returns the StepRateMutation object of the builder.
func (sruo *StepRateUpdateOne) Mutation() *StepRateMutation {
	return sruo.mutation
}

// Where appends a list predicates to the StepRateUpdate builder.
func (sruo *StepRateUpdateOne) Where(ps ...predicate.StepRate) *StepRateUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *StepRateUpdateOne) Select(field string, fields ...string) *StepRateUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated StepRate entity.
func (sruo *StepRateUpdateOne) Save(ctx context.Context) (*StepRate, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *StepRateUpdateOne) SaveX(ctx context.Context) *StepRate {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *StepRateUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *StepRateUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *StepRateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StepRateUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *StepRateUpdateOne) sqlSave(ctx context.Context) (_node *StepRate, err error) {
	_spec := sqlgraph.NewUpdateSpec(steprate.Table, steprate.Columns, sqlgraph.NewFieldSpec(steprate.FieldID, field.TypeUint64))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StepRate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, steprate.FieldID)
		for _, f := range fields {
			if !steprate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != steprate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.UserID(); ok {
		_spec.SetField(steprate.FieldUserID, field.TypeString, value)
	}
	if value, ok := sruo.mutation.TopTargetID(); ok {
		_spec.SetField(steprate.FieldTopTargetID, field.TypeUint64, value)
	}
	if value, ok := sruo.mutation.AddedTopTargetID(); ok {
		_spec.AddField(steprate.FieldTopTargetID, field.TypeUint64, value)
	}
	if value, ok := sruo.mutation.TargetID(); ok {
		_spec.SetField(steprate.FieldTargetID, field.TypeUint64, value)
	}
	if value, ok := sruo.mutation.AddedTargetID(); ok {
		_spec.AddField(steprate.FieldTargetID, field.TypeUint64, value)
	}
	if value, ok := sruo.mutation.StepID(); ok {
		_spec.SetField(steprate.FieldStepID, field.TypeUint64, value)
	}
	if value, ok := sruo.mutation.AddedStepID(); ok {
		_spec.AddField(steprate.FieldStepID, field.TypeUint64, value)
	}
	if value, ok := sruo.mutation.WeightedValue(); ok {
		_spec.SetField(steprate.FieldWeightedValue, field.TypeFloat64, value)
	}
	if value, ok := sruo.mutation.AddedWeightedValue(); ok {
		_spec.AddField(steprate.FieldWeightedValue, field.TypeFloat64, value)
	}
	if value, ok := sruo.mutation.TargetReasonableness(); ok {
		_spec.SetField(steprate.FieldTargetReasonableness, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedTargetReasonableness(); ok {
		_spec.AddField(steprate.FieldTargetReasonableness, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.TargetClarity(); ok {
		_spec.SetField(steprate.FieldTargetClarity, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedTargetClarity(); ok {
		_spec.AddField(steprate.FieldTargetClarity, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.TargetAchievement(); ok {
		_spec.SetField(steprate.FieldTargetAchievement, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedTargetAchievement(); ok {
		_spec.AddField(steprate.FieldTargetAchievement, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.ReflectionImprovement(); ok {
		_spec.SetField(steprate.FieldReflectionImprovement, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedReflectionImprovement(); ok {
		_spec.AddField(steprate.FieldReflectionImprovement, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.Innovation(); ok {
		_spec.SetField(steprate.FieldInnovation, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedInnovation(); ok {
		_spec.AddField(steprate.FieldInnovation, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.BasicReliability(); ok {
		_spec.SetField(steprate.FieldBasicReliability, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedBasicReliability(); ok {
		_spec.AddField(steprate.FieldBasicReliability, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.SkillImprovement(); ok {
		_spec.SetField(steprate.FieldSkillImprovement, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedSkillImprovement(); ok {
		_spec.AddField(steprate.FieldSkillImprovement, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.Difficulty(); ok {
		_spec.SetField(steprate.FieldDifficulty, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedDifficulty(); ok {
		_spec.AddField(steprate.FieldDifficulty, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.Date(); ok {
		_spec.SetField(steprate.FieldDate, field.TypeTime, value)
	}
	_spec.AddModifiers(sruo.modifiers...)
	_node = &StepRate{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{steprate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
