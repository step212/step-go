// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"step/internal/data/ent/predicate"
	"step/internal/data/ent/steprate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StepRateDelete is the builder for deleting a StepRate entity.
type StepRateDelete struct {
	config
	hooks    []Hook
	mutation *StepRateMutation
}

// Where appends a list predicates to the StepRateDelete builder.
func (srd *StepRateDelete) Where(ps ...predicate.StepRate) *StepRateDelete {
	srd.mutation.Where(ps...)
	return srd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (srd *StepRateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, srd.sqlExec, srd.mutation, srd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (srd *StepRateDelete) ExecX(ctx context.Context) int {
	n, err := srd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (srd *StepRateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(steprate.Table, sqlgraph.NewFieldSpec(steprate.FieldID, field.TypeUint64))
	if ps := srd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, srd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	srd.mutation.done = true
	return affected, err
}

// StepRateDeleteOne is the builder for deleting a single StepRate entity.
type StepRateDeleteOne struct {
	srd *StepRateDelete
}

// Where appends a list predicates to the StepRateDelete builder.
func (srdo *StepRateDeleteOne) Where(ps ...predicate.StepRate) *StepRateDeleteOne {
	srdo.srd.mutation.Where(ps...)
	return srdo
}

// Exec executes the deletion query.
func (srdo *StepRateDeleteOne) Exec(ctx context.Context) error {
	n, err := srdo.srd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{steprate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (srdo *StepRateDeleteOne) ExecX(ctx context.Context) {
	if err := srdo.Exec(ctx); err != nil {
		panic(err)
	}
}
