// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"step/internal/data/ent/show"
	"step/internal/data/ent/showreserve"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShowReserve is the model entity for the ShowReserve schema.
type ShowReserve struct {
	config `json:"-"`
	// ID of the ent.
	// 自增ID
	ID uint64 `json:"id,omitempty"`
	// User ID
	UserID string `json:"user_id,omitempty"`
	// 状态
	Status showreserve.Status `json:"status,omitempty"`
	// 记忆
	Memories []string `json:"memories,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 关联的Show ID
	RefShowID uint64 `json:"ref_show_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShowReserveQuery when eager-loading is set.
	Edges        ShowReserveEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShowReserveEdges holds the relations/edges for other nodes in the graph.
type ShowReserveEdges struct {
	// Show holds the value of the show edge.
	Show *Show `json:"show,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ShowOrErr returns the Show value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShowReserveEdges) ShowOrErr() (*Show, error) {
	if e.Show != nil {
		return e.Show, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: show.Label}
	}
	return nil, &NotLoadedError{edge: "show"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShowReserve) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case showreserve.FieldMemories:
			values[i] = new([]byte)
		case showreserve.FieldID, showreserve.FieldCreatedAt, showreserve.FieldRefShowID:
			values[i] = new(sql.NullInt64)
		case showreserve.FieldUserID, showreserve.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShowReserve fields.
func (sr *ShowReserve) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case showreserve.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = uint64(value.Int64)
		case showreserve.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sr.UserID = value.String
			}
		case showreserve.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sr.Status = showreserve.Status(value.String)
			}
		case showreserve.FieldMemories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field memories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.Memories); err != nil {
					return fmt.Errorf("unmarshal field memories: %w", err)
				}
			}
		case showreserve.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Int64
			}
		case showreserve.FieldRefShowID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ref_show_id", values[i])
			} else if value.Valid {
				sr.RefShowID = uint64(value.Int64)
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShowReserve.
// This includes values selected through modifiers, order, etc.
func (sr *ShowReserve) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// QueryShow queries the "show" edge of the ShowReserve entity.
func (sr *ShowReserve) QueryShow() *ShowQuery {
	return NewShowReserveClient(sr.config).QueryShow(sr)
}

// Update returns a builder for updating this ShowReserve.
// Note that you need to call ShowReserve.Unwrap() before calling this method if this ShowReserve
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *ShowReserve) Update() *ShowReserveUpdateOne {
	return NewShowReserveClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the ShowReserve entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *ShowReserve) Unwrap() *ShowReserve {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShowReserve is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *ShowReserve) String() string {
	var builder strings.Builder
	builder.WriteString("ShowReserve(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(sr.UserID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sr.Status))
	builder.WriteString(", ")
	builder.WriteString("memories=")
	builder.WriteString(fmt.Sprintf("%v", sr.Memories))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("ref_show_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.RefShowID))
	builder.WriteByte(')')
	return builder.String()
}

// ShowReserves is a parsable slice of ShowReserve.
type ShowReserves []*ShowReserve
