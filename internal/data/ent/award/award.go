// Code generated by ent, DO NOT EDIT.

package award

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the award type in the database.
	Label = "award"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSettedFiles holds the string denoting the setted_files field in the database.
	FieldSettedFiles = "setted_files"
	// FieldRealizedFiles holds the string denoting the realized_files field in the database.
	FieldRealizedFiles = "realized_files"
	// FieldTargetType holds the string denoting the target_type field in the database.
	FieldTargetType = "target_type"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// FieldDimension holds the string denoting the dimension field in the database.
	FieldDimension = "dimension"
	// FieldThreshold holds the string denoting the threshold field in the database.
	FieldThreshold = "threshold"
	// FieldSettedAt holds the string denoting the setted_at field in the database.
	FieldSettedAt = "setted_at"
	// FieldAchievedAt holds the string denoting the achieved_at field in the database.
	FieldAchievedAt = "achieved_at"
	// FieldRealizedAt holds the string denoting the realized_at field in the database.
	FieldRealizedAt = "realized_at"
	// Table holds the table name of the award in the database.
	Table = "awards"
)

// Columns holds all SQL columns for award fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldStatus,
	FieldDescription,
	FieldSettedFiles,
	FieldRealizedFiles,
	FieldTargetType,
	FieldScope,
	FieldDimension,
	FieldThreshold,
	FieldSettedAt,
	FieldAchievedAt,
	FieldRealizedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSettedAt holds the default value on creation for the "setted_at" field.
	DefaultSettedAt int64
)

// Status defines the type for the "status" enum field.
type Status string

// StatusSetted is the default value of the Status enum.
const DefaultStatus = StatusSetted

// Status values.
const (
	StatusSetted   Status = "setted"
	StatusAchieved Status = "achieved"
	StatusRealized Status = "realized"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSetted, StatusAchieved, StatusRealized:
		return nil
	default:
		return fmt.Errorf("award: invalid enum value for status field: %q", s)
	}
}

// TargetType defines the type for the "target_type" enum field.
type TargetType string

// TargetType values.
const (
	TargetTypePortrait TargetType = "portrait"
	TargetTypeTarget   TargetType = "target"
)

func (tt TargetType) String() string {
	return string(tt)
}

// TargetTypeValidator is a validator for the "target_type" field enum values. It is called by the builders before save.
func TargetTypeValidator(tt TargetType) error {
	switch tt {
	case TargetTypePortrait, TargetTypeTarget:
		return nil
	default:
		return fmt.Errorf("award: invalid enum value for target_type field: %q", tt)
	}
}

// OrderOption defines the ordering options for the Award queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTargetType orders the results by the target_type field.
func ByTargetType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetType, opts...).ToFunc()
}

// ByScope orders the results by the scope field.
func ByScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScope, opts...).ToFunc()
}

// ByDimension orders the results by the dimension field.
func ByDimension(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDimension, opts...).ToFunc()
}

// ByThreshold orders the results by the threshold field.
func ByThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThreshold, opts...).ToFunc()
}

// BySettedAt orders the results by the setted_at field.
func BySettedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettedAt, opts...).ToFunc()
}

// ByAchievedAt orders the results by the achieved_at field.
func ByAchievedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAchievedAt, opts...).ToFunc()
}

// ByRealizedAt orders the results by the realized_at field.
func ByRealizedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRealizedAt, opts...).ToFunc()
}
