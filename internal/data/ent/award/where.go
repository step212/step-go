// Code generated by ent, DO NOT EDIT.

package award

import (
	"step/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldUserID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldDescription, v))
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldScope, v))
}

// Dimension applies equality check predicate on the "dimension" field. It's identical to DimensionEQ.
func Dimension(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldDimension, v))
}

// Threshold applies equality check predicate on the "threshold" field. It's identical to ThresholdEQ.
func Threshold(v int32) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldThreshold, v))
}

// SettedAt applies equality check predicate on the "setted_at" field. It's identical to SettedAtEQ.
func SettedAt(v int64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldSettedAt, v))
}

// AchievedAt applies equality check predicate on the "achieved_at" field. It's identical to AchievedAtEQ.
func AchievedAt(v int64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAchievedAt, v))
}

// RealizedAt applies equality check predicate on the "realized_at" field. It's identical to RealizedAtEQ.
func RealizedAt(v int64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldRealizedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Award {
	return predicate.Award(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Award {
	return predicate.Award(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Award {
	return predicate.Award(sql.FieldContainsFold(FieldUserID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldStatus, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Award {
	return predicate.Award(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Award {
	return predicate.Award(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Award {
	return predicate.Award(sql.FieldContainsFold(FieldDescription, v))
}

// SettedFilesIsNil applies the IsNil predicate on the "setted_files" field.
func SettedFilesIsNil() predicate.Award {
	return predicate.Award(sql.FieldIsNull(FieldSettedFiles))
}

// SettedFilesNotNil applies the NotNil predicate on the "setted_files" field.
func SettedFilesNotNil() predicate.Award {
	return predicate.Award(sql.FieldNotNull(FieldSettedFiles))
}

// RealizedFilesIsNil applies the IsNil predicate on the "realized_files" field.
func RealizedFilesIsNil() predicate.Award {
	return predicate.Award(sql.FieldIsNull(FieldRealizedFiles))
}

// RealizedFilesNotNil applies the NotNil predicate on the "realized_files" field.
func RealizedFilesNotNil() predicate.Award {
	return predicate.Award(sql.FieldNotNull(FieldRealizedFiles))
}

// TargetTypeEQ applies the EQ predicate on the "target_type" field.
func TargetTypeEQ(v TargetType) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldTargetType, v))
}

// TargetTypeNEQ applies the NEQ predicate on the "target_type" field.
func TargetTypeNEQ(v TargetType) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldTargetType, v))
}

// TargetTypeIn applies the In predicate on the "target_type" field.
func TargetTypeIn(vs ...TargetType) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldTargetType, vs...))
}

// TargetTypeNotIn applies the NotIn predicate on the "target_type" field.
func TargetTypeNotIn(vs ...TargetType) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldTargetType, vs...))
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldScope, v))
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldScope, v))
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldScope, vs...))
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldScope, vs...))
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldScope, v))
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldScope, v))
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldScope, v))
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldScope, v))
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.Award {
	return predicate.Award(sql.FieldContains(FieldScope, v))
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasPrefix(FieldScope, v))
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasSuffix(FieldScope, v))
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.Award {
	return predicate.Award(sql.FieldEqualFold(FieldScope, v))
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.Award {
	return predicate.Award(sql.FieldContainsFold(FieldScope, v))
}

// DimensionEQ applies the EQ predicate on the "dimension" field.
func DimensionEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldDimension, v))
}

// DimensionNEQ applies the NEQ predicate on the "dimension" field.
func DimensionNEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldDimension, v))
}

// DimensionIn applies the In predicate on the "dimension" field.
func DimensionIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldDimension, vs...))
}

// DimensionNotIn applies the NotIn predicate on the "dimension" field.
func DimensionNotIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldDimension, vs...))
}

// DimensionGT applies the GT predicate on the "dimension" field.
func DimensionGT(v string) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldDimension, v))
}

// DimensionGTE applies the GTE predicate on the "dimension" field.
func DimensionGTE(v string) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldDimension, v))
}

// DimensionLT applies the LT predicate on the "dimension" field.
func DimensionLT(v string) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldDimension, v))
}

// DimensionLTE applies the LTE predicate on the "dimension" field.
func DimensionLTE(v string) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldDimension, v))
}

// DimensionContains applies the Contains predicate on the "dimension" field.
func DimensionContains(v string) predicate.Award {
	return predicate.Award(sql.FieldContains(FieldDimension, v))
}

// DimensionHasPrefix applies the HasPrefix predicate on the "dimension" field.
func DimensionHasPrefix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasPrefix(FieldDimension, v))
}

// DimensionHasSuffix applies the HasSuffix predicate on the "dimension" field.
func DimensionHasSuffix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasSuffix(FieldDimension, v))
}

// DimensionEqualFold applies the EqualFold predicate on the "dimension" field.
func DimensionEqualFold(v string) predicate.Award {
	return predicate.Award(sql.FieldEqualFold(FieldDimension, v))
}

// DimensionContainsFold applies the ContainsFold predicate on the "dimension" field.
func DimensionContainsFold(v string) predicate.Award {
	return predicate.Award(sql.FieldContainsFold(FieldDimension, v))
}

// ThresholdEQ applies the EQ predicate on the "threshold" field.
func ThresholdEQ(v int32) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldThreshold, v))
}

// ThresholdNEQ applies the NEQ predicate on the "threshold" field.
func ThresholdNEQ(v int32) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldThreshold, v))
}

// ThresholdIn applies the In predicate on the "threshold" field.
func ThresholdIn(vs ...int32) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldThreshold, vs...))
}

// ThresholdNotIn applies the NotIn predicate on the "threshold" field.
func ThresholdNotIn(vs ...int32) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldThreshold, vs...))
}

// ThresholdGT applies the GT predicate on the "threshold" field.
func ThresholdGT(v int32) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldThreshold, v))
}

// ThresholdGTE applies the GTE predicate on the "threshold" field.
func ThresholdGTE(v int32) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldThreshold, v))
}

// ThresholdLT applies the LT predicate on the "threshold" field.
func ThresholdLT(v int32) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldThreshold, v))
}

// ThresholdLTE applies the LTE predicate on the "threshold" field.
func ThresholdLTE(v int32) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldThreshold, v))
}

// SettedAtEQ applies the EQ predicate on the "setted_at" field.
func SettedAtEQ(v int64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldSettedAt, v))
}

// SettedAtNEQ applies the NEQ predicate on the "setted_at" field.
func SettedAtNEQ(v int64) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldSettedAt, v))
}

// SettedAtIn applies the In predicate on the "setted_at" field.
func SettedAtIn(vs ...int64) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldSettedAt, vs...))
}

// SettedAtNotIn applies the NotIn predicate on the "setted_at" field.
func SettedAtNotIn(vs ...int64) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldSettedAt, vs...))
}

// SettedAtGT applies the GT predicate on the "setted_at" field.
func SettedAtGT(v int64) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldSettedAt, v))
}

// SettedAtGTE applies the GTE predicate on the "setted_at" field.
func SettedAtGTE(v int64) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldSettedAt, v))
}

// SettedAtLT applies the LT predicate on the "setted_at" field.
func SettedAtLT(v int64) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldSettedAt, v))
}

// SettedAtLTE applies the LTE predicate on the "setted_at" field.
func SettedAtLTE(v int64) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldSettedAt, v))
}

// AchievedAtEQ applies the EQ predicate on the "achieved_at" field.
func AchievedAtEQ(v int64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAchievedAt, v))
}

// AchievedAtNEQ applies the NEQ predicate on the "achieved_at" field.
func AchievedAtNEQ(v int64) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldAchievedAt, v))
}

// AchievedAtIn applies the In predicate on the "achieved_at" field.
func AchievedAtIn(vs ...int64) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldAchievedAt, vs...))
}

// AchievedAtNotIn applies the NotIn predicate on the "achieved_at" field.
func AchievedAtNotIn(vs ...int64) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldAchievedAt, vs...))
}

// AchievedAtGT applies the GT predicate on the "achieved_at" field.
func AchievedAtGT(v int64) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldAchievedAt, v))
}

// AchievedAtGTE applies the GTE predicate on the "achieved_at" field.
func AchievedAtGTE(v int64) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldAchievedAt, v))
}

// AchievedAtLT applies the LT predicate on the "achieved_at" field.
func AchievedAtLT(v int64) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldAchievedAt, v))
}

// AchievedAtLTE applies the LTE predicate on the "achieved_at" field.
func AchievedAtLTE(v int64) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldAchievedAt, v))
}

// AchievedAtIsNil applies the IsNil predicate on the "achieved_at" field.
func AchievedAtIsNil() predicate.Award {
	return predicate.Award(sql.FieldIsNull(FieldAchievedAt))
}

// AchievedAtNotNil applies the NotNil predicate on the "achieved_at" field.
func AchievedAtNotNil() predicate.Award {
	return predicate.Award(sql.FieldNotNull(FieldAchievedAt))
}

// RealizedAtEQ applies the EQ predicate on the "realized_at" field.
func RealizedAtEQ(v int64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldRealizedAt, v))
}

// RealizedAtNEQ applies the NEQ predicate on the "realized_at" field.
func RealizedAtNEQ(v int64) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldRealizedAt, v))
}

// RealizedAtIn applies the In predicate on the "realized_at" field.
func RealizedAtIn(vs ...int64) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldRealizedAt, vs...))
}

// RealizedAtNotIn applies the NotIn predicate on the "realized_at" field.
func RealizedAtNotIn(vs ...int64) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldRealizedAt, vs...))
}

// RealizedAtGT applies the GT predicate on the "realized_at" field.
func RealizedAtGT(v int64) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldRealizedAt, v))
}

// RealizedAtGTE applies the GTE predicate on the "realized_at" field.
func RealizedAtGTE(v int64) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldRealizedAt, v))
}

// RealizedAtLT applies the LT predicate on the "realized_at" field.
func RealizedAtLT(v int64) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldRealizedAt, v))
}

// RealizedAtLTE applies the LTE predicate on the "realized_at" field.
func RealizedAtLTE(v int64) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldRealizedAt, v))
}

// RealizedAtIsNil applies the IsNil predicate on the "realized_at" field.
func RealizedAtIsNil() predicate.Award {
	return predicate.Award(sql.FieldIsNull(FieldRealizedAt))
}

// RealizedAtNotNil applies the NotNil predicate on the "realized_at" field.
func RealizedAtNotNil() predicate.Award {
	return predicate.Award(sql.FieldNotNull(FieldRealizedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Award) predicate.Award {
	return predicate.Award(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Award) predicate.Award {
	return predicate.Award(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Award) predicate.Award {
	return predicate.Award(sql.NotPredicates(p))
}
