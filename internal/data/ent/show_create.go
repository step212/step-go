// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"step/internal/data/ent/show"
	"step/internal/data/ent/showreserve"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShowCreate is the builder for creating a Show entity.
type ShowCreate struct {
	config
	mutation *ShowMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (sc *ShowCreate) SetType(s string) *ShowCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetPoster sets the "poster" field.
func (sc *ShowCreate) SetPoster(s string) *ShowCreate {
	sc.mutation.SetPoster(s)
	return sc
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (sc *ShowCreate) SetNillablePoster(s *string) *ShowCreate {
	if s != nil {
		sc.SetPoster(*s)
	}
	return sc
}

// SetContent sets the "content" field.
func (sc *ShowCreate) SetContent(s string) *ShowCreate {
	sc.mutation.SetContent(s)
	return sc
}

// SetMediaFiles sets the "media_files" field.
func (sc *ShowCreate) SetMediaFiles(s []string) *ShowCreate {
	sc.mutation.SetMediaFiles(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ShowCreate) SetCreatedAt(i int64) *ShowCreate {
	sc.mutation.SetCreatedAt(i)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ShowCreate) SetNillableCreatedAt(i *int64) *ShowCreate {
	if i != nil {
		sc.SetCreatedAt(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ShowCreate) SetID(u uint64) *ShowCreate {
	sc.mutation.SetID(u)
	return sc
}

// AddShowReserfIDs adds the "show_reserves" edge to the ShowReserve entity by IDs.
func (sc *ShowCreate) AddShowReserfIDs(ids ...uint64) *ShowCreate {
	sc.mutation.AddShowReserfIDs(ids...)
	return sc
}

// AddShowReserves adds the "show_reserves" edges to the ShowReserve entity.
func (sc *ShowCreate) AddShowReserves(s ...*ShowReserve) *ShowCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddShowReserfIDs(ids...)
}

// Mutation returns the ShowMutation object of the builder.
func (sc *ShowCreate) Mutation() *ShowMutation {
	return sc.mutation
}

// Save creates the Show in the database.
func (sc *ShowCreate) Save(ctx context.Context) (*Show, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShowCreate) SaveX(ctx context.Context) *Show {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShowCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShowCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShowCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := show.DefaultCreatedAt
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShowCreate) check() error {
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Show.type"`)}
	}
	if _, ok := sc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Show.content"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Show.created_at"`)}
	}
	return nil
}

func (sc *ShowCreate) sqlSave(ctx context.Context) (*Show, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShowCreate) createSpec() (*Show, *sqlgraph.CreateSpec) {
	var (
		_node = &Show{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(show.Table, sqlgraph.NewFieldSpec(show.FieldID, field.TypeUint64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(show.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.Poster(); ok {
		_spec.SetField(show.FieldPoster, field.TypeString, value)
		_node.Poster = value
	}
	if value, ok := sc.mutation.Content(); ok {
		_spec.SetField(show.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := sc.mutation.MediaFiles(); ok {
		_spec.SetField(show.FieldMediaFiles, field.TypeJSON, value)
		_node.MediaFiles = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(show.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if nodes := sc.mutation.ShowReservesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   show.ShowReservesTable,
			Columns: []string{show.ShowReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showreserve.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShowCreateBulk is the builder for creating many Show entities in bulk.
type ShowCreateBulk struct {
	config
	err      error
	builders []*ShowCreate
}

// Save creates the Show entities in the database.
func (scb *ShowCreateBulk) Save(ctx context.Context) ([]*Show, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Show, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShowCreateBulk) SaveX(ctx context.Context) []*Show {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShowCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShowCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
