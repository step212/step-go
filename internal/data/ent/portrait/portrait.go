// Code generated by ent, DO NOT EDIT.

package portrait

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the portrait type in the database.
	Label = "portrait"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldDimension holds the string denoting the dimension field in the database.
	FieldDimension = "dimension"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// Table holds the table name of the portrait in the database.
	Table = "portraits"
)

// Columns holds all SQL columns for portrait fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldDimension,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Dimension defines the type for the "dimension" enum field.
type Dimension string

// Dimension values.
const (
	DimensionBasic              Dimension = "basic"
	DimensionSelfDiscipline     Dimension = "self_discipline"
	DimensionTargetAndExecution Dimension = "target_and_execution"
	DimensionLearningAndGrowth  Dimension = "learning_and_growth"
)

func (d Dimension) String() string {
	return string(d)
}

// DimensionValidator is a validator for the "dimension" field enum values. It is called by the builders before save.
func DimensionValidator(d Dimension) error {
	switch d {
	case DimensionBasic, DimensionSelfDiscipline, DimensionTargetAndExecution, DimensionLearningAndGrowth:
		return nil
	default:
		return fmt.Errorf("portrait: invalid enum value for dimension field: %q", d)
	}
}

// OrderOption defines the ordering options for the Portrait queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByDimension orders the results by the dimension field.
func ByDimension(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDimension, opts...).ToFunc()
}
